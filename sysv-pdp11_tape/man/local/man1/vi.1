'\" t
.\" --- 8/82
.TH VI 1 
.UC
.SH NAME
vi \- screen oriented (visual) display editor based on ex
.SH SYNOPSIS
.B vi
[
.B \-t
.I tag\^
] [
.B \-r
.I file\^
] [
\fB+\fR\fIcommand\fR
] [
.B \-l
] [
\fB\-w\fIn\fR
] [
.B \-x
]  name ...
.SH DESCRIPTION
.I Vi\^
(visual) is a display oriented text editor based on
an underlying line editor
.IR ex (1).
It is possible to use
the command mode of
.I ex\^
from within
.I vi\^
and vice-versa.
.PP
When using 
.I vi
changes you make to the file are reflected in what you see on your
terminal screen.
The position of the cursor on the screen indicates 
the position within the file.
The
.I "Vi Quick Reference"\^
card and the
.I "Introduction to Display Editing with Vi"\^
provide full details on using
.I vi.\^
.PP
.SH INVOCATION
The following invocation options are interpreted by
.IR vi :
.TP 15
.BI \-t tag\^
Edit the file containing the 
.I tag\^
and position the editor at its definition.
.TP
.BI \-r file\^
Recover
.I file\^
after an editor or system crash.
If
.I file\^ 
is not specified a list of all 
saved files will be printed.
.TP
.BI \+ command
Begin editing by executing the specified editor
search or positioning
.I command .
.TP
.B \-l
.B LISP
mode; indents appropriately for lisp code,
the 
.B "() {} [["
and
.B ]]
commands in 
.I vi\^
and
.I open
are modified to have meaning for
.I lisp .
.TP
.BI \-w n\^
Set the default window size to
.I n\^.
This is useful when using the editor over a slow speed line.
.TP
.B \-x
Encryption mode; a key is prompted for allowing creation or
editing of an encrypted file.
.PP
The 
.I name\^
argument indicates files to be edited.
.SH \fi"VI STATES"
.TP 15 
Command
Normal and initial state.  Other states return to command state
upon completion.
ESC (escape) is used to cancel a partial command.
.TP
Insert
Entered by \fBa i A I o O c C s S\fP \fBR\fP.
Arbitrary text  may then be entered. 
Insert is  normally terminated with ESC character,
or abnormally with interrupt.
.TP
Last line
Reading input for \fB: / ?\fP or \fB!\fP; terminate
with ESC or CR to execute, interrupt to cancel.
.SH "COMMANDS"
.SS "Counts before vi commands"
.TS
lw(1.5i) lw(1.7i)b.
line/column number	z  G  |	
scroll amount	^D  ^U
replicate insert	a  i  A  I
repeat effect	\fRmost of the rest\fP
.TE
.SS "Sample commands"
.TS
lw(1.5i)b lw(1.7i).
dw	delete a word
de	... leaving white space
dd	delete a line
3dd	... 3 lines
i\fItext\fP\fRESC\fP	insert text \fIabc\fP
cw\fInew\fP\fRESC\fP	change word to \fInew\fP
ea\fIs\fP\fRESC\fP	pluralize word
xp	transpose characters
ZZ	exit vi
.TE
.SS "Interrupting, canceling"
.TS
aw(0.75i)b aw(1.6i).
ESC	end insert or incomplete cmd
^?	(delete or rubout) interrupts
^L	reprint screen if \fB^?\fR scrambles it
.TE
.SS "File manipulation"
.TS
aw(0.75i)b aw(1.6i).
:w	write back changes
:wq	write and quit
:q	quit
:q!	quit, discard changes
:e \fIname\fP	edit file \fIname\fP
:e!	reedit, discard changes
:e + \fIname\fP	edit, starting at end
:e +\fIn\fR	edit starting at line \fIn\fR
:e #	edit alternate file
^\^	synonym for \fB:e #\fP
:w \fIname\fP	write file \fIname\fP
:w! \fIname\fP	overwrite file \fIname\fP
:sh	run shell, then return
:!\fIcmd\fP	run \fIcmd\fR, then return
:n	edit next file in arglist
:n \fIargs\fP	specify new arglist
:f	show current file and line
^G	synonym for \fB:f\fP
:ta \fItag\fP	to tag file entry \fItag\fP
^]	\fB:ta\fP, following word is \fItag\fP
.TE
.SS "Positioning within file"
.TS
aw(0.75i)b aw(1.6i).
^F	forward screen
^B	backward screen
^D	scroll down half screen
^U	scroll up half screen
G	goto line (end default)
/\fIpat\fR	next line matching \fIpat\fR
?\fIpat\fR	prev line matching \fIpat\fR
n	repeat last \fB/\fR or \fB?\fR
N	reverse last \fB/\fR or \fB?\fR
/\fIpat\fP/+\fIn\fP	n'th line after \fIpat\fR
?\fIpat\fP?\-\fIn\fP	n'th line before \fIpat\fR
]]	next section/function
[[	previous section/function
%	find matching \fB( ) {\fP or \fB}\fP
.TE
.SS "Adjusting the screen"
.TS
aw(0.75i)b aw(1.6i).
^L	clear and redraw
^R	retype, eliminate @ lines
z\fRCR\fP	redraw, current at window top
z\-	... at bottom
z\|.	... at center
/\fIpat\fP/z\-	\fIpat\fP line at bottom
z\fIn\fP\|.	use \fIn\fP line window
^E	scroll window down 1 line
^Y	scroll window up 1 line
.TE
.SS "Marking and returning
.TS
aw(0.5i)b aw(2.0i).
\(ga\(ga	previous context
\(aa\(aa	... at first non-white in line
m\fIx\fP	mark position with letter \fIx\fP
\(ga\fIx\fP	to mark \fIx\fP
\(aa\fIx\fP	... at first non-white in line
.TE
.SS "Line positioning"
.TS
aw(0.5i)b aw(2.0i).
H	home window line
L	last window line
M	middle window line
+	next line, at first non-white
\-	previous line, at first non-white
\fRCR\fP	return, same as +
\(da \fRor\fP j	next line, same column
\(ua \fRor\fP k	previous line, same column
.TE
.SS "Character positioning"
.TS
aw(0.5i)b aw(2.0i).
^	first non white
0	beginning of line
$	end of line
h \fRor\fP \(->	forward
l \fRor\fP \(<-	backwards
^H	same as \fB\(<-\fP
\fRspace\fP	same as \fB\(->\fP
f\fIx\fP	find \fIx\fP forward
F\fIx\fP	\fBf\fR backward
t\fIx\fP	upto \fIx\fP forward
T\fIx\fP	back upto \fIx\fP
;	repeat last \fBf F t\fP or \fBT\fP
,	inverse of \fB;\fP
|	to specified column
%	find matching \fB( { )\fP or \fB}\fR
.TE
.SS "Words, sentences, paragraphs"
.TS
aw(0.5i)b aw(2.0i).
w	word forward
b	back word
e	end of word
)	to next sentence
}	to next paragraph
(	back sentence
{	back paragraph
W	blank delimited word
B	back \fBW\fP
E	to end of \fBW\fP
.TE
.SS "Commands for \s-2LISP\s0 Mode"
.TS
aw(0.5i)b aw(2.0i).
)	Forward s-expression
}	... but don't stop at atoms
(	Back s-expression
{	... but don't stop at atoms
.TE
.SS "Corrections during insert"
.TS
aw(.5i)b aw(2.0i).
^H	erase last character
^W	erase last word
\fRerase\fP	your erase, same as \fB^H\fP
\fRkill\fP	your kill, erase input this line
\e	escapes \fB^H\fR, your erase and kill
\fRESC\fP	ends insertion, back to command
^?	interrupt, terminates insert
^D	backtab over \fIautoindent\fP
\(ua^D	kill \fIautoindent\fP, save for next
0^D	... but at margin next also
^V	quote non-printing character
.TE
.SS "Insert and replace"
.TS
aw(.5i)b aw(2.0i).
a	append after cursor
i	insert before
A	append at end of line
I	insert before first non-blank
o	open line below
O	open above
r\fIx\fP	replace single char with \fIx\fP
R	replace characters
.TE
.SS "Operators (double to affect lines)"
.TS
aw(0.5i)b aw(2.0i).
d	delete
c	change
<	left shift
>	right shift
!	filter through command
\&\=	indent for \s-2LISP\s0
y	yank lines to buffer
.TE
.SS "Miscellaneous operations"
.TS
aw(0.5i)b aw(2.0i).
C	change rest of line
D	delete rest of line
s	substitute chars
S	substitute lines
J	join lines
x	delete characters
X	... before cursor
Y	yank lines
.TE
.SS "Yank and put"
.TS
aw(0.5i)b aw(2.0i).
p	put back lines
P	put before
"\fIx\fPp	put from buffer \fIx\fP
"\fIx\fPy	yank to buffer \fIx\fP
"\fIx\fPd	delete into buffer \fIx\fP
.TE
.SS "Undo, redo, retrieve"
.TS
aw(0.5i)b aw(2.0i).
u	undo last change
U	restore current line
\fB.\fP	repeat last change
"\fId\fP\|p	retrieve \fId\fP'th last delete
.TE
.SH AUTHOR
.I Vi
and
.I ex
are based on software developed by 
The Unviersity of California,
Berkeley California,
Computer Science Division,
Department of Electrical Engineering and Computer Science.
.SH SEE ALSO
ex (1).
``Vi Quick Reference'' card and
``An Introduction to Display Editing with Vi'',
in the UNIX System Document Processing Guide.
.BP
.SH "CAVEATS AND BUGS"
The version of
.I vi
that runs on the 
.B PDP11
does not support the full command set due to space limitations.
The commands which are not supported are detailed in 
``An Introduction to Display Editing with Vi''.
The most notable commands which are missing are the macro and abbreviation
facilities.
.PP
Software tabs using \fB^T\fR work only immediately after the
.I autoindent.
.PP
Left and right shifts on intelligent terminals don't make use of
insert and delete character operations in the terminal.
.PP
The
.I wrapmargin
option can be fooled since it looks at output columns when blanks are typed.
If a long word passes through the margin and onto the next line without a 
break, then the line won't be broken.
.PP
Insert/delete within a line can be slow if tabs are present on intelligent
terminals, since the terminals need help in doing this correctly.
.PP
Saving text on deletes in the named buffers is somewhat inefficient.
.PP
The
.I source
command does not work when executed as \fB:source\fR;
there is no way to use the \fB:append\fR, \fB:change\fR,
and \fB:insert\fR commands, since it is not possible to give
more than one line of input to a \fB:\fR escape.  To use these
on a \fB:global\fR you must \fBQ\fR to \fIex\fR command mode,
execute them, and then reenter the screen editor with
.I vi
or
.I open.
