.xx "" "/functions of HP 2640 and" "2621-series terminals." "" hp(1)
.xx "" "handle special functions of HP" "2640 and 2621-series/" "hp:" hp(1)
.xx "archiver." "hpio: HP" "2645A terminal tape file" "" hpio(1)
.xx "functions of DASI 300 and/" "" "300, 300s: handle special" "" 300(1)
.xx "" "/special functions of DASI" "300 and 300s terminals." "" 300(1)
.xx "of DASI 300 and 300s/" "300," "300s: handle special functions" "" 300(1)
.xx "" "functions of DASI 300 and" "300s terminals." "/special" 300(1)
.xx "" "dis:" "3B20S disassembler." "" dis(1)
.xx "" "produce C source listing from" "3B20S object file." "list:" list(1)
.xx "" "sys3b:" "3B20S specific system calls." "" sys3b(2)
.xx "" "system: format of" "3B20S system description file." "" system(4)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long/" "" l3tol(3C)
.xx "comparison." "diff3:" "3-way differential file" "" diff3(1)
.xx "Tektronix 4014 terminal." "" "4014: paginator for the" "" 4014(1)
.xx "" "paginator for the Tektronix" "4014 terminal." "4014:" 4014(1)
.xx "of the DASI 450 terminal." "" "450: handle special functions" "" 450(1)
.xx "" "special functions of the DASI" "450 terminal." "450: handle" 450(1)
.xx "" "files from the HONEYWELL" "6000." "/fget.demon: retrieve" fget(1C)
.xx "" "send files to the HONEYWELL" "6000." "fsend:" fsend(1C)
.xx "" "output to the HONEYWELL" "6000." "/send phototypesetter" gcat(1C)
.xx "" "f77: Fortran" "77 compiler." "" f77(1)
.xx "long integer and base-64/" "" "a64l, l64a: convert between" "" a64l(3C)
.xx "" "" "abort: generate an IOT fault." "" abort(3C)
.xx "program." "" "abort: terminate Fortran" "" abort(3F)
.xx "Fortran absolute value." "" "abs, iabs, dabs, cabs, zabs:" "" abs(3F)
.xx "value." "" "abs: return integer absolute" "" abs(3C)
.xx "" "adb:" "absolute debugger." "" adb(1)
.xx "" "abs: return integer" "absolute value." "" abs(3C)
.xx "" "dabs, cabs, zabs: Fortran" "absolute value." "abs, iabs," abs(3F)
.xx "" "/floor, ceiling, remainder," "absolute value functions." "" floor(3M)
.xx "of a file." "touch: update" "access and modification times" "" touch(1)
.xx "" "utime: set file" "access and modification times." "" utime(2)
.xx "accessibility of a file." "" "access: determine" "" access(2)
.xx "commands." "graphics:" "access graphical and numerical" "" graphics(1G)
.xx "machine/" "sputl, sgetl:" "access long numeric data in a" "" sputl(3X)
.xx "" "sadp: disk" "access profiler." "" sadp(1)
.xx "" "ldfcn: common object file" "access routines." "" ldfcn(4)
.xx "" "/setutent, endutent, utmpname:" "access utmp file entry." "" getut(3C)
.xx "" "access: determine" "accessibility of a file." "" access(2)
.xx "" "enable or disable process" "accounting." "acct:" acct(2)
.xx "" "acct: per-process" "accounting file format." "" acct(4)
.xx "" "search and print process" "accounting file(s)." "acctcom:" acctcom(1)
.xx "" "mclock: return Fortran time" "accounting." "" mclock(3F)
.xx "process accounting." "" "acct: enable or disable" "" acct(2)
.xx "file format." "" "acct: per-process accounting" "" acct(4)
.xx "process accounting file(s)." "" "acctcom: search and print" "" acctcom(1)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2:/" "" trig(3M)
.xx "intrinsic function." "" "acos, dacos: Fortran arccosine" "" acos(3F)
.xx "" "sag: system" "activity graph." "" sag(1G)
.xx "" "sar: system" "activity reporter." "" sar(1)
.xx "" "current SCCS file editing" "activity." "sact: print" sact(1)
.xx "" "report process data and system" "activity." "/time a command;" timex(1)
.xx "formatting/" "mosd: the OSDD" "adapter macro package for" "" mosd(5)
.xx "" "" "adb: absolute debugger." "" adb(1)
.xx "SCCS files." "" "admin: create and administer" "" admin(1)
.xx "" "admin: create and" "administer SCCS files." "" admin(1)
.xx "imaginary part of complex/" "" "aimag, dimag: Fortran" "" aimag(3F)
.xx "part intrinsic function." "" "aint, dint: Fortran integer" "" aint(3F)
.xx "" "alarm: set a process's" "alarm clock." "" alarm(2)
.xx "clock." "" "alarm: set a process's alarm" "" alarm(2)
.xx "" "change data segment space" "allocation." "brk, sbrk:" brk(2)
.xx "" "realloc, calloc: main memory" "allocator." "malloc, free," malloc(3C)
.xx "natural logarithm/" "log," "alog, dlog, clog: Fortran" "" log(3F)
.xx "logarithm intrinsic/" "log10," "alog10, dlog10: Fortran common" "" log10(3F)
.xx "Fortran/" "max, max0," "amax0, max1, amax1, dmax1:" "" max(3F)
.xx "" "max, max0, amax0, max1," "amax1, dmax1: Fortran/" "" max(3F)
.xx "Fortran/" "min, min0," "amin0, min1, amin1, dmin1:" "" min(3F)
.xx "" "min, min0, amin0, min1," "amin1, dmin1: Fortran/" "" min(3F)
.xx "remaindering intrinsic/" "mod," "amod, dmod: Fortran" "" mod(3F)
.xx "rshift: Fortran bitwise/" "" "and, or, xor, not, lshift," "" bool(3F)
.xx "" "sort: sort" "and/or merge files." "" sort(1)
.xx "" "send, gath: gather files" "and/or submit RJE jobs." "" send(1C)
.xx "Fortran nearest integer/" "" "anint, dnint, nint, idnint:" "" round(3F)
.xx "link editor output." "" "a.out: common assembler and" "" a.out(4)
.xx "link editor output." "" "a.out: PDP\&-11 assembler and" "" a.out.pdp(4)
.xx "" "introduction to commands and" "application programs." "intro:" intro(1)
.xx "maintainer." "" "ar: archive and library" "" ar.pdp(1)
.xx "maintainer for portable/" "" "ar: archive and library" "" ar(1)
.xx "" "" "ar: archive file format." "" ar.pdp(4)
.xx "format." "" "ar: common archive file" "" ar(4)
.xx "language." "bc:" "arbitrary-precision arithmetic" "" bc(1)
.xx "" "acos, dacos: Fortran" "arccosine intrinsic function." "" acos(3F)
.xx "maintainer." "ar:" "archive and library" "" ar.pdp(1)
.xx "for portable archives." "ar:" "archive and library maintainer" "" ar(1)
.xx "" "cpio: format of cpio" "archive." "" cpio(4)
.xx "" "ar: common" "archive file format." "" ar(4)
.xx "" "ar:" "archive file format." "" ar.pdp(4)
.xx "" "header of a member of an" "archive file." "/the archive" ldahread(3X)
.xx "common archive/" "arcv: convert" "archive files from PDP-11 to" "" arcv(1)
.xx "" "convert: convert object and" "archive files to common/" "" convert(1)
.xx "" "files from PDP-11 to common" "archive format." "/archive" arcv(1)
.xx "an archive/" "ldahread: read the" "archive header of a member of" "" ldahread(3X)
.xx "" "HP 2645A terminal tape file" "archiver." "hpio:" hpio(1)
.xx "" "tar: tape file" "archiver." "" tar(1)
.xx "" "maintainer for portable" "archives." "/archive and library" ar(1)
.xx "" "cpio: copy file" "archives in and out." "" cpio(1)
.xx "" "asin, dasin: Fortran" "arcsine intrinsic function." "" asin(3F)
.xx "" "atan2, datan2: Fortran" "arctangent intrinsic function." "" atan2(3F)
.xx "" "atan, datan: Fortran" "arctangent intrinsic function." "" atan(3F)
.xx "from PDP-11 to common archive/" "" "arcv: convert archive files" "" arcv(1)
.xx "" "imaginary part of complex" "argument." "/dimag: Fortran" aimag(3F)
.xx "" "return Fortran command-line" "argument." "getarg:" getarg(3F)
.xx "command." "xargs: construct" "argument list(s) and execute" "" xargs(1)
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "number facts." "" "arithmetic: provide drill in" "" arithmetic(6)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as: assembler for PDP-11." "" as.pdp(1)
.xx "" "" "as: common assembler." "" as(1)
.xx "characters." "asa: interpret" "ASA carriage control" "" asa(1)
.xx "control characters." "" "asa: interpret ASA carriage" "" asa(1)
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)
.xx "set." "" "ascii: map of ASCII character" "" ascii(5)
.xx "" "long integer and base-64" "ASCII string." "/convert between" a64l(3C)
.xx "number." "atof: convert" "ASCII string to floating-point" "" atof(3C)
.xx "and/" "ctime, localtime, gmtime," "asctime, tzset: convert date" "" ctime(3C)
.xx "trigonometric/" "sin, cos, tan," "asin, acos, atan, atan2:" "" trig(3M)
.xx "intrinsic function." "" "asin, dasin: Fortran arcsine" "" asin(3F)
.xx "" "help:" "ask for help." "" help(1)
.xx "output." "a.out: common" "assembler and link editor" "" a.out(4)
.xx "output." "a.out: PDP\&-11" "assembler and link editor" "" a.out.pdp(4)
.xx "" "as: common" "assembler." "" as(1)
.xx "" "as:" "assembler for PDP-11." "" as.pdp(1)
.xx "KMC\&11B/" "kasb, kunb:" "assembler/un-assembler for the" "" kasb(1)
.xx "assertion." "" "assert: verify program" "" assert(3X)
.xx "" "assert: verify program" "assertion." "" assert(3X)
.xx "" "setbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric/" "" trig(3M)
.xx "arctangent intrinsic/" "" "atan, datan: Fortran" "" atan(3F)
.xx "arctangent intrinsic/" "" "atan2, datan2: Fortran" "" atan2(3F)
.xx "" "cos, tan, asin, acos, atan," "atan2: trigonometric/" "sin," trig(3M)
.xx "floating-point number." "" "atof: convert ASCII string to" "" atof(3C)
.xx "integer." "strtol, atol," "atoi: convert string to" "" strtol(3C)
.xx "integer." "strtol," "atol, atoi: convert string to" "" strtol(3C)
.xx "link." "x25alnk, x25ilnk:" "attach or install a BX.25" "" x25alnk(3C)
.xx "" "wait:" "await completion of process." "" wait(1)
.xx "processing language." "" "awk: pattern scanning and" "" awk(1)
.xx "" "ungetc: push character" "back into input stream." "" ungetc(3S)
.xx "" "" "back: the game of backgammon." "" back(6)
.xx "" "back: the game of" "backgammon." "" back(6)
.xx "" "" "banner: make posters." "" banner(1)
.xx "" "between long integer and" "base-64 ASCII string." "/convert" a64l(3C)
.xx "portions of path names." "" "basename, dirname: deliver" "" basename(1)
.xx "arithmetic language." "" "bc: arbitrary-precision" "" bc(1)
.xx "" "" "bdiff: big diff." "" bdiff(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)
.xx "" "" "bfs: big file scanner." "" bfs(1)
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)
.xx "" "bsearch:" "binary search." "" bsearch(3C)
.xx "" "tdelete, twalk: manage" "binary search trees." "tsearch," tsearch(3C)
.xx "" "remove symbols and relocation" "bits." "strip:" strip.pdp(1)
.xx "" "/not, lshift, rshift: Fortran" "bitwise boolean functions." "" bool(3F)
.xx "" "" "bj: the game of black jack." "" bj(6)
.xx "" "bj: the game of" "black jack." "" bj(6)
.xx "" "sum: print checksum and" "block count of a file." "" sum(1)
.xx "" "sync: update the super" "block." "" sync(1)
.xx "" "rshift: Fortran bitwise" "boolean functions." "/lshift," bool(3F)
.xx "space allocation." "" "brk, sbrk: change data segment" "" brk(2)
.xx "modest-sized programs." "" "bs: a compiler/interpreter for" "" bs(1)
.xx "" "" "bsearch: binary search." "" bsearch(3C)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "x25ilnk: attach or install a" "BX.25 link." "x25alnk," x25alnk(3C)
.xx "" "x25clnk: change over a" "BX.25 link." "" x25clnk(3C)
.xx "" "x25dlnk: halt or detach a" "BX.25 link." "x25hlnk," x25hlnk(3C)
.xx "" "swab: swap" "bytes." "" swab(3C)
.xx "" "cc, pcc:" "C compiler." "" cc(1)
.xx "programs." "scc:" "C compiler for stand-alone" "" scc(1)
.xx "" "cflow: generate" "C flow graph." "" cflow(1)
.xx "" "cpp: the" "C language preprocessor." "" cpp(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "lint: a" "C program checker." "" lint(1)
.xx "" "cxref: generate" "C program cross reference." "" cxref(1)
.xx "object file." "list: produce" "C source listing from 3B20S" "" list(1)
.xx "value." "abs, iabs, dabs," "cabs, zabs: Fortran absolute" "" abs(3F)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "cu:" "call another UNIX system." "" cu(1C)
.xx "" "data returned by stat system" "call." "stat:" stat(5)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3C)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "sys3b: 3B20S specific system" "calls." "" sys3b(2)
.xx "to an LP line printer." "lp," "cancel: send/cancel requests" "" lp(1)
.xx "" "pnch: file format for" "card images." "" pnch(4)
.xx "" "asa: interpret ASA" "carriage control characters." "" asa(1)
.xx "files." "" "cat: concatenate and print" "" cat(1)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "" "" "cc, pcc: C compiler." "" cc(1)
.xx "function." "cos, dcos," "ccos: Fortran cosine intrinsic" "" cos(3F)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "commentary of an SCCS delta." "" "cdc: change the delta" "" cdc(1)
.xx "ceiling, remainder,/" "floor," "ceil, fmod, fabs: floor," "" floor(3M)
.xx "" "/ceil, fmod, fabs: floor," "ceiling, remainder, absolute/" "" floor(3M)
.xx "intrinsic/" "exp, dexp," "cexp: Fortran exponential" "" exp(3F)
.xx "" "" "cflow: generate C flow graph." "" cflow(1)
.xx "" "delta: make a delta" "(change) to an SCCS file." "" delta(1)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "/dble, cmplx, dcmplx, ichar," "char: explicit Fortran type/" "" ftype(3F)
.xx "stream." "ungetc: push" "character back into input" "" ungetc(3S)
.xx "and neqn." "eqnchar: special" "character definitions for eqn" "" eqnchar(5)
.xx "user." "cuserid: get" "character login name of the" "" cuserid(3S)
.xx "" "/getchar, fgetc, getw: get" "character or word from stream." "" getc(3S)
.xx "" "/putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)
.xx "" "interpret ASA carriage control" "characters." "asa:" asa(1)
.xx "" "_tolower, toascii: translate" "characters." "/_toupper," conv(3C)
.xx "" "iscntrl, isascii: classify" "characters." "/isprint, isgraph," ctype(3C)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "directory." "" "chdir: change working" "" chdir(2)
.xx "constant-width text for/" "cw," "checkcw: prepare" "" cw(1)
.xx "text for nroff or/" "eqn, neqn," "checkeq: format mathematical" "" eqn(1)
.xx "" "lint: a C program" "checker." "" lint(1)
.xx "systems processed by fsck." "" "checklist: list of file" "" checklist(4)
.xx "formatted with the/" "mm, osdd," "checkmm: print/check documents" "" mm(1)
.xx "file." "sum: print" "checksum and block count of a" "" sum(1)
.xx "" "chess: the game of" "chess." "" chess(6)
.xx "" "" "chess: the game of chess." "" chess(6)
.xx "" "chown," "chgrp: change owner or group." "" chown(1)
.xx "" "times: get process and" "child process times." "" times(2)
.xx "terminate." "wait: wait for" "child process to stop or" "" wait(2)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "of a file." "" "chown: change owner and group" "" chown(2)
.xx "group." "" "chown, chgrp: change owner or" "" chown(1)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "" "isgraph, iscntrl, isascii:" "classify characters." "/isprint," ctype(3C)
.xx "status/" "ferror, feof," "clearerr, fileno: stream" "" ferror(3S)
.xx "" "alarm: set a process's alarm" "clock." "" alarm(2)
.xx "" "" "clock: report CPU time used." "" clock(3C)
.xx "logarithm/" "log, alog, dlog," "clog: Fortran natural" "" log(3F)
.xx "" "ldclose, ldaclose:" "close a common object file." "" ldclose(3X)
.xx "" "close:" "close a file descriptor." "" close(2)
.xx "descriptor." "" "close: close a file" "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "/real, float, sngl, dble," "cmplx, dcmplx, ichar, char:/" "" ftype(3F)
.xx "line-feeds." "" "col: filter reverse" "" col(1)
.xx "" "" "comb: combine SCCS deltas." "" comb(1)
.xx "" "comb:" "combine SCCS deltas." "" comb(1)
.xx "common to two sorted files." "" "comm: select or reject lines" "" comm(1)
.xx "" "nice: run a" "command at low priority." "" nice(1)
.xx "" "env: set environment for" "command execution." "" env(1)
.xx "" "uux: unix to unix" "command execution." "" uux(1C)
.xx "" "system: issue a shell" "command from Fortran." "" system(3F)
.xx "quits." "nohup: run a" "command immune to hangups and" "" nohup(1)
.xx "" "net: execute a" "command on the PCL network." "" net(1C)
.xx "" "getopt: parse" "command options." "" getopt(1)
.xx "" "/shell, the standard/restricted" "command programming language." "" sh(1)
.xx "and system/" "timex: time a" "command; report process data" "" timex(1)
.xx "" "system: issue a shell" "command." "" system(3S)
.xx "" "test: condition evaluation" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "argument list(s) and execute" "command." "xargs: construct" xargs(1)
.xx "" "getarg: return Fortran" "command-line argument." "" getarg(3F)
.xx "" "intro: introduction to" "commands and application/" "" intro(1)
.xx "" "access graphical and numerical" "commands." "graphics:" graphics(1G)
.xx "" "network useful with graphical" "commands." "stat: statistical" stat(1G)
.xx "" "cdc: change the delta" "commentary of an SCCS delta." "" cdc(1)
.xx "" "ar:" "common archive file format." "" ar(4)
.xx "" "/archive files from PDP-11 to" "common archive format." "" arcv(1)
.xx "editor output." "a.out:" "common assembler and link" "" a.out(4)
.xx "" "as:" "common assembler." "" as(1)
.xx "" "object and archive files to" "common formats." "/convert" convert(1)
.xx "" "log10, alog10, dlog10: Fortran" "common logarithm intrinsic/" "" log10(3F)
.xx "routines." "ldfcn:" "common object file access" "" ldfcn(4)
.xx "" "ldopen, ldaopen: open a" "common object file for/" "" ldopen(3X)
.xx "" "/line number entries of a" "common object file function." "" ldlread(3X)
.xx "" "ldclose, ldaclose: close a" "common object file." "" ldclose(3X)
.xx "" "read the file header of a" "common object file." "ldfhread:" ldfhread(3X)
.xx "" "entries of a section of a" "common object file." "/number" ldlseek(3X)
.xx "" "the optional file header of a" "common object file." "/seek to" ldohseek(3X)
.xx "" "/entries of a section of a" "common object file." "" ldrseek(3X)
.xx "" "/section header of a" "common object file." "" ldshread(3X)
.xx "" "an indexed\/named section of a" "common object file." "/seek to" ldsseek(3X)
.xx "" "of a symbol table entry of a" "common object file." "/the index" ldtbindex(3X)
.xx "" "symbol table entry of a" "common object file." "/indexed" ldtbread(3X)
.xx "" "seek to the symbol table of a" "common object file." "ldtbseek:" ldtbseek(3X)
.xx "" "line number entries in a" "common object file." "linenum:" linenum(4)
.xx "" "nm: print name list of" "common object file." "" nm(1)
.xx "" "relocation information for a" "common object file." "reloc:" reloc(4)
.xx "" "scnhdr: section header for a" "common object file." "" scnhdr(4)
.xx "" "line number information from a" "common object file." "/and" strip(1)
.xx "table format." "syms:" "common object file symbol" "" syms(4)
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)
.xx "" "ld: link editor for" "common object files." "" ld(1)
.xx "" "size: print section sizes of" "common object files." "" size(1)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "ipcs: report inter-process" "communication facilities/" "" ipcs(1)
.xx "" "stdipc: standard interprocess" "communication package." "" stdipc(3C)
.xx "" "diff: differential file" "comparator." "" diff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "SCCS file." "sccsdiff:" "compare two versions of an" "" sccsdiff(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "dircmp: directory" "comparison." "" dircmp(1)
.xx "expression." "regcmp, regex:" "compile and execute regular" "" regcmp(3X)
.xx "" "regexp: regular expression" "compile and match routines." "" regexp(5)
.xx "" "regcmp: regular expression" "compile." "" regcmp(1)
.xx "" "cc, pcc: C" "compiler." "" cc(1)
.xx "" "f77: Fortran 77" "compiler." "" f77(1)
.xx "programs." "scc: C" "compiler for stand-alone" "" scc(1)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "modest-sized programs." "bs: a" "compiler/interpreter for" "" bs(1)
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)
.xx "" "wait: await" "completion of process." "" wait(1)
.xx "" "Fortran imaginary part of" "complex argument." "/dimag:" aimag(3F)
.xx "" "conjg, dconjg: Fortran" "complex conjugate intrinsic/" "" conjg(3F)
.xx "" "cprs:" "compress an IS25 object file." "" cprs(1)
.xx "" "pack, pcat, unpack:" "compress and expand files." "" pack(1)
.xx "table entry of a/" "ldtbindex:" "compute the index of a symbol" "" ldtbindex(3X)
.xx "" "cat:" "concatenate and print files." "" cat(1)
.xx "synchronous printer." "scat:" "concatenate and print files on" "" scat(1)
.xx "" "test:" "condition evaluation command." "" test(1)
.xx "conjugate intrinsic function." "" "conjg, dconjg: Fortran complex" "" conjg(3F)
.xx "" "conjg, dconjg: Fortran complex" "conjugate intrinsic function." "" conjg(3F)
.xx "" "an out-going terminal line" "connection." "dial: establish" dial(3C)
.xx "" "report and interactive status" "console." "rjestat: RJE status" rjestat(1C)
.xx "" "cw, checkcw: prepare" "constant-width text for troff." "" cw(1)
.xx "execute command." "xargs:" "construct argument list(s) and" "" xargs(1)
.xx "" "nroff/troff, tbl, and eqn" "constructs." "deroff: remove" deroff(1)
.xx "" "ls: list" "contents of directories." "" ls(1)
.xx "" "toc: graphical table of" "contents routines." "" toc(1G)
.xx "" "csplit:" "context split." "" csplit(1)
.xx "" "asa: interpret ASA carriage" "control characters." "" asa(1)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "fcntl: file" "control." "" fcntl(2)
.xx "" "msgctl: message" "control operations." "" msgctl(2)
.xx "" "semctl: semaphore" "control operations." "" semctl(2)
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)
.xx "" "fcntl: file" "control options." "" fcntl(5)
.xx "" "uucp status inquiry and job" "control." "uustat:" uustat(1C)
.xx "" "vc: version" "control." "" vc(1)
.xx "terminals." "term:" "conventional names for" "" term(5)
.xx "" "char: explicit Fortran type" "conversion." "/dcmplx, ichar," ftype(3F)
.xx "" "units:" "conversion program." "" units(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "PDP-11 to common/" "arcv:" "convert archive files from" "" arcv(1)
.xx "floating-point number." "atof:" "convert ASCII string to" "" atof(3C)
.xx "integers and/" "l3tol, ltol3:" "convert between 3-byte" "" l3tol(3C)
.xx "and base-64 ASCII/" "a64l, l64a:" "convert between long integer" "" a64l(3C)
.xx "archive files to common/" "" "convert: convert object and" "" convert(1)
.xx "" "/gmtime, asctime, tzset:" "convert date and time to/" "" ctime(3C)
.xx "to string." "ecvt, fcvt, gcvt:" "convert floating-point number" "" ecvt(3C)
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)
.xx "files to common/" "convert:" "convert object and archive" "" convert(1)
.xx "" "strtol, atol, atoi:" "convert string to integer." "" strtol(3C)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "cpio:" "copy file archives in and out." "" cpio(1)
.xx "" "cp, ln, mv:" "copy, link or move files." "" cp(1)
.xx "" "uulog, uuname: unix to unix" "copy." "uucp," uucp(1C)
.xx "" "public UNIX-to-UNIX file" "copy." "uuto, uupick:" uuto(1C)
.xx "file." "" "core: format of core image" "" core(4)
.xx "" "core: format of" "core image file." "" core(4)
.xx "cosine intrinsic function." "" "cos, dcos, ccos: Fortran" "" cos(3F)
.xx "atan2: trigonometric/" "sin," "cos, tan, asin, acos, atan," "" trig(3M)
.xx "hyperbolic cosine intrinsic/" "" "cosh, dcosh: Fortran" "" cosh(3F)
.xx "functions." "sinh," "cosh, tanh: hyperbolic" "" sinh(3M)
.xx "" "cos, dcos, ccos: Fortran" "cosine intrinsic function." "" cos(3F)
.xx "" "/dcosh: Fortran hyperbolic" "cosine intrinsic function." "" cosh(3F)
.xx "" "sum: print checksum and block" "count of a file." "" sum(1)
.xx "" "wc: word" "count." "" wc(1)
.xx "files." "" "cp, ln, mv: copy, link or move" "" cp(1)
.xx "" "cpio: format of" "cpio archive." "" cpio(4)
.xx "and out." "" "cpio: copy file archives in" "" cpio(1)
.xx "" "" "cpio: format of cpio archive." "" cpio(4)
.xx "preprocessor." "" "cpp: the C language" "" cpp(1)
.xx "file." "" "cprs: compress an IS25 object" "" cprs(1)
.xx "" "clock: report" "CPU time used." "" clock(3C)
.xx "" "craps: the game of" "craps." "" craps(6)
.xx "" "" "craps: the game of craps." "" craps(6)
.xx "rewrite an existing one." "" "creat: create a new file or" "" creat(2)
.xx "file." "tmpnam, tempnam:" "create a name for a temporary" "" tmpnam(3S)
.xx "an existing one." "creat:" "create a new file or rewrite" "" creat(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)
.xx "channel." "pipe:" "create an interprocess" "" pipe(2)
.xx "files." "admin:" "create and administer SCCS" "" admin(1)
.xx "" "umask: set and get file" "creation mask." "" umask(2)
.xx "" "cxref: generate C program" "cross reference." "" cxref(1)
.xx "" "" "crypt: encode/decode." "" crypt(1)
.xx "generate DES encryption." "" "crypt, setkey, encrypt:" "" crypt(3C)
.xx "function." "sin, dsin," "csin: Fortran sine intrinsic" "" sin(3F)
.xx "" "" "csplit: context split." "" csplit(1)
.xx "intrinsic/" "sqrt, dsqrt," "csqrt: Fortran square root" "" sqrt(3F)
.xx "terminal." "" "ct: spawn getty to a remote" "" ct(1C)
.xx "for terminal." "" "ctermid: generate file name" "" ctermid(3S)
.xx "asctime, tzset: convert date/" "" "ctime, localtime, gmtime," "" ctime(3C)
.xx "" "" "cu: call another UNIX system." "" cu(1C)
.xx "" "ttt," "cubic: tic-tac-toe." "" ttt(6)
.xx "activity." "sact: print" "current SCCS file editing" "" sact(1)
.xx "" "uname: print name of" "current UNIX system." "" uname(1)
.xx "" "uname: get name of" "current UNIX system." "" uname(2)
.xx "" "slot in the utmp file of the" "current user." "/find the" ttyslot(3C)
.xx "" "getcwd: get path-name of" "current working directory." "" getcwd(3C)
.xx "" "spline: interpolate smooth" "curve." "" spline(1G)
.xx "name of the user." "" "cuserid: get character login" "" cuserid(3S)
.xx "of each line of a file." "" "cut: cut out selected fields" "" cut(1)
.xx "each line of a file." "cut:" "cut out selected fields of" "" cut(1)
.xx "constant-width text for/" "" "cw, checkcw: prepare" "" cw(1)
.xx "cross reference." "" "cxref: generate C program" "" cxref(1)
.xx "absolute value." "abs, iabs," "dabs, cabs, zabs: Fortran" "" abs(3F)
.xx "intrinsic function." "acos," "dacos: Fortran arccosine" "" acos(3F)
.xx "" "sending daemon, line printer" "daemon." "dpd, lpd: HONEYWELL" dpd(1C)
.xx "" "dpd, lpd: HONEYWELL sending" "daemon, line printer daemon." "" dpd(1C)
.xx "" "/handle special functions of" "DASI 300 and 300s terminals." "" 300(1)
.xx "" "special functions of the" "DASI 450 terminal." "/handle" 450(1)
.xx "intrinsic function." "asin," "dasin: Fortran arcsine" "" asin(3F)
.xx "" "/time a command; report process" "data and system activity." "" timex(1)
.xx "" "/sgetl: access long numeric" "data in a machine independent/" "" sputl(3X)
.xx "" "plock: lock process, text, or" "data in memory." "" plock(2)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "call." "stat:" "data returned by stat system" "" stat(5)
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "join: relational" "database operator." "" join(1)
.xx "intrinsic function." "atan," "datan: Fortran arctangent" "" atan(3F)
.xx "intrinsic function." "atan2," "datan2: Fortran arctangent" "" atan2(3F)
.xx "" "/asctime, tzset: convert" "date and time to string." "" ctime(3C)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "" "date: print and set the date." "" date(1)
.xx "" "/idint, real, float, sngl," "dble, cmplx, dcmplx, ichar,/" "" ftype(3F)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "/float, sngl, dble, cmplx," "dcmplx, ichar, char: explicit/" "" ftype(3F)
.xx "conjugate intrinsic/" "conjg," "dconjg: Fortran complex" "" conjg(3F)
.xx "intrinsic function." "cos," "dcos, ccos: Fortran cosine" "" cos(3F)
.xx "cosine intrinsic/" "cosh," "dcosh: Fortran hyperbolic" "" cosh(3F)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "" "adb: absolute" "debugger." "" adb(1)
.xx "" "sdb: symbolic" "debugger." "" sdb(1)
.xx "" "eqnchar: special character" "definitions for eqn and neqn." "" eqnchar(5)
.xx "names." "basename, dirname:" "deliver portions of path" "" basename(1)
.xx "file." "tail:" "deliver the last part of a" "" tail(1)
.xx "" "delta commentary of an SCCS" "delta." "cdc: change the" cdc(1)
.xx "file." "delta: make a" "delta (change) to an SCCS" "" delta(1)
.xx "delta." "cdc: change the" "delta commentary of an SCCS" "" cdc(1)
.xx "" "rmdel: remove a" "delta from an SCCS file." "" rmdel(1)
.xx "to an SCCS file." "" "delta: make a delta (change)" "" delta(1)
.xx "" "comb: combine SCCS" "deltas." "" comb(1)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "tbl, and eqn constructs." "" "deroff: remove nroff/troff," "" deroff(1)
.xx "" "setkey, encrypt: generate" "DES encryption." "crypt," crypt(3C)
.xx "" "system: format of 3B20S system" "description file." "" system(4)
.xx "" "close: close a file" "descriptor." "" close(2)
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "" "x25hlnk, x25dlnk: halt or" "detach a BX.25 link." "" x25hlnk(3C)
.xx "file." "access:" "determine accessibility of a" "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "master: master" "device information table." "" master.dec(4)
.xx "" "master: master" "device information table." "" master.u3b(4)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "" "/tekset, td: graphical" "device routines and filters." "" gdev(1G)
.xx "exponential intrinsic/" "exp," "dexp, cexp: Fortran" "" exp(3F)
.xx "terminal line connection." "" "dial: establish an out-going" "" dial(3C)
.xx "" "ratfor: rational Fortran" "dialect." "" ratfor(1)
.xx "" "bdiff: big" "diff." "" bdiff(1)
.xx "comparator." "" "diff: differential file" "" diff(1)
.xx "comparison." "" "diff3: 3-way differential file" "" diff3(1)
.xx "" "sdiff: side-by-side" "difference program." "" sdiff(1)
.xx "" "diffmk: mark" "differences between files." "" diffmk(1)
.xx "" "diff:" "differential file comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "between files." "" "diffmk: mark differences" "" diffmk(1)
.xx "of complex argument." "aimag," "dimag: Fortran imaginary part" "" aimag(3F)
.xx "intrinsic function." "aint," "dint: Fortran integer part" "" aint(3F)
.xx "" "" "dir: format of directories." "" dir(4)
.xx "" "" "dircmp: directory comparison." "" dircmp(1)
.xx "" "dir: format of" "directories." "" dir(4)
.xx "" "ls: list contents of" "directories." "" ls(1)
.xx "" "rm, rmdir: remove files or" "directories." "" rm(1)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change working" "directory." "" chdir(2)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "dircmp:" "directory comparison." "" dircmp(1)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "path-name of current working" "directory." "getcwd: get" getcwd(3C)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "ordinary file." "mknod: make a" "directory, or a special or" "" mknod(2)
.xx "path names." "basename," "dirname: deliver portions of" "" basename(1)
.xx "" "" "dis: 3B20S disassembler." "" dis(1)
.xx "printers." "enable," "disable: enable/disable LP" "" enable(1)
.xx "" "acct: enable or" "disable process accounting." "" acct(2)
.xx "" "dis: 3B20S" "disassembler." "" dis(1)
.xx "" "sadp:" "disk access profiler." "" sadp(1)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)
.xx "" "/lcong48: generate uniformly" "distributed pseudo-random/" "" drand48(3C)
.xx "logarithm/" "log, alog," "dlog, clog: Fortran natural" "" log(3F)
.xx "logarithm/" "log10, alog10," "dlog10: Fortran common" "" log10(3F)
.xx "" "max, max0, amax0, max1, amax1," "dmax1: Fortran maximum-value/" "" max(3F)
.xx "" "min, min0, amin0, min1, amin1," "dmin1: Fortran minimum-value/" "" min(3F)
.xx "intrinsic/" "mod, amod," "dmod: Fortran remaindering" "" mod(3F)
.xx "nearest integer/" "anint," "dnint, nint, idnint: Fortran" "" round(3F)
.xx "" "mm, osdd, checkmm: print/check" "documents formatted with the/" "" mm(1)
.xx "" "macro package for formatting" "documents." "mm: the MM" mm(5)
.xx "" "macro package for formatting" "documents." "/the OSDD adapter" mosd(5)
.xx "slides." "mmt, mvt: typeset" "documents, view graphs, and" "" mmt(1)
.xx "daemon, line printer daemon." "" "dpd, lpd: HONEYWELL sending" "" dpd(1C)
.xx "" "" "dpr: off-line print." "" dpr(1C)
.xx "" "reversi: a game of" "dramatic reversals." "" reversi(6)
.xx "nrand48, mrand48, jrand48,/" "" "drand48, erand48, lrand48," "" drand48(3C)
.xx "" "graph:" "draw a graph." "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "transfer-of-sign/" "sign, isign," "dsign: Fortran" "" sign(3F)
.xx "intrinsic function." "sin," "dsin, csin: Fortran sine" "" sin(3F)
.xx "intrinsic function." "sinh," "dsinh: Fortran hyperbolic sine" "" sinh(3F)
.xx "root intrinsic/" "sqrt," "dsqrt, csqrt: Fortran square" "" sqrt(3F)
.xx "intrinsic function." "tan," "dtan: Fortran tangent" "" tan(3F)
.xx "tangent intrinsic/" "tanh," "dtanh: Fortran hyperbolic" "" tanh(3F)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "an object file." "" "dump: dump selected parts of" "" dump(1)
.xx "" "od: octal" "dump." "" od(1)
.xx "object file." "dump:" "dump selected parts of an" "" dump(1)
.xx "descriptor." "" "dup: duplicate an open file" "" dup(2)
.xx "descriptor." "dup:" "duplicate an open file" "" dup(2)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "floating-point number to/" "" "ecvt, fcvt, gcvt: convert" "" ecvt(3C)
.xx "" "" "ed, red: text editor." "" ed(1)
.xx "program." "end, etext," "edata: last locations in" "" end(3C)
.xx "" "sact: print current SCCS file" "editing activity." "" sact(1)
.xx "" "ed, red: text" "editor." "" ed(1)
.xx "files." "ld: link" "editor for common object" "" ld(1)
.xx "" "se: screen" "editor for video terminals." "" se(1)
.xx "" "ged: graphical" "editor." "" ged(1G)
.xx "" "ld: link" "editor." "" ld.pdp(1)
.xx "" "common assembler and link" "editor output." "a.out:" a.out(4)
.xx "" "PDP\&-11 assembler and link" "editor output." "a.out:" a.out.pdp(4)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "" "/user, real group, and" "effective group IDs." "" getuid(2)
.xx "and/" "/getegid: get real user," "effective user, real group," "" getuid(2)
.xx "Language." "" "ef\&l: Extended Fortran" "" efl(1)
.xx "" "fsplit: split f77, ratfor, or" "ef\&l files." "" fsplit(1)
.xx "for a pattern." "grep," "egrep, fgrep: search a file" "" grep(1)
.xx "enable/disable LP printers." "" "enable, disable:" "" enable(1)
.xx "accounting." "acct:" "enable or disable process" "" acct(2)
.xx "" "enable, disable:" "enable/disable LP printers." "" enable(1)
.xx "" "crypt:" "encode/decode." "" crypt(1)
.xx "encryption." "crypt, setkey," "encrypt: generate DES" "" crypt(3C)
.xx "" "setkey, encrypt: generate DES" "encryption." "crypt," crypt(3C)
.xx "" "makekey: generate" "encryption key." "" makekey(1)
.xx "locations in program." "" "end, etext, edata: last" "" end(3C)
.xx "" "/getgrgid, getgrnam, setgrent," "endgrent: get group file/" "" getgrent(3C)
.xx "" "/getpwuid, getpwnam, setpwent," "endpwent: get password file/" "" getpwent(3C)
.xx "utmp/" "/pututline, setutent," "endutent, utmpname: access" "" getut(3C)
.xx "" "nlist: get" "entries from name list." "" nlist(3C)
.xx "file." "linenum: line number" "entries in a common object" "" linenum(4)
.xx "" "man, manprog: print" "entries in this manual." "" man(1)
.xx "" "man: macros for formatting" "entries in this manual." "" man(5)
.xx "file/" "/manipulate line number" "entries of a common object" "" ldlread(3X)
.xx "common/" "/seek to line number" "entries of a section of a" "" ldlseek(3X)
.xx "" "/ldnrseek: seek to relocation" "entries of a section of a/" "" ldrseek(3X)
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)
.xx "" "endgrent: get group file" "entry." "/getgrnam, setgrent," getgrent(3C)
.xx "" "endpwent: get password file" "entry." "/getpwnam, setpwent," getpwent(3C)
.xx "" "utmpname: access utmp file" "entry." "/setutent, endutent," getut(3C)
.xx "" "/the index of a symbol table" "entry of a common object file." "" ldtbindex(3X)
.xx "" "/read an indexed symbol table" "entry of a common object file." "" ldtbread(3X)
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "command execution." "" "env: set environment for" "" env(1)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "profile: setting up an" "environment at login time." "" profile(4)
.xx "" "environ: user" "environment." "" environ(5)
.xx "execution." "env: set" "environment for command" "" env(1)
.xx "" "getenv: return value for" "environment name." "" getenv(3C)
.xx "" "getenv: return Fortran" "environment variable." "" getenv(3F)
.xx "" "sky: obtain" "ephemerides." "" sky(6)
.xx "" "character definitions for" "eqn and neqn." "/special" eqnchar(5)
.xx "" "remove nroff/troff, tbl, and" "eqn constructs." "deroff:" deroff(1)
.xx "mathematical text for nroff/" "" "eqn, neqn, checkeq: format" "" eqn(1)
.xx "definitions for eqn and neqn." "" "eqnchar: special character" "" eqnchar(5)
.xx "mrand48, jrand48,/" "drand48," "erand48, lrand48, nrand48," "" drand48(3C)
.xx "graphical device/" "hpd," "erase, hardcopy, tekset, td:" "" gdev(1G)
.xx "complementary error function." "" "erf, erfc: error function and" "" erf(3M)
.xx "complementary error/" "erf," "erfc: error function and" "" erf(3M)
.xx "format." "" "errfile: error-log file" "" errfile(4)
.xx "system error/" "perror," "errno, sys_errlist, sys_nerr:" "" perror(3C)
.xx "complementary/" "erf, erfc:" "error function and" "" erf(3M)
.xx "" "function and complementary" "error function." "/erfc: error" erf(3M)
.xx "" "sys_errlist, sys_nerr: system" "error messages." "/errno," perror(3C)
.xx "" "to system calls and" "error numbers." "/introduction" intro(2)
.xx "" "matherr:" "error-handling function." "" matherr(3M)
.xx "" "errfile:" "error-log file format." "" errfile(4)
.xx "" "hashcheck: find spelling" "errors." "/hashmake, spellin," spell(1)
.xx "terminal line/" "dial:" "establish an out-going" "" dial(3C)
.xx "in program." "end," "etext, edata: last locations" "" end(3C)
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)
.xx "expression." "expr:" "evaluate arguments as an" "" expr(1)
.xx "" "test: condition" "evaluation command." "" test(1)
.xx "execlp, execvp: execute a/" "" "execl, execv, execle, execve," "" exec(2)
.xx "execvp: execute/" "execl, execv," "execle, execve, execlp," "" exec(2)
.xx "" "execl, execv, execle, execve," "execlp, execvp: execute a/" "" exec(2)
.xx "network." "net:" "execute a command on the PCL" "" net(1C)
.xx "" "execve, execlp, execvp:" "execute a file." "/execle," exec(2)
.xx "" "construct argument list(s) and" "execute command." "xargs:" xargs(1)
.xx "" "regcmp, regex: compile and" "execute regular expression." "" regcmp(3X)
.xx "" "set environment for command" "execution." "env:" env(1)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)
.xx "" "monitor: prepare" "execution profile." "" monitor(3C)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "uux: unix to unix command" "execution." "" uux(1C)
.xx "execvp: execute a/" "execl," "execv, execle, execve, execlp," "" exec(2)
.xx "execute/" "execl, execv, execle," "execve, execlp, execvp:" "" exec(2)
.xx "" "/execv, execle, execve, execlp," "execvp: execute a file." "" exec(2)
.xx "" "a new file or rewrite an" "existing one." "creat: create" creat(2)
.xx "process." "" "exit, _exit: terminate" "" exit(2)
.xx "" "exit," "_exit: terminate process." "" exit(2)
.xx "exponential intrinsic/" "" "exp, dexp, cexp: Fortran" "" exp(3F)
.xx "exponential, logarithm,/" "" "exp, log, log10, pow, sqrt:" "" exp(3M)
.xx "" "pcat, unpack: compress and" "expand files." "pack," pack(1)
.xx "" "cmplx, dcmplx, ichar, char:" "explicit Fortran type/" "/dble," ftype(3F)
.xx "" "exp, dexp, cexp: Fortran" "exponential intrinsic/" "" exp(3F)
.xx "" "exp, log, log10, pow, sqrt:" "exponential, logarithm, power,/" "" exp(3M)
.xx "expression." "" "expr: evaluate arguments as an" "" expr(1)
.xx "routines." "regexp: regular" "expression compile and match" "" regexp(5)
.xx "" "regcmp: regular" "expression compile." "" regcmp(1)
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)
.xx "" "compile and execute regular" "expression." "regcmp, regex:" regcmp(3X)
.xx "" "ef\&l:" "Extended Fortran Language." "" efl(1)
.xx "" "greek: graphics for the" "extended TTY-37 type-box." "" greek(5)
.xx "" "" "f77: Fortran 77 compiler." "" f77(1)
.xx "" "fsplit: split" "f77, ratfor, or ef\&l files." "" fsplit(1)
.xx "remainder,/" "floor, ceil, fmod," "fabs: floor, ceiling," "" floor(3M)
.xx "" "factor:" "factor a number." "" factor(1)
.xx "" "" "factor: factor a number." "" factor(1)
.xx "" "true," "false: provide truth values." "" true(1)
.xx "" "data in a machine independent" "fashion.." "/access long numeric" sputl(3X)
.xx "" "abort: generate an IOT" "fault." "" abort(3C)
.xx "a stream." "" "fclose, fflush: close or flush" "" fclose(3S)
.xx "" "" "fcntl: file control." "" fcntl(2)
.xx "" "" "fcntl: file control options." "" fcntl(5)
.xx "floating-point number/" "ecvt," "fcvt, gcvt: convert" "" ecvt(3C)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "status inquiries." "ferror," "feof, clearerr, fileno: stream" "" ferror(3S)
.xx "fileno: stream status/" "" "ferror, feof, clearerr," "" ferror(3S)
.xx "stream." "fclose," "fflush: close or flush a" "" fclose(3S)
.xx "files from the HONEYWELL/" "" "fget, fget.demon: retrieve" "" fget(1C)
.xx "word from/" "getc, getchar," "fgetc, getw: get character or" "" getc(3S)
.xx "from the HONEYWELL/" "fget," "fget.demon: retrieve files" "" fget(1C)
.xx "stream." "gets," "fgets: get a string from a" "" gets(3S)
.xx "pattern." "grep, egrep," "fgrep: search a file for a" "" grep(1)
.xx "times." "utime: set" "file access and modification" "" utime(2)
.xx "" "ldfcn: common object" "file access routines." "" ldfcn(4)
.xx "" "determine accessibility of a" "file." "access:" access(2)
.xx "" "hpio: HP 2645A terminal tape" "file archiver." "" hpio(1)
.xx "" "tar: tape" "file archiver." "" tar(1)
.xx "" "cpio: copy" "file archives in and out." "" cpio(1)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "change owner and group of a" "file." "chown:" chown(2)
.xx "" "diff: differential" "file comparator." "" diff(1)
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)
.xx "" "fcntl:" "file control." "" fcntl(2)
.xx "" "fcntl:" "file control options." "" fcntl(5)
.xx "" "uupick: public UNIX-to-UNIX" "file copy." "uuto," uuto(1C)
.xx "" "core: format of core image" "file." "" core(4)
.xx "" "cprs: compress an IS25 object" "file." "" cprs(1)
.xx "" "umask: set and get" "file creation mask." "" umask(2)
.xx "" "fields of each line of a" "file." "cut: cut out selected" cut(1)
.xx "" "dd: convert and copy a" "file." "" dd(1)
.xx "" "a delta (change) to an SCCS" "file." "delta: make" delta(1)
.xx "" "close: close a" "file descriptor." "" close(2)
.xx "" "dup: duplicate an open" "file descriptor." "" dup(2)
.xx "" "" "file: determine file type." "" file(1)
.xx "" "selected parts of an object" "file." "dump: dump" dump(1)
.xx "" "sact: print current SCCS" "file editing activity." "" sact(1)
.xx "" "setgrent, endgrent: get group" "file entry." "/getgrnam," getgrent(3C)
.xx "" "endpwent: get password" "file entry." "/setpwent," getpwent(3C)
.xx "" "utmpname: access utmp" "file entry." "/endutent," getut(3C)
.xx "" "putpwent: write password" "file entry." "" putpwent(3C)
.xx "" "execlp, execvp: execute a" "file." "/execv, execle, execve," exec(2)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern." "" grep(1)
.xx "" "ldaopen: open a common object" "file for reading." "ldopen," ldopen(3X)
.xx "" "acct: per-process accounting" "file format." "" acct(4)
.xx "" "ar: common archive" "file format." "" ar(4)
.xx "" "ar: archive" "file format." "" ar.pdp(4)
.xx "" "errfile: error-log" "file format." "" errfile(4)
.xx "" "pnch:" "file format for card images." "" pnch(4)
.xx "" "intro: introduction to" "file formats." "" intro(4)
.xx "" "entries of a common object" "file function." "/line number" ldlread(3X)
.xx "" "get: get a version of an SCCS" "file." "" get(1)
.xx "" "group: group" "file." "" group(4)
.xx "files." "filehdr:" "file header for common object" "" filehdr(4)
.xx "file." "ldfhread: read the" "file header of a common object" "" ldfhread(3X)
.xx "" "ldohseek: seek to the optional" "file header of a common object/" "" ldohseek(3X)
.xx "" "split: split a" "file into pieces." "" split(1)
.xx "" "issue: issue identification" "file." "" issue(4)
.xx "" "of a member of an archive" "file." "/read the archive header" ldahread(3X)
.xx "" "close a common object" "file." "ldclose, ldaclose:" ldclose(3X)
.xx "" "file header of a common object" "file." "ldfhread: read the" ldfhread(3X)
.xx "" "a section of a common object" "file." "/line number entries of" ldlseek(3X)
.xx "" "file header of a common object" "file." "/seek to the optional" ldohseek(3X)
.xx "" "a section of a common object" "file." "/relocation entries of" ldrseek(3X)
.xx "" "header of a common object" "file." "/indexed\/named section" ldshread(3X)
.xx "" "section of a common object" "file." "/to an indexed\/named" ldsseek(3X)
.xx "" "table entry of a common object" "file." "/the index of a symbol" ldtbindex(3X)
.xx "" "table entry of a common object" "file." "/read an indexed symbol" ldtbread(3X)
.xx "" "table of a common object" "file." "/seek to the symbol" ldtbseek(3X)
.xx "" "entries in a common object" "file." "linenum: line number" linenum(4)
.xx "" "link: link to a" "file." "" link(2)
.xx "" "listing from 3B20S object" "file." "list: produce C source" list(1)
.xx "" "or a special or ordinary" "file." "/make a directory," mknod(2)
.xx "" "ctermid: generate" "file name for terminal." "" ctermid(3S)
.xx "" "mktemp: make a unique" "file name." "" mktemp(3C)
.xx "" "change the format of a text" "file." "newform:" newform(1)
.xx "" "name list of common object" "file." "nm: print" nm(1)
.xx "" "/find the slot in the utmp" "file of the current user." "" ttyslot(3C)
.xx "one." "creat: create a new" "file or rewrite an existing" "" creat(2)
.xx "" "passwd: password" "file." "" passwd(4)
.xx "" "or subsequent lines of one" "file." "/lines of several files" paste(1)
.xx "" "/rewind, ftell: reposition a" "file pointer in a stream." "" fseek(3S)
.xx "" "lseek: move read/write" "file pointer." "" lseek(2)
.xx "" "prs: print an SCCS" "file." "" prs(1)
.xx "" "read: read from" "file." "" read(2)
.xx "" "for a common object" "file." "/relocation information" reloc(4)
.xx "" "remove a delta from an SCCS" "file." "rmdel:" rmdel(1)
.xx "" "bfs: big" "file scanner." "" bfs(1)
.xx "" "two versions of an SCCS" "file." "sccsdiff: compare" sccsdiff(1)
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)
.xx "" "header for a common object" "file." "scnhdr: section" scnhdr(4)
.xx "" "stat, fstat: get" "file status." "" stat(2)
.xx "" "from a common object" "file." "/line number information" strip(1)
.xx "" "checksum and block count of a" "file." "sum: print" sum(1)
.xx "" "syms: common object" "file symbol table format." "" syms(4)
.xx "volume." "" "file system: format of system" "" fs(4)
.xx "" "mount: mount a" "file system." "" mount(2)
.xx "" "ustat: get" "file system statistics." "" ustat(2)
.xx "" "mnttab: mounted" "file system table." "" mnttab(4)
.xx "" "umount: unmount a" "file system." "" umount(2)
.xx "" "of 3B20S system description" "file." "system: format" system(4)
.xx "fsck." "checklist: list of" "file systems processed by" "" checklist(4)
.xx "" "deliver the last part of a" "file." "tail:" tail(1)
.xx "" "tmpfile: create a temporary" "file." "" tmpfile(3S)
.xx "" "create a name for a temporary" "file." "tmpnam, tempnam:" tmpnam(3S)
.xx "" "and modification times of a" "file." "touch: update access" touch(1)
.xx "" "ftw: walk a" "file tree." "" ftw(3C)
.xx "" "file: determine" "file type." "" file(1)
.xx "" "undo a previous get of an SCCS" "file." "unget:" unget(1)
.xx "" "report repeated lines in a" "file." "uniq:" uniq(1)
.xx "" "val: validate SCCS" "file." "" val(1)
.xx "" "write: write on a" "file." "" write(2)
.xx "" "umask: set" "file-creation mode mask." "" umask(1)
.xx "common object files." "" "filehdr: file header for" "" filehdr(4)
.xx "" "ferror, feof, clearerr," "fileno: stream status/" "" ferror(3S)
.xx "" "and print process accounting" "file(s)." "acctcom: search" acctcom(1)
.xx "" "create and administer SCCS" "files." "admin:" admin(1)
.xx "" "send, gath: gather" "files and/or submit RJE jobs." "" send(1C)
.xx "" "cat: concatenate and print" "files." "" cat(1)
.xx "" "cmp: compare two" "files." "" cmp(1)
.xx "" "lines common to two sorted" "files." "comm: select or reject" comm(1)
.xx "" "cp, ln, mv: copy, link or move" "files." "" cp(1)
.xx "" "mark differences between" "files." "diffmk:" diffmk(1)
.xx "" "file header for common object" "files." "filehdr:" filehdr(4)
.xx "" "find: find" "files." "" find(1)
.xx "archive/" "arcv: convert archive" "files from PDP-11 to common" "" arcv(1)
.xx "" "fget, fget.demon: retrieve" "files from the HONEYWELL 6000." "" fget(1C)
.xx "" "format specification in text" "files." "fspec:" fspec(4)
.xx "" "split f77, ratfor, or ef\&l" "files." "fsplit:" fsplit(1)
.xx "" "string, format of graphical" "files." "/graphical primitive" gps(4)
.xx "" "link editor for common object" "files." "ld:" ld(1)
.xx "" "scat: concatenate and print" "files on synchronous printer." "" scat(1)
.xx "" "rm, rmdir: remove" "files or directories." "" rm(1)
.xx "" "/merge same lines of several" "files or subsequent lines of/" "" paste(1)
.xx "" "unpack: compress and expand" "files." "pack, pcat," pack(1)
.xx "" "pr: print" "files." "" pr(1)
.xx "" "section sizes of common object" "files." "size: print" size(1)
.xx "" "size: print sizes of object" "files." "" size.pdp(1)
.xx "" "sort: sort and/or merge" "files." "" sort(1)
.xx "NSC network." "nusend: send" "files to another UNIX on the" "" nusend(1C)
.xx "" "/convert object and archive" "files to common formats." "" convert(1)
.xx "" "fsend: send" "files to the HONEYWELL 6000." "" fsend(1C)
.xx "" "what: identify SCCS" "files." "" what(1)
.xx "" "greek: select terminal" "filter." "" greek(1)
.xx "" "nl: line numbering" "filter." "" nl(1)
.xx "" "col:" "filter reverse line-feeds." "" col(1)
.xx "" "graphical device routines and" "filters." "/tekset, td:" gdev(1G)
.xx "" "tplot: graphics" "filters." "" tplot(1G)
.xx "" "find:" "find files." "" find(1)
.xx "" "" "find: find files." "" find(1)
.xx "" "hyphen:" "find hyphenated words." "" hyphen(1)
.xx "" "ttyname, isatty:" "find name of a terminal." "" ttyname(3C)
.xx "object library." "lorder:" "find ordering relation for an" "" lorder(1)
.xx "" "hashmake, spellin, hashcheck:" "find spelling errors." "spell," spell(1)
.xx "of the current user." "ttyslot:" "find the slot in the utmp file" "" ttyslot(3C)
.xx "" "tee: pipe" "fitting." "" tee(1)
.xx "" "int, ifix, idint, real," "float, sngl, dble, cmplx,/" "" ftype(3F)
.xx "" "atof: convert ASCII string to" "floating-point number." "" atof(3C)
.xx "" "ecvt, fcvt, gcvt: convert" "floating-point number to/" "" ecvt(3C)
.xx "" "/modf: manipulate parts of" "floating-point numbers." "" frexp(3C)
.xx "floor, ceiling, remainder,/" "" "floor, ceil, fmod, fabs:" "" floor(3M)
.xx "" "floor, ceil, fmod, fabs:" "floor, ceiling, remainder,/" "" floor(3M)
.xx "" "cflow: generate C" "flow graph." "" cflow(1)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "remainder,/" "floor, ceil," "fmod, fabs: floor, ceiling," "" floor(3M)
.xx "stream." "" "fopen, freopen, fdopen: open a" "" fopen(3S)
.xx "" "" "fork: create a new process." "" fork(2)
.xx "" "per-process accounting file" "format." "acct:" acct(4)
.xx "" "ar: common archive file" "format." "" ar(4)
.xx "" "from PDP-11 to common archive" "format." "/convert archive files" arcv(1)
.xx "" "ar: archive file" "format." "" ar.pdp(4)
.xx "" "errfile: error-log file" "format." "" errfile(4)
.xx "" "pnch: file" "format for card images." "" pnch(4)
.xx "nroff or/" "eqn, neqn, checkeq:" "format mathematical text for" "" eqn(1)
.xx "description file." "system:" "format of 3B20S system" "" system(4)
.xx "" "newform: change the" "format of a text file." "" newform(1)
.xx "" "inode:" "format of an inode." "" inode(4)
.xx "" "core:" "format of core image file." "" core(4)
.xx "" "cpio:" "format of cpio archive." "" cpio(4)
.xx "" "dir:" "format of directories." "" dir(4)
.xx "" "/graphical primitive string," "format of graphical files." "" gps(4)
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)
.xx "" "file system:" "format of system volume." "" fs(4)
.xx "files." "fspec:" "format specification in text" "" fspec(4)
.xx "" "object file symbol table" "format." "syms: common" syms(4)
.xx "troff." "tbl:" "format tables for nroff or" "" tbl(1)
.xx "" "nroff:" "format text." "" nroff(1)
.xx "" "and archive files to common" "formats." "/convert object" convert(1)
.xx "" "intro: introduction to file" "formats." "" intro(4)
.xx "" "wtmp: utmp and wtmp entry" "formats." "utmp," utmp(4)
.xx "" "scanf, fscanf, sscanf: convert" "formatted input." "" scanf(3S)
.xx "" "fprintf, sprintf: print" "formatted output." "printf," printf(3S)
.xx "" "/checkmm: print/check documents" "formatted with the MM macros." "" mm(1)
.xx "" "mptx: the macro package for" "formatting a permuted index." "" mptx(5)
.xx "" "mm: the MM macro package for" "formatting documents." "" mm(5)
.xx "" "OSDD adapter macro package for" "formatting documents." "/the" mosd(5)
.xx "manual." "man: macros for" "formatting entries in this" "" man(5)
.xx "" "f77:" "Fortran 77 compiler." "" f77(1)
.xx "" "abs, iabs, dabs, cabs, zabs:" "Fortran absolute value." "" abs(3F)
.xx "system/" "signal: specify" "Fortran action on receipt of a" "" signal(3F)
.xx "function." "acos, dacos:" "Fortran arccosine intrinsic" "" acos(3F)
.xx "function." "asin, dasin:" "Fortran arcsine intrinsic" "" asin(3F)
.xx "function." "atan2, datan2:" "Fortran arctangent intrinsic" "" atan2(3F)
.xx "function." "atan, datan:" "Fortran arctangent intrinsic" "" atan(3F)
.xx "" "or, xor, not, lshift, rshift:" "Fortran bitwise boolean/" "and," bool(3F)
.xx "" "getarg: return" "Fortran command-line argument." "" getarg(3F)
.xx "" "log10, alog10, dlog10:" "Fortran common logarithm/" "" log10(3F)
.xx "intrinsic/" "conjg, dconjg:" "Fortran complex conjugate" "" conjg(3F)
.xx "function." "cos, dcos, ccos:" "Fortran cosine intrinsic" "" cos(3F)
.xx "" "ratfor: rational" "Fortran dialect." "" ratfor(1)
.xx "" "getenv: return" "Fortran environment variable." "" getenv(3F)
.xx "function." "exp, dexp, cexp:" "Fortran exponential intrinsic" "" exp(3F)
.xx "intrinsic/" "cosh, dcosh:" "Fortran hyperbolic cosine" "" cosh(3F)
.xx "intrinsic/" "sinh, dsinh:" "Fortran hyperbolic sine" "" sinh(3F)
.xx "intrinsic/" "tanh, dtanh:" "Fortran hyperbolic tangent" "" tanh(3F)
.xx "complex/" "aimag, dimag:" "Fortran imaginary part of" "" aimag(3F)
.xx "function." "aint, dint:" "Fortran integer part intrinsic" "" aint(3F)
.xx "" "ef\&l: Extended" "Fortran Language." "" efl(1)
.xx "" "amax0, max1, amax1, dmax1:" "Fortran maximum-value/" "/max0," max(3F)
.xx "" "amin0, min1, amin1, dmin1:" "Fortran minimum-value/" "/min0," min(3F)
.xx "" "log, alog, dlog, clog:" "Fortran natural logarithm/" "" log(3F)
.xx "" "anint, dnint, nint, idnint:" "Fortran nearest integer/" "" round(3F)
.xx "" "abort: terminate" "Fortran program." "" abort(3F)
.xx "functions." "mod, amod, dmod:" "Fortran remaindering intrinsic" "" mod(3F)
.xx "function." "sin, dsin, csin:" "Fortran sine intrinsic" "" sin(3F)
.xx "function." "sqrt, dsqrt, csqrt:" "Fortran square root intrinsic" "" sqrt(3F)
.xx "" "len: return length of" "Fortran string." "" len(3F)
.xx "" "index: return location of" "Fortran substring." "" index(3F)
.xx "" "issue a shell command from" "Fortran." "system:" system(3F)
.xx "function." "tan, dtan:" "Fortran tangent intrinsic" "" tan(3F)
.xx "" "mclock: return" "Fortran time accounting." "" mclock(3F)
.xx "intrinsic/" "sign, isign, dsign:" "Fortran transfer-of-sign" "" sign(3F)
.xx "" "/dcmplx, ichar, char: explicit" "Fortran type conversion." "" ftype(3F)
.xx "generator." "srand, rand:" "Fortran uniform random-number" "" rand(3F)
.xx "formatted output." "printf," "fprintf, sprintf: print" "" printf(3S)
.xx "word on a/" "putc, putchar," "fputc, putw: put character or" "" putc(3S)
.xx "stream." "puts," "fputs: put a string on a" "" puts(3S)
.xx "input/output." "" "fread, fwrite: binary" "" fread(3S)
.xx "memory allocator." "malloc," "free, realloc, calloc: main" "" malloc(3C)
.xx "stream." "fopen," "freopen, fdopen: open a" "" fopen(3S)
.xx "parts of floating-point/" "" "frexp, ldexp, modf: manipulate" "" frexp(3C)
.xx "" "list: produce C source listing" "from 3B20S object file." "" list(1)
.xx "" "/and line number information" "from a common object file." "" strip(1)
.xx "" "gets, fgets: get a string" "from a stream." "" gets(3S)
.xx "" "rmdel: remove a delta" "from an SCCS file." "" rmdel(1)
.xx "" "getopt: get option letter" "from argument vector." "" getopt(3C)
.xx "" "read: read" "from file." "" read(2)
.xx "" "system: issue a shell command" "from Fortran." "" system(3F)
.xx "" "nlist: get entries" "from name list." "" nlist(3C)
.xx "" "arcv: convert archive files" "from PDP-11 to common archive/" "" arcv(1)
.xx "" "getw: get character or word" "from stream." "/getchar, fgetc," getc(3S)
.xx "" "/fget.demon: retrieve files" "from the HONEYWELL 6000." "" fget(1C)
.xx "" "nsctorje: re-route jobs" "from the NSC network to RJE." "" nsctorje(1C)
.xx "" "getpw: get name" "from UID." "" getpw(3C)
.xx "formatted input." "scanf," "fscanf, sscanf: convert" "" scanf(3S)
.xx "" "of file systems processed by" "fsck." "checklist: list" checklist(4)
.xx "reposition a file pointer in/" "" "fseek, rewind, ftell:" "" fseek(3S)
.xx "HONEYWELL 6000." "" "fsend: send files to the" "" fsend(1C)
.xx "text files." "" "fspec: format specification in" "" fspec(4)
.xx "ef\&l files." "" "fsplit: split f77, ratfor, or" "" fsplit(1)
.xx "" "stat," "fstat: get file status." "" stat(2)
.xx "pointer in a/" "fseek, rewind," "ftell: reposition a file" "" fseek(3S)
.xx "" "" "ftw: walk a file tree." "" ftw(3C)
.xx "" "Fortran arccosine intrinsic" "function." "acos, dacos:" acos(3F)
.xx "" "Fortran integer part intrinsic" "function." "aint, dint:" aint(3F)
.xx "error/" "erf, erfc: error" "function and complementary" "" erf(3M)
.xx "" "Fortran arcsine intrinsic" "function." "asin, dasin:" asin(3F)
.xx "" "Fortran arctangent intrinsic" "function." "atan2, datan2:" atan2(3F)
.xx "" "Fortran arctangent intrinsic" "function." "atan, datan:" atan(3F)
.xx "" "complex conjugate intrinsic" "function." "/dconjg: Fortran" conjg(3F)
.xx "" "ccos: Fortran cosine intrinsic" "function." "cos, dcos," cos(3F)
.xx "" "hyperbolic cosine intrinsic" "function." "/dcosh: Fortran" cosh(3F)
.xx "" "and complementary error" "function." "/error function" erf(3M)
.xx "" "Fortran exponential intrinsic" "function." "exp, dexp, cexp:" exp(3F)
.xx "" "gamma: log gamma" "function." "" gamma(3M)
.xx "" "hypot: Euclidean distance" "function." "" hypot(3M)
.xx "" "of a common object file" "function." "/line number entries" ldlread(3X)
.xx "" "common logarithm intrinsic" "function." "/dlog10: Fortran" log10(3F)
.xx "" "natural logarithm intrinsic" "function." "/dlog, clog: Fortran" log(3F)
.xx "" "matherr: error-handling" "function." "" matherr(3M)
.xx "" "transfer-of-sign intrinsic" "function." "/dsign: Fortran" sign(3F)
.xx "" "csin: Fortran sine intrinsic" "function." "sin, dsin," sin(3F)
.xx "" "hyperbolic sine intrinsic" "function." "/dsinh: Fortran" sinh(3F)
.xx "" "Fortran square root intrinsic" "function." "sqrt, dsqrt, csqrt:" sqrt(3F)
.xx "" "Fortran tangent intrinsic" "function." "tan, dtan:" tan(3F)
.xx "" "hyperbolic tangent intrinsic" "function." "/dtanh: Fortran" tanh(3F)
.xx "" "j0, j1, jn, y0, y1, yn: Bessel" "functions." "" bessel(3M)
.xx "" "Fortran bitwise boolean" "functions." "/lshift, rshift:" bool(3F)
.xx "" "logarithm, power, square root" "functions." "/sqrt: exponential," exp(3M)
.xx "" "remainder, absolute value" "functions." "/floor, ceiling," floor(3M)
.xx "" "dmax1: Fortran maximum-value" "functions." "/max1, amax1," max(3F)
.xx "" "dmin1: Fortran minimum-value" "functions." "/min1, amin1," min(3F)
.xx "" "Fortran remaindering intrinsic" "functions." "mod, amod, dmod:" mod(3F)
.xx "" "300, 300s: handle special" "functions of DASI 300 and 300s/" "" 300(1)
.xx "" "hp: handle special" "functions of HP 2640 and/" "" hp(1)
.xx "terminal." "450: handle special" "functions of the DASI 450" "" 450(1)
.xx "" "Fortran nearest integer" "functions." "/nint, idnint:" round(3F)
.xx "" "sinh, cosh, tanh: hyperbolic" "functions." "" sinh(3M)
.xx "" "atan, atan2: trigonometric" "functions." "/tan, asin, acos," trig(3M)
.xx "" "fread," "fwrite: binary input/output." "" fread(3S)
.xx "" "jotto: secret word" "game." "" jotto(6)
.xx "" "moo: guessing" "game." "" moo(6)
.xx "" "back: the" "game of backgammon." "" back(6)
.xx "" "bj: the" "game of black jack." "" bj(6)
.xx "" "chess: the" "game of chess." "" chess(6)
.xx "" "craps: the" "game of craps." "" craps(6)
.xx "" "reversi: a" "game of dramatic reversals." "" reversi(6)
.xx "" "wump: the" "game of hunt-the-wumpus." "" wump(6)
.xx "" "intro: introduction to" "games." "" intro(6)
.xx "" "gamma: log" "gamma function." "" gamma(3M)
.xx "" "" "gamma: log gamma function." "" gamma(3M)
.xx "submit RJE jobs." "send," "gath: gather files and/or" "" send(1C)
.xx "jobs." "send, gath:" "gather files and/or submit RJE" "" send(1C)
.xx "output to the HONEYWELL 6000." "" "gcat: send phototypesetter" "" gcat(1C)
.xx "user." "" "gcosmail: send mail to HIS" "" gcosmail(1C)
.xx "number to string." "ecvt, fcvt," "gcvt: convert floating-point" "" ecvt(3C)
.xx "" "" "ged: graphical editor." "" ged(1G)
.xx "" "maze:" "generate a maze." "" maze(6)
.xx "" "abort:" "generate an IOT fault." "" abort(3C)
.xx "" "cflow:" "generate C flow graph." "" cflow(1)
.xx "reference." "cxref:" "generate C program cross" "" cxref(1)
.xx "" "crypt, setkey, encrypt:" "generate DES encryption." "" crypt(3C)
.xx "" "makekey:" "generate encryption key." "" makekey(1)
.xx "terminal." "ctermid:" "generate file name for" "" ctermid(3S)
.xx "lexical tasks." "lex:" "generate programs for simple" "" lex(1)
.xx "" "/srand48, seed48, lcong48:" "generate uniformly distributed/" "" drand48(3C)
.xx "" "srand: simple random-number" "generator." "rand," rand(3C)
.xx "" "Fortran uniform random-number" "generator." "srand, rand:" rand(3F)
.xx "" "gets, fgets:" "get a string from a stream." "" gets(3S)
.xx "" "get:" "get a version of an SCCS file." "" get(1)
.xx "" "ulimit:" "get and set user limits." "" ulimit(2)
.xx "the user." "cuserid:" "get character login name of" "" cuserid(3S)
.xx "" "getc, getchar, fgetc, getw:" "get character or word from/" "" getc(3S)
.xx "" "nlist:" "get entries from name list." "" nlist(3C)
.xx "" "umask: set and" "get file creation mask." "" umask(2)
.xx "" "stat, fstat:" "get file status." "" stat(2)
.xx "" "ustat:" "get file system statistics." "" ustat(2)
.xx "file." "" "get: get a version of an SCCS" "" get(1)
.xx "" "/getgrnam, setgrent, endgrent:" "get group file entry." "" getgrent(3C)
.xx "" "getlogin:" "get login name." "" getlogin(3C)
.xx "" "logname:" "get login name." "" logname(1)
.xx "" "msgget:" "get message queue." "" msgget(2)
.xx "" "getpw:" "get name from UID." "" getpw(3C)
.xx "system." "uname:" "get name of current UNIX" "" uname(2)
.xx "" "unget: undo a previous" "get of an SCCS file." "" unget(1)
.xx "argument vector." "getopt:" "get option letter from" "" getopt(3C)
.xx "" "/getpwnam, setpwent, endpwent:" "get password file entry." "" getpwent(3C)
.xx "working directory." "getcwd:" "get path-name of current" "" getcwd(3C)
.xx "times." "times:" "get process and child process" "" times(2)
.xx "and/" "getpid, getpgrp, getppid:" "get process, process group," "" getpid(2)
.xx "" "/geteuid, getgid, getegid:" "get real user, effective user,/" "" getuid(2)
.xx "" "semget:" "get set of semaphores." "" semget(2)
.xx "" "shmget:" "get shared memory segment." "" shmget(2)
.xx "" "tty:" "get the terminal's name." "" tty(1)
.xx "" "time:" "get time." "" time(2)
.xx "command-line argument." "" "getarg: return Fortran" "" getarg(3F)
.xx "get character or word from/" "" "getc, getchar, fgetc, getw:" "" getc(3S)
.xx "character or word from/" "getc," "getchar, fgetc, getw: get" "" getc(3S)
.xx "current working directory." "" "getcwd: get path-name of" "" getcwd(3C)
.xx "" "getuid, geteuid, getgid," "getegid: get real user,/" "" getuid(2)
.xx "environment variable." "" "getenv: return Fortran" "" getenv(3F)
.xx "environment name." "" "getenv: return value for" "" getenv(3C)
.xx "real user, effective/" "getuid," "geteuid, getgid, getegid: get" "" getuid(2)
.xx "user,/" "getuid, geteuid," "getgid, getegid: get real" "" getuid(2)
.xx "setgrent, endgrent: get group/" "" "getgrent, getgrgid, getgrnam," "" getgrent(3C)
.xx "endgrent: get group/" "getgrent," "getgrgid, getgrnam, setgrent," "" getgrent(3C)
.xx "get group/" "getgrent, getgrgid," "getgrnam, setgrent, endgrent:" "" getgrent(3C)
.xx "" "" "getlogin: get login name." "" getlogin(3C)
.xx "argument vector." "" "getopt: get option letter from" "" getopt(3C)
.xx "" "" "getopt: parse command options." "" getopt(1)
.xx "" "" "getpass: read a password." "" getpass(3C)
.xx "process group, and/" "getpid," "getpgrp, getppid: get process," "" getpid(2)
.xx "process, process group, and/" "" "getpid, getpgrp, getppid: get" "" getpid(2)
.xx "group, and/" "getpid, getpgrp," "getppid: get process, process" "" getpid(2)
.xx "" "" "getpw: get name from UID." "" getpw(3C)
.xx "setpwent, endpwent: get/" "" "getpwent, getpwuid, getpwnam," "" getpwent(3C)
.xx "get/" "getpwent, getpwuid," "getpwnam, setpwent, endpwent:" "" getpwent(3C)
.xx "endpwent: get/" "getpwent," "getpwuid, getpwnam, setpwent," "" getpwent(3C)
.xx "a stream." "" "gets, fgets: get a string from" "" gets(3S)
.xx "" "and terminal settings used by" "getty." "gettydefs: speed" gettydefs(4)
.xx "" "ct: spawn" "getty to a remote terminal." "" ct(1C)
.xx "settings used by getty." "" "gettydefs: speed and terminal" "" gettydefs(4)
.xx "getegid: get real user,/" "" "getuid, geteuid, getgid," "" getuid(2)
.xx "pututline, setutent,/" "" "getutent, getutid, getutline," "" getut(3C)
.xx "setutent, endutent,/" "getutent," "getutid, getutline, pututline," "" getut(3C)
.xx "setutent,/" "getutent, getutid," "getutline, pututline," "" getut(3C)
.xx "from/" "getc, getchar, fgetc," "getw: get character or word" "" getc(3S)
.xx "convert/" "ctime, localtime," "gmtime, asctime, tzset:" "" ctime(3C)
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3C)
.xx "string, format of graphical/" "" "gps: graphical primitive" "" gps(4)
.xx "" "cflow: generate C flow" "graph." "" cflow(1)
.xx "" "" "graph: draw a graph." "" graph(1G)
.xx "" "graph: draw a" "graph." "" graph(1G)
.xx "" "sag: system activity" "graph." "" sag(1G)
.xx "commands." "graphics: access" "graphical and numerical" "" graphics(1G)
.xx "" "/network useful with" "graphical commands." "" stat(1G)
.xx "" "/erase, hardcopy, tekset, td:" "graphical device routines and/" "" gdev(1G)
.xx "" "ged:" "graphical editor." "" ged(1G)
.xx "" "primitive string, format of" "graphical files." "/graphical" gps(4)
.xx "format of graphical/" "gps:" "graphical primitive string," "" gps(4)
.xx "routines." "toc:" "graphical table of contents" "" toc(1G)
.xx "" "gutil:" "graphical utilities." "" gutil(1G)
.xx "numerical commands." "" "graphics: access graphical and" "" graphics(1G)
.xx "" "tplot:" "graphics filters." "" tplot(1G)
.xx "TTY-37 type-box." "greek:" "graphics for the extended" "" greek(5)
.xx "" "plot:" "graphics interface." "" plot(4)
.xx "subroutines." "plot:" "graphics interface" "" plot(3X)
.xx "" "mvt: typeset documents, view" "graphs, and slides." "mmt," mmt(1)
.xx "" "package for typesetting view" "graphs and slides." "/macro" mv(5)
.xx "extended TTY-37 type-box." "" "greek: graphics for the" "" greek(5)
.xx "" "" "greek: select terminal filter." "" greek(1)
.xx "file for a pattern." "" "grep, egrep, fgrep: search a" "" grep(1)
.xx "" "/user, effective user, real" "group, and effective group/" "" getuid(2)
.xx "" "/getppid: get process, process" "group, and parent process IDs." "" getpid(2)
.xx "" "chown, chgrp: change owner or" "group." "" chown(1)
.xx "" "setgrent, endgrent: get" "group file entry." "/getgrnam," getgrent(3C)
.xx "" "group:" "group file." "" group(4)
.xx "" "" "group: group file." "" group(4)
.xx "" "setpgrp: set process" "group ID." "" setpgrp(2)
.xx "" "id: print user and" "group IDs and names." "" id(1)
.xx "" "real group, and effective" "group IDs." "/effective user," getuid(2)
.xx "" "setuid, setgid: set user and" "group IDs." "" setuid(2)
.xx "" "newgrp: log in to a new" "group." "" newgrp(1)
.xx "" "chown: change owner and" "group of a file." "" chown(2)
.xx "" "a signal to a process or a" "group of processes." "/send" kill(2)
.xx "" "update, and regenerate" "groups of programs." "/maintain," make(1)
.xx "" "ssignal," "gsignal: software signals." "" ssignal(3C)
.xx "" "hangman:" "guess the word." "" hangman(6)
.xx "" "moo:" "guessing game." "" moo(6)
.xx "" "" "gutil: graphical utilities." "" gutil(1G)
.xx "" "x25hlnk, x25dlnk:" "halt or detach a BX.25 link." "" x25hlnk(3C)
.xx "DASI 300 and 300s/" "300, 300s:" "handle special functions of" "" 300(1)
.xx "2640 and 2621-series/" "hp:" "handle special functions of HP" "" hp(1)
.xx "the DASI 450 terminal." "450:" "handle special functions of" "" 450(1)
.xx "" "" "hangman: guess the word." "" hangman(6)
.xx "" "nohup: run a command immune to" "hangups and quits." "" nohup(1)
.xx "graphical device/" "hpd, erase," "hardcopy, tekset, td:" "" gdev(1G)
.xx "" "hcreate, hdestroy: manage" "hash search tables." "hsearch," hsearch(3C)
.xx "" "spell, hashmake, spellin," "hashcheck: find spelling/" "" spell(1)
.xx "find spelling errors." "spell," "hashmake, spellin, hashcheck:" "" spell(1)
.xx "search tables." "hsearch," "hcreate, hdestroy: manage hash" "" hsearch(3C)
.xx "tables." "hsearch, hcreate," "hdestroy: manage hash search" "" hsearch(3C)
.xx "file." "scnhdr: section" "header for a common object" "" scnhdr(4)
.xx "files." "filehdr: file" "header for common object" "" filehdr(4)
.xx "file." "ldfhread: read the file" "header of a common object" "" ldfhread(3X)
.xx "" "/seek to the optional file" "header of a common object/" "" ldohseek(3X)
.xx "" "/read an indexed\/named section" "header of a common object/" "" ldshread(3X)
.xx "" "ldahread: read the archive" "header of a member of an/" "" ldahread(3X)
.xx "" "" "help: ask for help." "" help(1)
.xx "" "help: ask for" "help." "" help(1)
.xx "" "retrieve files from the" "HONEYWELL 6000." "/fget.demon:" fget(1C)
.xx "" "fsend: send files to the" "HONEYWELL 6000." "" fsend(1C)
.xx "" "phototypesetter output to the" "HONEYWELL 6000." "gcat: send" gcat(1C)
.xx "printer daemon." "dpd, lpd:" "HONEYWELL sending daemon, line" "" dpd(1C)
.xx "" "handle special functions of" "HP 2640 and 2621-series/" "hp:" hp(1)
.xx "archiver." "hpio:" "HP 2645A terminal tape file" "" hpio(1)
.xx "of HP 2640 and 2621-series/" "" "hp: handle special functions" "" hp(1)
.xx "td: graphical device routines/" "" "hpd, erase, hardcopy, tekset," "" gdev(1G)
.xx "file archiver." "" "hpio: HP 2645A terminal tape" "" hpio(1)
.xx "manage hash search tables." "" "hsearch, hcreate, hdestroy:" "" hsearch(3C)
.xx "" "wump: the game of" "hunt-the-wumpus." "" wump(6)
.xx "" "cosh, dcosh: Fortran" "hyperbolic cosine intrinsic/" "" cosh(3F)
.xx "" "sinh, cosh, tanh:" "hyperbolic functions." "" sinh(3M)
.xx "" "sinh, dsinh: Fortran" "hyperbolic sine intrinsic/" "" sinh(3F)
.xx "" "tanh, dtanh: Fortran" "hyperbolic tangent intrinsic/" "" tanh(3F)
.xx "" "" "hyphen: find hyphenated words." "" hyphen(1)
.xx "" "hyphen: find" "hyphenated words." "" hyphen(1)
.xx "function." "" "hypot: Euclidean distance" "" hypot(3M)
.xx "Fortran absolute value." "abs," "iabs, dabs, cabs, zabs:" "" abs(3F)
.xx "" "/sngl, dble, cmplx, dcmplx," "ichar, char: explicit Fortran/" "" ftype(3F)
.xx "" "semaphore set or shared memory" "id." "/remove a message queue," ipcrm(1)
.xx "and names." "" "id: print user and group IDs" "" id(1)
.xx "" "setpgrp: set process group" "ID." "" setpgrp(2)
.xx "" "issue: issue" "identification file." "" issue(4)
.xx "" "what:" "identify SCCS files." "" what(1)
.xx "dble, cmplx,/" "int, ifix," "idint, real, float, sngl," "" ftype(3F)
.xx "integer/" "anint, dnint, nint," "idnint: Fortran nearest" "" round(3F)
.xx "" "id: print user and group" "IDs and names." "" id(1)
.xx "" "group, and parent process" "IDs." "/get process, process" getpid(2)
.xx "" "group, and effective group" "IDs." "/effective user, real" getuid(2)
.xx "" "setgid: set user and group" "IDs." "setuid," setuid(2)
.xx "sngl, dble, cmplx,/" "int," "ifix, idint, real, float," "" ftype(3F)
.xx "" "core: format of core" "image file." "" core(4)
.xx "" "pnch: file format for card" "images." "" pnch(4)
.xx "" "aimag, dimag: Fortran" "imaginary part of complex/" "" aimag(3F)
.xx "" "nohup: run a command" "immune to hangups and quits." "" nohup(1)
.xx "" "long numeric data in a machine" "independent fashion.." "/access" sputl(3X)
.xx "" "for formatting a permuted" "index." "/the macro package" mptx(5)
.xx "of a/" "ldtbindex: compute the" "index of a symbol table entry" "" ldtbindex(3X)
.xx "" "ptx: permuted" "index." "" ptx(1)
.xx "Fortran substring." "" "index: return location of" "" index(3F)
.xx "a common/" "ldtbread: read an" "indexed symbol table entry of" "" ldtbread(3X)
.xx "" "ldshread, ldnshread: read an" "indexed\/named section header/" "" ldshread(3X)
.xx "" "ldsseek, ldnsseek: seek to an" "indexed\/named section of a/" "" ldsseek(3X)
.xx "" "inittab: script for the" "init process." "" inittab(4)
.xx "process." "popen, pclose:" "initiate pipe to/from a" "" popen(3S)
.xx "process." "" "inittab: script for the init" "" inittab(4)
.xx "" "" "inode: format of an inode." "" inode(4)
.xx "" "inode: format of an" "inode." "" inode(4)
.xx "" "sscanf: convert formatted" "input." "scanf, fscanf," scanf(3S)
.xx "" "push character back into" "input stream." "ungetc:" ungetc(3S)
.xx "" "fread, fwrite: binary" "input/output." "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)
.xx "" "fileno: stream status" "inquiries." "/feof, clearerr," ferror(3S)
.xx "" "uustat: uucp status" "inquiry and job control." "" uustat(1C)
.xx "" "x25alnk, x25ilnk: attach or" "install a BX.25 link." "" x25alnk(3C)
.xx "link." "x25ipvc, x25rpvc:" "install or remove a PVC on a" "" x25ipvc(3C)
.xx "sngl, dble, cmplx, dcmplx,/" "" "int, ifix, idint, real, float," "" ftype(3F)
.xx "" "abs: return" "integer absolute value." "" abs(3C)
.xx "" "/l64a: convert between long" "integer and base-64 ASCII/" "" a64l(3C)
.xx "" "nint, idnint: Fortran nearest" "integer functions." "/dnint," round(3F)
.xx "function." "aint, dint: Fortran" "integer part intrinsic" "" aint(3F)
.xx "" "atol, atoi: convert string to" "integer." "strtol," strtol(3C)
.xx "" "/ltol3: convert between 3-byte" "integers and long integers." "" l3tol(3C)
.xx "" "3-byte integers and long" "integers." "/convert between" l3tol(3C)
.xx "" "rjestat: RJE status report and" "interactive status console." "" rjestat(1C)
.xx "" "plot: graphics" "interface." "" plot(4)
.xx "" "plot: graphics" "interface subroutines." "" plot(3X)
.xx "" "spline:" "interpolate smooth curve." "" spline(1G)
.xx "characters." "asa:" "interpret ASA carriage control" "" asa(1)
.xx "" "sno: SNOBOL" "interpreter." "" sno(1)
.xx "" "pipe: create an" "interprocess channel." "" pipe(2)
.xx "facilities/" "ipcs: report" "inter-process communication" "" ipcs(1)
.xx "package." "stdipc: standard" "interprocess communication" "" stdipc(3C)
.xx "" "suspend execution for an" "interval." "sleep:" sleep(1)
.xx "" "sleep: suspend execution for" "interval." "" sleep(3C)
.xx "" "acos, dacos: Fortran arccosine" "intrinsic function." "" acos(3F)
.xx "" "dint: Fortran integer part" "intrinsic function." "aint," aint(3F)
.xx "" "asin, dasin: Fortran arcsine" "intrinsic function." "" asin(3F)
.xx "" "datan2: Fortran arctangent" "intrinsic function." "atan2," atan2(3F)
.xx "" "datan: Fortran arctangent" "intrinsic function." "atan," atan(3F)
.xx "" "Fortran complex conjugate" "intrinsic function." "/dconjg:" conjg(3F)
.xx "" "dcos, ccos: Fortran cosine" "intrinsic function." "cos," cos(3F)
.xx "" "Fortran hyperbolic cosine" "intrinsic function." "/dcosh:" cosh(3F)
.xx "" "cexp: Fortran exponential" "intrinsic function." "/dexp," exp(3F)
.xx "" "Fortran common logarithm" "intrinsic function." "/dlog10:" log10(3F)
.xx "" "Fortran natural logarithm" "intrinsic function." "/clog:" log(3F)
.xx "" "Fortran transfer-of-sign" "intrinsic function." "/dsign:" sign(3F)
.xx "" "sin, dsin, csin: Fortran sine" "intrinsic function." "" sin(3F)
.xx "" "dsinh: Fortran hyperbolic sine" "intrinsic function." "sinh," sinh(3F)
.xx "" "csqrt: Fortran square root" "intrinsic function." "/dsqrt," sqrt(3F)
.xx "" "tan, dtan: Fortran tangent" "intrinsic function." "" tan(3F)
.xx "" "Fortran hyperbolic tangent" "intrinsic function." "/dtanh:" tanh(3F)
.xx "" "dmod: Fortran remaindering" "intrinsic functions." "/amod," mod(3F)
.xx "commands and application/" "" "intro: introduction to" "" intro(1)
.xx "formats." "" "intro: introduction to file" "" intro(4)
.xx "" "" "intro: introduction to games." "" intro(6)
.xx "miscellany." "" "intro: introduction to" "" intro(5)
.xx "subroutines and libraries." "" "intro: introduction to" "" intro(3)
.xx "calls and error numbers." "" "intro: introduction to system" "" intro(2)
.xx "application programs." "intro:" "introduction to commands and" "" intro(1)
.xx "" "intro:" "introduction to file formats." "" intro(4)
.xx "" "intro:" "introduction to games." "" intro(6)
.xx "" "intro:" "introduction to miscellany." "" intro(5)
.xx "and libraries." "intro:" "introduction to subroutines" "" intro(3)
.xx "and error numbers." "intro:" "introduction to system calls" "" intro(2)
.xx "" "" "ioctl: control device." "" ioctl(2)
.xx "" "abort: generate an" "IOT fault." "" abort(3C)
.xx "semaphore set or shared/" "" "ipcrm: remove a message queue," "" ipcrm(1)
.xx "communication facilities/" "" "ipcs: report inter-process" "" ipcs(1)
.xx "" "cprs: compress an" "IS25 object file." "" cprs(1)
.xx "" "/islower, isdigit, isxdigit," "isalnum, isspace, ispunct,/" "" ctype(3C)
.xx "isdigit, isxdigit, isalnum,/" "" "isalpha, isupper, islower," "" ctype(3C)
.xx "" "/isprint, isgraph, iscntrl," "isascii: classify characters." "" ctype(3C)
.xx "terminal." "ttyname," "isatty: find name of a" "" ttyname(3C)
.xx "" "/ispunct, isprint, isgraph," "iscntrl, isascii: classify/" "" ctype(3C)
.xx "" "isalpha, isupper, islower," "isdigit, isxdigit, isalnum,/" "" ctype(3C)
.xx "" "/isspace, ispunct, isprint," "isgraph, iscntrl, isascii:/" "" ctype(3C)
.xx "transfer-of-sign/" "sign," "isign, dsign: Fortran" "" sign(3F)
.xx "isalnum,/" "isalpha, isupper," "islower, isdigit, isxdigit," "" ctype(3C)
.xx "" "/isalnum, isspace, ispunct," "isprint, isgraph, iscntrl,/" "" ctype(3C)
.xx "" "/isxdigit, isalnum, isspace," "ispunct, isprint, isgraph,/" "" ctype(3C)
.xx "" "/isdigit, isxdigit, isalnum," "isspace, ispunct, isprint,/" "" ctype(3C)
.xx "Fortran." "system:" "issue a shell command from" "" system(3F)
.xx "" "system:" "issue a shell command." "" system(3S)
.xx "" "issue:" "issue identification file." "" issue(4)
.xx "file." "" "issue: issue identification" "" issue(4)
.xx "isxdigit, isalnum,/" "isalpha," "isupper, islower, isdigit," "" ctype(3C)
.xx "" "/isupper, islower, isdigit," "isxdigit, isalnum, isspace,/" "" ctype(3C)
.xx "" "news: print news" "items." "" news(1)
.xx "functions." "" "j0, j1, jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "functions." "j0," "j1, jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "" "bj: the game of black" "jack." "" bj(6)
.xx "functions." "j0, j1," "jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "operator." "" "join: relational database" "" join(1)
.xx "" "" "jotto: secret word game." "" jotto(6)
.xx "" "/lrand48, nrand48, mrand48," "jrand48, srand48, seed48,/" "" drand48(3C)
.xx "assembler/un-assembler for/" "" "kasb, kunb:" "" kasb(1)
.xx "" "makekey: generate encryption" "key." "" makekey(1)
.xx "process or a group of/" "" "kill: send a signal to a" "" kill(2)
.xx "" "" "kill: terminate a process." "" kill(1)
.xx "" "/assembler/un-assembler for the" "KMC\&11B microprocessor." "" kasb(1)
.xx "" "quiz: test your" "knowledge." "" quiz(6)
.xx "for the KMC\&11B/" "kasb," "kunb: assembler/un-assembler" "" kasb(1)
.xx "3-byte integers and long/" "" "l3tol, ltol3: convert between" "" l3tol(3C)
.xx "integer and base-64/" "a64l," "l64a: convert between long" "" a64l(3C)
.xx "" "scanning and processing" "language." "awk: pattern" awk(1)
.xx "" "arbitrary-precision arithmetic" "language." "bc:" bc(1)
.xx "" "ef\&l: Extended Fortran" "Language." "" efl(1)
.xx "" "cpp: the C" "language preprocessor." "" cpp(1)
.xx "" "command programming" "language." "/standard/restricted" sh(1)
.xx "" "/jrand48, srand48, seed48," "lcong48: generate uniformly/" "" drand48(3C)
.xx "object files." "" "ld: link editor for common" "" ld(1)
.xx "" "" "ld: link editor." "" ld.pdp(1)
.xx "object file." "ldclose," "ldaclose: close a common" "" ldclose(3X)
.xx "header of a member of an/" "" "ldahread: read the archive" "" ldahread(3X)
.xx "file for reading." "ldopen," "ldaopen: open a common object" "" ldopen(3X)
.xx "common object file." "" "ldclose, ldaclose: close a" "" ldclose(3X)
.xx "of floating-point/" "frexp," "ldexp, modf: manipulate parts" "" frexp(3C)
.xx "access routines." "" "ldfcn: common object file" "" ldfcn(4)
.xx "of a common object file." "" "ldfhread: read the file header" "" ldfhread(3X)
.xx "line number entries/" "ldlread," "ldlinit, ldlitem: manipulate" "" ldlread(3X)
.xx "number/" "ldlread, ldlinit," "ldlitem: manipulate line" "" ldlread(3X)
.xx "manipulate line number/" "" "ldlread, ldlinit, ldlitem:" "" ldlread(3X)
.xx "number entries of a section/" "" "ldlseek,ldnlseek: seek to line" "" ldlseek(3X)
.xx "entries of a section/" "ldrseek," "ldnrseek: seek to relocation" "" ldrseek(3X)
.xx "indexed\/named/" "ldshread," "ldnshread: read an" "" ldshread(3X)
.xx "indexed\/named/" "ldsseek," "ldnsseek: seek to an" "" ldsseek(3X)
.xx "file header of a common/" "" "ldohseek: seek to the optional" "" ldohseek(3X)
.xx "object file for reading." "" "ldopen, ldaopen: open a common" "" ldopen(3X)
.xx "relocation entries of a/" "" "ldrseek, ldnrseek: seek to" "" ldrseek(3X)
.xx "indexed\/named section header/" "" "ldshread, ldnshread: read an" "" ldshread(3X)
.xx "indexed\/named section of a/" "" "ldsseek, ldnsseek: seek to an" "" ldsseek(3X)
.xx "of a symbol table entry of a/" "" "ldtbindex: compute the index" "" ldtbindex(3X)
.xx "symbol table entry of a/" "" "ldtbread: read an indexed" "" ldtbread(3X)
.xx "table of a common object/" "" "ldtbseek: seek to the symbol" "" ldtbseek(3X)
.xx "string." "" "len: return length of Fortran" "" len(3F)
.xx "" "len: return" "length of Fortran string." "" len(3F)
.xx "" "getopt: get option" "letter from argument vector." "" getopt(3C)
.xx "simple lexical tasks." "" "lex: generate programs for" "" lex(1)
.xx "" "generate programs for simple" "lexical tasks." "lex:" lex(1)
.xx "" "to subroutines and" "libraries." "/introduction" intro(3)
.xx "" "relation for an object" "library." "/find ordering" lorder(1)
.xx "" "ar: archive and" "library maintainer." "" ar.pdp(1)
.xx "portable/" "ar: archive and" "library maintainer for" "" ar(1)
.xx "" "ulimit: get and set user" "limits." "" ulimit(2)
.xx "" "an out-going terminal" "line connection." "/establish" dial(3C)
.xx "" "line: read one" "line." "" line(1)
.xx "common object file." "linenum:" "line number entries in a" "" linenum(4)
.xx "" "/ldlinit, ldlitem: manipulate" "line number entries of a/" "" ldlread(3X)
.xx "" "ldlseek,ldnlseek: seek to" "line number entries of a/" "" ldlseek(3X)
.xx "" "strip: strip symbol and" "line number information from a/" "" strip(1)
.xx "" "nl:" "line numbering filter." "" nl(1)
.xx "" "out selected fields of each" "line of a file." "cut: cut" cut(1)
.xx "" "lpd: HONEYWELL sending daemon," "line printer daemon." "dpd," dpd(1C)
.xx "" "send/cancel requests to an LP" "line printer." "lp, cancel:" lp(1)
.xx "" "lpr:" "line printer spooler." "" lpr(1)
.xx "" "" "line: read one line." "" line(1)
.xx "" "lsearch:" "linear search and update." "" lsearch(3C)
.xx "" "col: filter reverse" "line-feeds." "" col(1)
.xx "in a common object file." "" "linenum: line number entries" "" linenum(4)
.xx "files." "comm: select or reject" "lines common to two sorted" "" comm(1)
.xx "" "uniq: report repeated" "lines in a file." "" uniq(1)
.xx "" "of several files or subsequent" "lines of one file." "/same lines" paste(1)
.xx "subsequent/" "paste: merge same" "lines of several files or" "" paste(1)
.xx "files." "ld:" "link editor for common object" "" ld(1)
.xx "" "ld:" "link editor." "" ld.pdp(1)
.xx "" "a.out: common assembler and" "link editor output." "" a.out(4)
.xx "" "a.out: PDP\&-11 assembler and" "link editor output." "" a.out.pdp(4)
.xx "" "" "link: link to a file." "" link(2)
.xx "" "cp, ln, mv: copy," "link or move files." "" cp(1)
.xx "" "link:" "link to a file." "" link(2)
.xx "" "attach or install a BX.25" "link." "x25alnk, x25ilnk:" x25alnk(3C)
.xx "" "x25clnk: change over a BX.25" "link." "" x25clnk(3C)
.xx "" "halt or detach a BX.25" "link." "x25hlnk, x25dlnk:" x25hlnk(3C)
.xx "" "install or remove a PVC on a" "link." "x25ipvc, x25rpvc:" x25ipvc(3C)
.xx "" "" "lint: a C program checker." "" lint(1)
.xx "" "ls:" "list contents of directories." "" ls(1)
.xx "" "nlist: get entries from name" "list." "" nlist(3C)
.xx "" "nm: print name" "list." "" nm.pdp(1)
.xx "" "nm: print name" "list of common object file." "" nm(1)
.xx "by fsck." "checklist:" "list of file systems processed" "" checklist(4)
.xx "from 3B20S object file." "" "list: produce C source listing" "" list(1)
.xx "file." "list: produce C source" "listing from 3B20S object" "" list(1)
.xx "" "xargs: construct argument" "list(s) and execute command." "" xargs(1)
.xx "files." "cp," "ln, mv: copy, link or move" "" cp(1)
.xx "tzset: convert date/" "ctime," "localtime, gmtime, asctime," "" ctime(3C)
.xx "" "index: return" "location of Fortran substring." "" index(3F)
.xx "" "end, etext, edata: last" "locations in program." "" end(3C)
.xx "memory." "plock:" "lock process, text, or data in" "" plock(2)
.xx "" "trouble:" "log a trouble report." "" trouble(1)
.xx "natural logarithm intrinsic/" "" "log, alog, dlog, clog: Fortran" "" log(3F)
.xx "" "gamma:" "log gamma function." "" gamma(3M)
.xx "" "newgrp:" "log in to a new group." "" newgrp(1)
.xx "exponential, logarithm,/" "exp," "log, log10, pow, sqrt:" "" exp(3M)
.xx "common logarithm intrinsic/" "" "log10, alog10, dlog10: Fortran" "" log10(3F)
.xx "logarithm, power,/" "exp, log," "log10, pow, sqrt: exponential," "" exp(3M)
.xx "" "/alog10, dlog10: Fortran common" "logarithm intrinsic function." "" log10(3F)
.xx "" "/dlog, clog: Fortran natural" "logarithm intrinsic function." "" log(3F)
.xx "" "/log10, pow, sqrt: exponential," "logarithm, power, square root/" "" exp(3M)
.xx "" "getlogin: get" "login name." "" getlogin(3C)
.xx "" "logname: get" "login name." "" logname(1)
.xx "" "cuserid: get character" "login name of the user." "" cuserid(3S)
.xx "" "logname: return" "login name of user." "" logname(3X)
.xx "" "passwd: change" "login password." "" passwd(1)
.xx "" "" "login: sign on." "" login(1)
.xx "" "setting up an environment at" "login time." "profile:" profile(4)
.xx "" "" "logname: get login name." "" logname(1)
.xx "user." "" "logname: return login name of" "" logname(3X)
.xx "" "a64l, l64a: convert between" "long integer and base-64 ASCII/" "" a64l(3C)
.xx "" "between 3-byte integers and" "long integers." "/ltol3: convert" l3tol(3C)
.xx "" "sputl, sgetl: access" "long numeric data in a machine/" "" sputl(3X)
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3C)
.xx "for an object library." "" "lorder: find ordering relation" "" lorder(1)
.xx "" "nice: run a command at" "low priority." "" nice(1)
.xx "requests to an LP line/" "" "lp, cancel: send/cancel" "" lp(1)
.xx "" "send/cancel requests to an" "LP line printer." "lp, cancel:" lp(1)
.xx "" "disable: enable/disable" "LP printers." "enable," enable(1)
.xx "" "lpstat: print" "LP status information." "" lpstat(1)
.xx "line printer daemon." "dpd," "lpd: HONEYWELL sending daemon," "" dpd(1C)
.xx "" "" "lpr: line printer spooler." "" lpr(1)
.xx "information." "" "lpstat: print LP status" "" lpstat(1)
.xx "jrand48,/" "drand48, erand48," "lrand48, nrand48, mrand48," "" drand48(3C)
.xx "directories." "" "ls: list contents of" "" ls(1)
.xx "update." "" "lsearch: linear search and" "" lsearch(3C)
.xx "pointer." "" "lseek: move read/write file" "" lseek(2)
.xx "bitwise/" "and, or, xor, not," "lshift, rshift: Fortran" "" bool(3F)
.xx "integers and long/" "l3tol," "ltol3: convert between 3-byte" "" l3tol(3C)
.xx "" "" "m4: macro processor." "" m4(1)
.xx "" "/access long numeric data in a" "machine independent fashion.." "" sputl(3X)
.xx "permuted index." "mptx: the" "macro package for formatting a" "" mptx(5)
.xx "documents." "mm: the MM" "macro package for formatting" "" mm(5)
.xx "" "mosd: the OSDD adapter" "macro package for formatting/" "" mosd(5)
.xx "view graphs and/" "mv: a troff" "macro package for typesetting" "" mv(5)
.xx "" "m4:" "macro processor." "" m4(1)
.xx "in this manual." "man:" "macros for formatting entries" "" man(5)
.xx "" "formatted with the MM" "macros." "/print/check documents" mm(1)
.xx "" "send mail to users or read" "mail." "mail, rmail:" mail(1)
.xx "users or read mail." "" "mail, rmail: send mail to" "" mail(1)
.xx "" "gcosmail: send" "mail to HIS user." "" gcosmail(1C)
.xx "" "mail, rmail: send" "mail to users or read mail." "" mail(1)
.xx "" "malloc, free, realloc, calloc:" "main memory allocator." "" malloc(3C)
.xx "regenerate groups of/" "make:" "maintain, update, and" "" make(1)
.xx "" "ar: archive and library" "maintainer." "" ar.pdp(1)
.xx "" "ar: archive and library" "maintainer for portable/" "" ar(1)
.xx "SCCS file." "delta:" "make a delta (change) to an" "" delta(1)
.xx "" "mkdir:" "make a directory." "" mkdir(1)
.xx "or ordinary file." "mknod:" "make a directory, or a special" "" mknod(2)
.xx "" "mktemp:" "make a unique file name." "" mktemp(3C)
.xx "regenerate groups of/" "" "make: maintain, update, and" "" make(1)
.xx "" "banner:" "make posters." "" banner(1)
.xx "key." "" "makekey: generate encryption" "" makekey(1)
.xx "main memory allocator." "" "malloc, free, realloc, calloc:" "" malloc(3C)
.xx "entries in this manual." "" "man: macros for formatting" "" man(5)
.xx "this manual." "" "man, manprog: print entries in" "" man(1)
.xx "" "tsearch, tdelete, twalk:" "manage binary search trees." "" tsearch(3C)
.xx "" "hsearch, hcreate, hdestroy:" "manage hash search tables." "" hsearch(3C)
.xx "of/" "ldlread, ldlinit, ldlitem:" "manipulate line number entries" "" ldlread(3X)
.xx "" "frexp, ldexp, modf:" "manipulate parts of/" "" frexp(3C)
.xx "manual." "man," "manprog: print entries in this" "" man(1)
.xx "" "manprog: print entries in this" "manual." "man," man(1)
.xx "" "for formatting entries in this" "manual." "man: macros" man(5)
.xx "" "ascii:" "map of ASCII character set." "" ascii(5)
.xx "files." "diffmk:" "mark differences between" "" diffmk(1)
.xx "" "umask: set file-creation mode" "mask." "" umask(1)
.xx "" "set and get file creation" "mask." "umask:" umask(2)
.xx "table." "master:" "master device information" "" master.dec(4)
.xx "table." "master:" "master device information" "" master.u3b(4)
.xx "information table." "" "master: master device" "" master.dec(4)
.xx "information table." "" "master: master device" "" master.u3b(4)
.xx "" "regular expression compile and" "match routines." "regexp:" regexp(5)
.xx "" "eqn, neqn, checkeq: format" "mathematical text for nroff or/" "" eqn(1)
.xx "function." "" "matherr: error-handling" "" matherr(3M)
.xx "multiple-access-user-space/" "" "maus:" "" maus(2)
.xx "dmax1: Fortran maximum-value/" "" "max, max0, amax0, max1, amax1," "" max(3F)
.xx "dmax1: Fortran/" "max," "max0, amax0, max1, amax1," "" max(3F)
.xx "" "max, max0, amax0," "max1, amax1, dmax1: Fortran/" "" max(3F)
.xx "" "/max1, amax1, dmax1: Fortran" "maximum-value functions." "" max(3F)
.xx "" "" "maze: generate a maze." "" maze(6)
.xx "" "maze: generate a" "maze." "" maze(6)
.xx "accounting." "" "mclock: return Fortran time" "" mclock(3F)
.xx "memcpy, memset: memory/" "" "memccpy, memchr, memcmp," "" memory(3C)
.xx "memset: memory/" "memccpy," "memchr, memcmp, memcpy," "" memory(3C)
.xx "operations." "memccpy, memchr," "memcmp, memcpy, memset: memory" "" memory(3C)
.xx "" "memccpy, memchr, memcmp," "memcpy, memset: memory/" "" memory(3C)
.xx "" "free, realloc, calloc: main" "memory allocator." "malloc," malloc(3C)
.xx "" "shmctl: shared" "memory control operations." "" shmctl(2)
.xx "" "queue, semaphore set or shared" "memory id." "/remove a message" ipcrm(1)
.xx "" "/(shared" "memory) operations." "" maus(2)
.xx "" "memcmp, memcpy, memset:" "memory operations." "/memchr," memory(3C)
.xx "" "shmop: shared" "memory operations." "" shmop(2)
.xx "" "lock process, text, or data in" "memory." "plock:" plock(2)
.xx "" "shmget: get shared" "memory segment." "" shmget(2)
.xx "" "/memchr, memcmp, memcpy," "memset: memory operations." "" memory(3C)
.xx "" "sort: sort and/or" "merge files." "" sort(1)
.xx "files or subsequent/" "paste:" "merge same lines of several" "" paste(1)
.xx "" "" "mesg: permit or deny messages." "" mesg(1)
.xx "" "msgctl:" "message control operations." "" msgctl(2)
.xx "" "msgop:" "message operations." "" msgop(2)
.xx "" "msgget: get" "message queue." "" msgget(2)
.xx "or shared/" "ipcrm: remove a" "message queue, semaphore set" "" ipcrm(1)
.xx "" "mesg: permit or deny" "messages." "" mesg(1)
.xx "" "sys_nerr: system error" "messages." "/errno, sys_errlist," perror(3C)
.xx "" "/for the KMC\&11B" "microprocessor." "" kasb(1)
.xx "dmin1: Fortran minimum-value/" "" "min, min0, amin0, min1, amin1," "" min(3F)
.xx "dmin1: Fortran/" "min," "min0, amin0, min1, amin1," "" min(3F)
.xx "" "min, min0, amin0," "min1, amin1, dmin1: Fortran/" "" min(3F)
.xx "" "/min1, amin1, dmin1: Fortran" "minimum-value functions." "" min(3F)
.xx "" "" "mkdir: make a directory." "" mkdir(1)
.xx "special or ordinary file." "" "mknod: make a directory, or a" "" mknod(2)
.xx "name." "" "mktemp: make a unique file" "" mktemp(3C)
.xx "formatting documents." "mm: the" "MM macro package for" "" mm(5)
.xx "" "documents formatted with the" "MM macros." "/print/check" mm(1)
.xx "documents formatted with the/" "" "mm, osdd, checkmm: print/check" "" mm(1)
.xx "formatting documents." "" "mm: the MM macro package for" "" mm(5)
.xx "view graphs, and slides." "" "mmt, mvt: typeset documents," "" mmt(1)
.xx "table." "" "mnttab: mounted file system" "" mnttab(4)
.xx "remaindering intrinsic/" "" "mod, amod, dmod: Fortran" "" mod(3F)
.xx "" "chmod: change" "mode." "" chmod(1)
.xx "" "umask: set file-creation" "mode mask." "" umask(1)
.xx "" "chmod: change" "mode of file." "" chmod(2)
.xx "" "bs: a compiler/interpreter for" "modest-sized programs." "" bs(1)
.xx "floating-point/" "frexp, ldexp," "modf: manipulate parts of" "" frexp(3C)
.xx "" "touch: update access and" "modification times of a file." "" touch(1)
.xx "" "utime: set file access and" "modification times." "" utime(2)
.xx "profile." "" "monitor: prepare execution" "" monitor(3C)
.xx "" "" "moo: guessing game." "" moo(6)
.xx "package for formatting/" "" "mosd: the OSDD adapter macro" "" mosd(5)
.xx "" "mount:" "mount a file system." "" mount(2)
.xx "" "" "mount: mount a file system." "" mount(2)
.xx "" "mnttab:" "mounted file system table." "" mnttab(4)
.xx "" "cp, ln, mv: copy, link or" "move files." "" cp(1)
.xx "" "lseek:" "move read/write file pointer." "" lseek(2)
.xx "formatting a permuted index." "" "mptx: the macro package for" "" mptx(5)
.xx "" "/erand48, lrand48, nrand48," "mrand48, jrand48, srand48,/" "" drand48(3C)
.xx "operations." "" "msgctl: message control" "" msgctl(2)
.xx "" "" "msgget: get message queue." "" msgget(2)
.xx "" "" "msgop: message operations." "" msgop(2)
.xx "(shared memory)/" "maus:" "multiple-access-user-space" "" maus(2)
.xx "typesetting view graphs and/" "" "mv: a troff macro package for" "" mv(5)
.xx "" "cp, ln," "mv: copy, link or move files." "" cp(1)
.xx "graphs, and slides." "mmt," "mvt: typeset documents, view" "" mmt(1)
.xx "" "log, alog, dlog, clog: Fortran" "natural logarithm intrinsic/" "" log(3F)
.xx "" "/dnint, nint, idnint: Fortran" "nearest integer functions." "" round(3F)
.xx "mathematical text for/" "eqn," "neqn, checkeq: format" "" eqn(1)
.xx "" "definitions for eqn and" "neqn." "/special character" eqnchar(5)
.xx "PCL network." "" "net: execute a command on the" "" net(1C)
.xx "" "execute a command on the PCL" "network." "net:" net(1C)
.xx "" "operation status of the NSC" "network." "nscstat: query the" nscstat(1C)
.xx "" "to another UNIX on the NSC" "network." "nusend: send files" nusend(1C)
.xx "" "re-route jobs from the NSC" "network to RJE." "nsctorje:" nsctorje(1C)
.xx "commands." "stat: statistical" "network useful with graphical" "" stat(1G)
.xx "a text file." "" "newform: change the format of" "" newform(1)
.xx "" "" "newgrp: log in to a new group." "" newgrp(1)
.xx "" "news: print" "news items." "" news(1)
.xx "" "" "news: print news items." "" news(1)
.xx "process." "" "nice: change priority of a" "" nice(2)
.xx "priority." "" "nice: run a command at low" "" nice(1)
.xx "integer/" "anint, dnint," "nint, idnint: Fortran nearest" "" round(3F)
.xx "" "" "nl: line numbering filter." "" nl(1)
.xx "list." "" "nlist: get entries from name" "" nlist(3C)
.xx "" "" "nm: print name list." "" nm.pdp(1)
.xx "object file." "" "nm: print name list of common" "" nm(1)
.xx "hangups and quits." "" "nohup: run a command immune to" "" nohup(1)
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3C)
.xx "bitwise boolean/" "and, or, xor," "not, lshift, rshift: Fortran" "" bool(3F)
.xx "" "drand48, erand48, lrand48," "nrand48, mrand48, jrand48,/" "" drand48(3C)
.xx "" "" "nroff: format text." "" nroff(1)
.xx "" "format mathematical text for" "nroff or troff." "/checkeq:" eqn(1)
.xx "" "tbl: format tables for" "nroff or troff." "" tbl(1)
.xx "constructs." "deroff: remove" "nroff/troff, tbl, and eqn" "" deroff(1)
.xx "" "the operation status of the" "NSC network." "nscstat: query" nscstat(1C)
.xx "" "files to another UNIX on the" "NSC network." "nusend: send" nusend(1C)
.xx "" "re-route jobs from the" "NSC network to RJE." "nsctorje:" nsctorje(1C)
.xx "status of the NSC network." "" "nscstat: query the operation" "" nscstat(1C)
.xx "the NSC network to RJE." "" "nsctorje: re-route jobs from" "" nsctorje(1C)
.xx "" "nl: line" "numbering filter." "" nl(1)
.xx "" "sputl, sgetl: access long" "numeric data in a machine/" "" sputl(3X)
.xx "" "graphics: access graphical and" "numerical commands." "" graphics(1G)
.xx "UNIX on the NSC network." "" "nusend: send files to another" "" nusend(1C)
.xx "common/" "convert: convert" "object and archive files to" "" convert(1)
.xx "" "ldfcn: common" "object file access routines." "" ldfcn(4)
.xx "" "cprs: compress an IS25" "object file." "" cprs(1)
.xx "" "dump selected parts of an" "object file." "dump:" dump(1)
.xx "" "ldopen, ldaopen: open a common" "object file for reading." "" ldopen(3X)
.xx "" "number entries of a common" "object file function." "/line" ldlread(3X)
.xx "" "ldaclose: close a common" "object file." "ldclose," ldclose(3X)
.xx "" "the file header of a common" "object file." "ldfhread: read" ldfhread(3X)
.xx "" "of a section of a common" "object file." "/number entries" ldlseek(3X)
.xx "" "file header of a common" "object file." "/to the optional" ldohseek(3X)
.xx "" "of a section of a common" "object file." "/entries" ldrseek(3X)
.xx "" "section header of a common" "object file." "/indexed\/named" ldshread(3X)
.xx "" "section of a common" "object file." "/indexed\/named" ldsseek(3X)
.xx "" "symbol table entry of a common" "object file." "/the index of a" ldtbindex(3X)
.xx "" "symbol table entry of a common" "object file." "/read an indexed" ldtbread(3X)
.xx "" "the symbol table of a common" "object file." "/seek to" ldtbseek(3X)
.xx "" "number entries in a common" "object file." "linenum: line" linenum(4)
.xx "" "C source listing from 3B20S" "object file." "list: produce" list(1)
.xx "" "nm: print name list of common" "object file." "" nm(1)
.xx "" "information for a common" "object file." "/relocation" reloc(4)
.xx "" "section header for a common" "object file." "scnhdr:" scnhdr(4)
.xx "" "information from a common" "object file." "/and line number" strip(1)
.xx "format." "syms: common" "object file symbol table" "" syms(4)
.xx "" "file header for common" "object files." "filehdr:" filehdr(4)
.xx "" "ld: link editor for common" "object files." "" ld(1)
.xx "" "print section sizes of common" "object files." "size:" size(1)
.xx "" "size: print sizes of" "object files." "" size.pdp(1)
.xx "" "find ordering relation for an" "object library." "lorder:" lorder(1)
.xx "" "sky:" "obtain ephemerides." "" sky(6)
.xx "" "od:" "octal dump." "" od(1)
.xx "" "" "od: octal dump." "" od(1)
.xx "" "dpr:" "off-line print." "" dpr(1C)
.xx "reading." "ldopen, ldaopen:" "open a common object file for" "" ldopen(3X)
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)
.xx "" "dup: duplicate an" "open file descriptor." "" dup(2)
.xx "" "open:" "open for reading or writing." "" open(2)
.xx "writing." "" "open: open for reading or" "" open(2)
.xx "network." "nscstat: query the" "operation status of the NSC" "" nscstat(1C)
.xx "" "/(shared memory)" "operations." "" maus(2)
.xx "" "memcmp, memcpy, memset: memory" "operations." "memccpy, memchr," memory(3C)
.xx "" "msgctl: message control" "operations." "" msgctl(2)
.xx "" "msgop: message" "operations." "" msgop(2)
.xx "" "semctl: semaphore control" "operations." "" semctl(2)
.xx "" "semop: semaphore" "operations." "" semop(2)
.xx "" "shmctl: shared memory control" "operations." "" shmctl(2)
.xx "" "shmop: shared memory" "operations." "" shmop(2)
.xx "" "strcspn, strtok: string" "operations." "/strpbrk, strspn," string(3C)
.xx "" "join: relational database" "operator." "" join(1)
.xx "vector." "getopt: get" "option letter from argument" "" getopt(3C)
.xx "common/" "ldohseek: seek to the" "optional file header of a" "" ldohseek(3X)
.xx "" "fcntl: file control" "options." "" fcntl(5)
.xx "" "stty: set the" "options for a terminal." "" stty(1)
.xx "" "getopt: parse command" "options." "" getopt(1)
.xx "Fortran bitwise boolean/" "and," "or, xor, not, lshift, rshift:" "" bool(3F)
.xx "object library." "lorder: find" "ordering relation for an" "" lorder(1)
.xx "" "a directory, or a special or" "ordinary file." "mknod: make" mknod(2)
.xx "formatting/" "mosd: the" "OSDD adapter macro package for" "" mosd(5)
.xx "documents formatted with/" "mm," "osdd, checkmm: print/check" "" mm(1)
.xx "" "dial: establish an" "out-going terminal line/" "" dial(3C)
.xx "" "assembler and link editor" "output." "a.out: common" a.out(4)
.xx "" "assembler and link editor" "output." "a.out: PDP\&-11" a.out.pdp(4)
.xx "" "sprintf: print formatted" "output." "printf, fprintf," printf(3S)
.xx "" "gcat: send phototypesetter" "output to the HONEYWELL 6000." "" gcat(1C)
.xx "" "chown: change" "owner and group of a file." "" chown(2)
.xx "" "chown, chgrp: change" "owner or group." "" chown(1)
.xx "and expand files." "" "pack, pcat, unpack: compress" "" pack(1)
.xx "permuted/" "mptx: the macro" "package for formatting a" "" mptx(5)
.xx "documents." "mm: the MM macro" "package for formatting" "" mm(5)
.xx "" "mosd: the OSDD adapter macro" "package for formatting/" "" mosd(5)
.xx "graphs and/" "mv: a troff macro" "package for typesetting view" "" mv(5)
.xx "" "standard buffered input/output" "package." "stdio:" stdio(3S)
.xx "" "interprocess communication" "package." "stdipc: standard" stdipc(3C)
.xx "4014 terminal." "4014:" "paginator for the Tektronix" "" 4014(1)
.xx "" "process, process group, and" "parent process IDs." "/get" getpid(2)
.xx "" "getopt:" "parse command options." "" getopt(1)
.xx "" "" "passwd: change login password." "" passwd(1)
.xx "" "" "passwd: password file." "" passwd(4)
.xx "" "/setpwent, endpwent: get" "password file entry." "" getpwent(3C)
.xx "" "putpwent: write" "password file entry." "" putpwent(3C)
.xx "" "passwd:" "password file." "" passwd(4)
.xx "" "getpass: read a" "password." "" getpass(3C)
.xx "" "passwd: change login" "password." "" passwd(1)
.xx "several files or subsequent/" "" "paste: merge same lines of" "" paste(1)
.xx "" "dirname: deliver portions of" "path names." "basename," basename(1)
.xx "directory." "getcwd: get" "path-name of current working" "" getcwd(3C)
.xx "" "fgrep: search a file for a" "pattern." "grep, egrep," grep(1)
.xx "processing language." "awk:" "pattern scanning and" "" awk(1)
.xx "signal." "" "pause: suspend process until" "" pause(2)
.xx "expand files." "pack," "pcat, unpack: compress and" "" pack(1)
.xx "" "cc," "pcc: C compiler." "" cc(1)
.xx "" "net: execute a command on the" "PCL network." "" net(1C)
.xx "a process." "popen," "pclose: initiate pipe to/from" "" popen(3S)
.xx "" "as: assembler for" "PDP-11." "" as.pdp(1)
.xx "editor output." "a.out:" "PDP\&-11 assembler and link" "" a.out.pdp(4)
.xx "" "/convert archive files from" "PDP-11 to common archive/" "" arcv(1)
.xx "truth value about your/" "" "pdp11, u3b, u3b5, vax: provide" "" machid(1)
.xx "" "mesg:" "permit or deny messages." "" mesg(1)
.xx "" "macro package for formatting a" "permuted index." "mptx: the" mptx(5)
.xx "" "ptx:" "permuted index." "" ptx(1)
.xx "format." "acct:" "per-process accounting file" "" acct(4)
.xx "sys_nerr: system error/" "" "perror, errno, sys_errlist," "" perror(3C)
.xx "HONEYWELL 6000." "gcat: send" "phototypesetter output to the" "" gcat(1C)
.xx "" "tc:" "phototypesetter simulator." "" tc(1)
.xx "" "split: split a file into" "pieces." "" split(1)
.xx "channel." "" "pipe: create an interprocess" "" pipe(2)
.xx "" "tee:" "pipe fitting." "" tee(1)
.xx "" "popen, pclose: initiate" "pipe to/from a process." "" popen(3S)
.xx "data in memory." "" "plock: lock process, text, or" "" plock(2)
.xx "" "" "plot: graphics interface." "" plot(4)
.xx "subroutines." "" "plot: graphics interface" "" plot(3X)
.xx "images." "" "pnch: file format for card" "" pnch(4)
.xx "" "ftell: reposition a file" "pointer in a stream." "/rewind," fseek(3S)
.xx "" "lseek: move read/write file" "pointer." "" lseek(2)
.xx "to/from a process." "" "popen, pclose: initiate pipe" "" popen(3S)
.xx "" "and library maintainer for" "portable archives." "/archive" ar(1)
.xx "" "basename, dirname: deliver" "portions of path names." "" basename(1)
.xx "" "banner: make" "posters." "" banner(1)
.xx "logarithm,/" "exp, log, log10," "pow, sqrt: exponential," "" exp(3M)
.xx "" "/sqrt: exponential, logarithm," "power, square root functions." "" exp(3M)
.xx "" "" "pr: print files." "" pr(1)
.xx "for troff." "cw, checkcw:" "prepare constant-width text" "" cw(1)
.xx "" "monitor:" "prepare execution profile." "" monitor(3C)
.xx "" "cpp: the C language" "preprocessor." "" cpp(1)
.xx "" "unget: undo a" "previous get of an SCCS file." "" unget(1)
.xx "graphical/" "gps: graphical" "primitive string, format of" "" gps(4)
.xx "" "types:" "primitive system data types." "" types(5)
.xx "" "prs:" "print an SCCS file." "" prs(1)
.xx "" "date:" "print and set the date." "" date(1)
.xx "" "cal:" "print calendar." "" cal(1)
.xx "of a file." "sum:" "print checksum and block count" "" sum(1)
.xx "editing activity." "sact:" "print current SCCS file" "" sact(1)
.xx "" "dpr: off-line" "print." "" dpr(1C)
.xx "" "man, manprog:" "print entries in this manual." "" man(1)
.xx "" "cat: concatenate and" "print files." "" cat(1)
.xx "" "scat: concatenate and" "print files on synchronous/" "" scat(1)
.xx "" "pr:" "print files." "" pr(1)
.xx "" "printf, fprintf, sprintf:" "print formatted output." "" printf(3S)
.xx "" "lpstat:" "print LP status information." "" lpstat(1)
.xx "" "nm:" "print name list." "" nm.pdp(1)
.xx "object file." "nm:" "print name list of common" "" nm(1)
.xx "system." "uname:" "print name of current UNIX" "" uname(1)
.xx "" "news:" "print news items." "" news(1)
.xx "file(s)." "acctcom: search and" "print process accounting" "" acctcom(1)
.xx "object files." "size:" "print section sizes of common" "" size(1)
.xx "" "size:" "print sizes of object files." "" size.pdp(1)
.xx "names." "id:" "print user and group IDs and" "" id(1)
.xx "formatted/" "mm, osdd, checkmm:" "print/check documents" "" mm(1)
.xx "" "HONEYWELL sending daemon, line" "printer daemon." "dpd, lpd:" dpd(1C)
.xx "" "requests to an LP line" "printer." "/cancel: send/cancel" lp(1)
.xx "" "and print files on synchronous" "printer." "scat: concatenate" scat(1)
.xx "" "lpr: line" "printer spooler." "" lpr(1)
.xx "" "vpr: Versatec" "printer spooler." "" vpr(1)
.xx "" "disable: enable/disable LP" "printers." "enable," enable(1)
.xx "print formatted output." "" "printf, fprintf, sprintf:" "" printf(3S)
.xx "" "nice: run a command at low" "priority." "" nice(1)
.xx "" "nice: change" "priority of a process." "" nice(2)
.xx "" "acct: enable or disable" "process accounting." "" acct(2)
.xx "" "acctcom: search and print" "process accounting file(s)." "" acctcom(1)
.xx "times." "times: get" "process and child process" "" times(2)
.xx "" "timex: time a command; report" "process data and system/" "" timex(1)
.xx "" "exit, _exit: terminate" "process." "" exit(2)
.xx "" "fork: create a new" "process." "" fork(2)
.xx "" "/getpgrp, getppid: get process," "process group, and parent/" "" getpid(2)
.xx "" "setpgrp: set" "process group ID." "" setpgrp(2)
.xx "" "process group, and parent" "process IDs." "/get process," getpid(2)
.xx "" "inittab: script for the init" "process." "" inittab(4)
.xx "" "kill: terminate a" "process." "" kill(1)
.xx "" "nice: change priority of a" "process." "" nice(2)
.xx "" "kill: send a signal to a" "process or a group of/" "" kill(2)
.xx "" "initiate pipe to/from a" "process." "popen, pclose:" popen(3S)
.xx "" "getpid, getpgrp, getppid: get" "process, process group, and/" "" getpid(2)
.xx "" "ps: report" "process status." "" ps(1)
.xx "memory." "plock: lock" "process, text, or data in" "" plock(2)
.xx "" "times: get process and child" "process times." "" times(2)
.xx "" "wait: wait for child" "process to stop or terminate." "" wait(2)
.xx "" "ptrace:" "process trace." "" ptrace(2)
.xx "" "pause: suspend" "process until signal." "" pause(2)
.xx "" "wait: await completion of" "process." "" wait(1)
.xx "" "list of file systems" "processed by fsck." "checklist:" checklist(4)
.xx "" "to a process or a group of" "processes." "/send a signal" kill(2)
.xx "" "awk: pattern scanning and" "processing language." "" awk(1)
.xx "" "m4: macro" "processor." "" m4(1)
.xx "" "provide truth value about your" "processor type." "/u3b5, vax:" machid(1)
.xx "" "alarm: set a" "process's alarm clock." "" alarm(2)
.xx "3B20S object file." "list:" "produce C source listing from" "" list(1)
.xx "" "" "prof: display profile data." "" prof(1)
.xx "profile." "" "profil: execution time" "" profil(2)
.xx "" "prof: display" "profile data." "" prof(1)
.xx "" "monitor: prepare execution" "profile." "" monitor(3C)
.xx "" "profil: execution time" "profile." "" profil(2)
.xx "environment at login time." "" "profile: setting up an" "" profile(4)
.xx "" "sadp: disk access" "profiler." "" sadp(1)
.xx "" "standard/restricted command" "programming language." "/the" sh(1)
.xx "" "arithmetic:" "provide drill in number facts." "" arithmetic(6)
.xx "" "pdp11, u3b, u3b5, vax:" "provide truth value about your/" "" machid(1)
.xx "" "true, false:" "provide truth values." "" true(1)
.xx "" "" "prs: print an SCCS file." "" prs(1)
.xx "" "" "ps: report process status." "" ps(1)
.xx "" "/generate uniformly distributed" "pseudo-random numbers." "" drand48(3C)
.xx "" "" "ptrace: process trace." "" ptrace(2)
.xx "" "" "ptx: permuted index." "" ptx(1)
.xx "stream." "ungetc:" "push character back into input" "" ungetc(3S)
.xx "put character or word on a/" "" "putc, putchar, fputc, putw:" "" putc(3S)
.xx "character or word on a/" "putc," "putchar, fputc, putw: put" "" putc(3S)
.xx "entry." "" "putpwent: write password file" "" putpwent(3C)
.xx "stream." "" "puts, fputs: put a string on a" "" puts(3S)
.xx "" "getutent, getutid, getutline," "pututline, setutent, endutent,/" "" getut(3C)
.xx "a/" "putc, putchar, fputc," "putw: put character or word on" "" putc(3S)
.xx "" "x25rpvc: install or remove a" "PVC on a link." "x25ipvc," x25ipvc(3C)
.xx "" "" "pwd: working directory name." "" pwd(1)
.xx "" "" "qsort: quicker sort." "" qsort(3C)
.xx "the NSC network." "nscstat:" "query the operation status of" "" nscstat(1C)
.xx "" "msgget: get message" "queue." "" msgget(2)
.xx "" "ipcrm: remove a message" "queue, semaphore set or shared/" "" ipcrm(1)
.xx "" "qsort:" "quicker sort." "" qsort(3C)
.xx "" "command immune to hangups and" "quits." "nohup: run a" nohup(1)
.xx "" "" "quiz: test your knowledge." "" quiz(6)
.xx "random-number/" "srand," "rand: Fortran uniform" "" rand(3F)
.xx "random-number generator." "" "rand, srand: simple" "" rand(3C)
.xx "" "rand, srand: simple" "random-number generator." "" rand(3C)
.xx "" "srand, rand: Fortran uniform" "random-number generator." "" rand(3F)
.xx "" "fsplit: split f77," "ratfor, or ef\&l files." "" fsplit(1)
.xx "dialect." "" "ratfor: rational Fortran" "" ratfor(1)
.xx "" "ratfor:" "rational Fortran dialect." "" ratfor(1)
.xx "" "getpass:" "read a password." "" getpass(3C)
.xx "entry of a common/" "ldtbread:" "read an indexed symbol table" "" ldtbread(3X)
.xx "header/" "ldshread, ldnshread:" "read an indexed\/named section" "" ldshread(3X)
.xx "" "read:" "read from file." "" read(2)
.xx "" "rmail: send mail to users or" "read mail." "mail," mail(1)
.xx "" "line:" "read one line." "" line(1)
.xx "" "" "read: read from file." "" read(2)
.xx "member of an/" "ldahread:" "read the archive header of a" "" ldahread(3X)
.xx "common object file." "ldfhread:" "read the file header of a" "" ldfhread(3X)
.xx "" "open a common object file for" "reading." "ldopen, ldaopen:" ldopen(3X)
.xx "" "open: open for" "reading or writing." "" open(2)
.xx "" "lseek: move" "read/write file pointer." "" lseek(2)
.xx "cmplx,/" "int, ifix, idint," "real, float, sngl, dble," "" ftype(3F)
.xx "allocator." "malloc, free," "realloc, calloc: main memory" "" malloc(3C)
.xx "" "specify what to do upon" "receipt of a signal." "signal:" signal(2)
.xx "" "/specify Fortran action on" "receipt of a system signal." "" signal(3F)
.xx "" "ed," "red: text editor." "" ed(1)
.xx "" "generate C program cross" "reference." "cxref:" cxref(1)
.xx "execute regular expression." "" "regcmp, regex: compile and" "" regcmp(3X)
.xx "compile." "" "regcmp: regular expression" "" regcmp(1)
.xx "" "make: maintain, update, and" "regenerate groups of programs." "" make(1)
.xx "regular expression." "regcmp," "regex: compile and execute" "" regcmp(3X)
.xx "compile and match routines." "" "regexp: regular expression" "" regexp(5)
.xx "match routines." "regexp:" "regular expression compile and" "" regexp(5)
.xx "" "regcmp:" "regular expression compile." "" regcmp(1)
.xx "" "regex: compile and execute" "regular expression." "regcmp," regcmp(3X)
.xx "sorted files." "comm: select or" "reject lines common to two" "" comm(1)
.xx "" "lorder: find ordering" "relation for an object/" "" lorder(1)
.xx "" "join:" "relational database operator." "" join(1)
.xx "for a common object file." "" "reloc: relocation information" "" reloc(4)
.xx "" "strip: remove symbols and" "relocation bits." "" strip.pdp(1)
.xx "" "ldrseek, ldnrseek: seek to" "relocation entries of a/" "" ldrseek(3X)
.xx "common object file." "reloc:" "relocation information for a" "" reloc(4)
.xx "" "/fmod, fabs: floor, ceiling," "remainder, absolute value/" "" floor(3M)
.xx "" "mod, amod, dmod: Fortran" "remaindering intrinsic/" "" mod(3F)
.xx "" "calendar:" "reminder service." "" calendar(1)
.xx "" "ct: spawn getty to a" "remote terminal." "" ct(1C)
.xx "file." "rmdel:" "remove a delta from an SCCS" "" rmdel(1)
.xx "semaphore set or/" "ipcrm:" "remove a message queue," "" ipcrm(1)
.xx "" "x25ipvc, x25rpvc: install or" "remove a PVC on a link." "" x25ipvc(3C)
.xx "" "unlink:" "remove directory entry." "" unlink(2)
.xx "" "rm, rmdir:" "remove files or directories." "" rm(1)
.xx "eqn constructs." "deroff:" "remove nroff/troff, tbl, and" "" deroff(1)
.xx "bits." "strip:" "remove symbols and relocation" "" strip.pdp(1)
.xx "" "uniq: report" "repeated lines in a file." "" uniq(1)
.xx "console." "rjestat: RJE status" "report and interactive status" "" rjestat(1C)
.xx "" "clock:" "report CPU time used." "" clock(3C)
.xx "communication/" "ipcs:" "report inter-process" "" ipcs(1)
.xx "" "timex: time a command;" "report process data and system/" "" timex(1)
.xx "" "ps:" "report process status." "" ps(1)
.xx "file." "uniq:" "report repeated lines in a" "" uniq(1)
.xx "facilities status." "ststat:" "report synchronous terminal" "" ststat(1)
.xx "" "trouble: log a trouble" "report." "" trouble(1)
.xx "" "sar: system activity" "reporter." "" sar(1)
.xx "stream." "fseek, rewind, ftell:" "reposition a file pointer in a" "" fseek(3S)
.xx "" "lp, cancel: send/cancel" "requests to an LP line/" "" lp(1)
.xx "network to RJE." "nsctorje:" "re-route jobs from the NSC" "" nsctorje(1C)
.xx "HONEYWELL/" "fget, fget.demon:" "retrieve files from the" "" fget(1C)
.xx "argument." "getarg:" "return Fortran command-line" "" getarg(3F)
.xx "variable." "getenv:" "return Fortran environment" "" getenv(3F)
.xx "accounting." "mclock:" "return Fortran time" "" mclock(3F)
.xx "" "abs:" "return integer absolute value." "" abs(3C)
.xx "string." "len:" "return length of Fortran" "" len(3F)
.xx "substring." "index:" "return location of Fortran" "" index(3F)
.xx "" "logname:" "return login name of user." "" logname(3X)
.xx "name." "getenv:" "return value for environment" "" getenv(3C)
.xx "" "stat: data" "returned by stat system call." "" stat(5)
.xx "" "reversi: a game of dramatic" "reversals." "" reversi(6)
.xx "" "col: filter" "reverse line-feeds." "" col(1)
.xx "reversals." "" "reversi: a game of dramatic" "" reversi(6)
.xx "file pointer in a/" "fseek," "rewind, ftell: reposition a" "" fseek(3S)
.xx "" "creat: create a new file or" "rewrite an existing one." "" creat(2)
.xx "" "gather files and/or submit" "RJE jobs." "send, gath:" send(1C)
.xx "" "jobs from the NSC network to" "RJE." "nsctorje: re-route" nsctorje(1C)
.xx "interactive status/" "rjestat:" "RJE status report and" "" rjestat(1C)
.xx "interactive status console." "" "rjestat: RJE status report and" "" rjestat(1C)
.xx "directories." "" "rm, rmdir: remove files or" "" rm(1)
.xx "read mail." "mail," "rmail: send mail to users or" "" mail(1)
.xx "SCCS file." "" "rmdel: remove a delta from an" "" rmdel(1)
.xx "directories." "rm," "rmdir: remove files or" "" rm(1)
.xx "" "chroot: change" "root directory." "" chroot(2)
.xx "" "logarithm, power, square" "root functions." "/exponential," exp(3M)
.xx "" "/dsqrt, csqrt: Fortran square" "root intrinsic function." "" sqrt(3F)
.xx "" "/tekset, td: graphical device" "routines and filters." "" gdev(1G)
.xx "" "common object file access" "routines." "ldfcn:" ldfcn(4)
.xx "" "expression compile and match" "routines." "regexp: regular" regexp(5)
.xx "" "graphical table of contents" "routines." "toc:" toc(1G)
.xx "standard/restricted/" "sh," "rsh: shell, the" "" sh(1)
.xx "" "and, or, xor, not, lshift," "rshift: Fortran bitwise/" "" bool(3F)
.xx "" "nice:" "run a command at low priority." "" nice(1)
.xx "hangups and quits." "nohup:" "run a command immune to" "" nohup(1)
.xx "editing activity." "" "sact: print current SCCS file" "" sact(1)
.xx "" "" "sadp: disk access profiler." "" sadp(1)
.xx "" "" "sag: system activity graph." "" sag(1G)
.xx "" "" "sar: system activity reporter." "" sar(1)
.xx "space allocation." "brk," "sbrk: change data segment" "" brk(2)
.xx "formatted input." "" "scanf, fscanf, sscanf: convert" "" scanf(3S)
.xx "" "bfs: big file" "scanner." "" bfs(1)
.xx "language." "awk: pattern" "scanning and processing" "" awk(1)
.xx "files on synchronous printer." "" "scat: concatenate and print" "" scat(1)
.xx "stand-alone programs." "" "scc: C compiler for" "" scc(1)
.xx "" "the delta commentary of an" "SCCS delta." "cdc: change" cdc(1)
.xx "" "comb: combine" "SCCS deltas." "" comb(1)
.xx "" "make a delta (change) to an" "SCCS file." "delta:" delta(1)
.xx "" "sact: print current" "SCCS file editing activity." "" sact(1)
.xx "" "get: get a version of an" "SCCS file." "" get(1)
.xx "" "prs: print an" "SCCS file." "" prs(1)
.xx "" "rmdel: remove a delta from an" "SCCS file." "" rmdel(1)
.xx "" "compare two versions of an" "SCCS file." "sccsdiff:" sccsdiff(1)
.xx "" "sccsfile: format of" "SCCS file." "" sccsfile(4)
.xx "" "undo a previous get of an" "SCCS file." "unget:" unget(1)
.xx "" "val: validate" "SCCS file." "" val(1)
.xx "" "admin: create and administer" "SCCS files." "" admin(1)
.xx "" "what: identify" "SCCS files." "" what(1)
.xx "of an SCCS file." "" "sccsdiff: compare two versions" "" sccsdiff(1)
.xx "" "" "sccsfile: format of SCCS file." "" sccsfile(4)
.xx "common object file." "" "scnhdr: section header for a" "" scnhdr(4)
.xx "terminals." "se:" "screen editor for video" "" se(1)
.xx "" "inittab:" "script for the init process." "" inittab(4)
.xx "" "" "sdb: symbolic debugger." "" sdb(1)
.xx "program." "" "sdiff: side-by-side difference" "" sdiff(1)
.xx "terminals." "" "se: screen editor for video" "" se(1)
.xx "" "grep, egrep, fgrep:" "search a file for a pattern." "" grep(1)
.xx "accounting file(s)." "acctcom:" "search and print process" "" acctcom(1)
.xx "" "lsearch: linear" "search and update." "" lsearch(3C)
.xx "" "bsearch: binary" "search." "" bsearch(3C)
.xx "" "hcreate, hdestroy: manage hash" "search tables." "hsearch," hsearch(3C)
.xx "" "tdelete, twalk: manage binary" "search trees." "tsearch," tsearch(3C)
.xx "" "jotto:" "secret word game." "" jotto(6)
.xx "object file." "scnhdr:" "section header for a common" "" scnhdr(4)
.xx "object/" "/read an indexed\/named" "section header of a common" "" ldshread(3X)
.xx "" "/to line number entries of a" "section of a common object/" "" ldlseek(3X)
.xx "" "/to relocation entries of a" "section of a common object/" "" ldrseek(3X)
.xx "" "/seek to an indexed\/named" "section of a common object/" "" ldsseek(3X)
.xx "files." "size: print" "section sizes of common object" "" size(1)
.xx "" "" "sed: stream editor." "" sed(1)
.xx "" "/mrand48, jrand48, srand48," "seed48, lcong48: generate/" "" drand48(3C)
.xx "section of/" "ldsseek, ldnsseek:" "seek to an indexed\/named" "" ldsseek(3X)
.xx "a section/" "ldlseek,ldnlseek:" "seek to line number entries of" "" ldlseek(3X)
.xx "a section/" "ldrseek, ldnrseek:" "seek to relocation entries of" "" ldrseek(3X)
.xx "header of a common/" "ldohseek:" "seek to the optional file" "" ldohseek(3X)
.xx "common object file." "ldtbseek:" "seek to the symbol table of a" "" ldtbseek(3X)
.xx "" "shmget: get shared memory" "segment." "" shmget(2)
.xx "" "brk, sbrk: change data" "segment space allocation." "" brk(2)
.xx "to two sorted files." "comm:" "select or reject lines common" "" comm(1)
.xx "" "greek:" "select terminal filter." "" greek(1)
.xx "of a file." "cut: cut out" "selected fields of each line" "" cut(1)
.xx "file." "dump: dump" "selected parts of an object" "" dump(1)
.xx "" "semctl:" "semaphore control operations." "" semctl(2)
.xx "" "semop:" "semaphore operations." "" semop(2)
.xx "" "ipcrm: remove a message queue," "semaphore set or shared memory/" "" ipcrm(1)
.xx "" "semget: get set of" "semaphores." "" semget(2)
.xx "operations." "" "semctl: semaphore control" "" semctl(2)
.xx "" "" "semget: get set of semaphores." "" semget(2)
.xx "" "" "semop: semaphore operations." "" semop(2)
.xx "a group of processes." "kill:" "send a signal to a process or" "" kill(2)
.xx "the NSC network." "nusend:" "send files to another UNIX on" "" nusend(1C)
.xx "6000." "fsend:" "send files to the HONEYWELL" "" fsend(1C)
.xx "and/or submit RJE jobs." "" "send, gath: gather files" "" send(1C)
.xx "" "gcosmail:" "send mail to HIS user." "" gcosmail(1C)
.xx "mail." "mail, rmail:" "send mail to users or read" "" mail(1)
.xx "the HONEYWELL 6000." "gcat:" "send phototypesetter output to" "" gcat(1C)
.xx "line printer." "lp, cancel:" "send/cancel requests to an LP" "" lp(1)
.xx "daemon." "dpd, lpd: HONEYWELL" "sending daemon, line printer" "" dpd(1C)
.xx "stream." "" "setbuf: assign buffering to a" "" setbuf(3S)
.xx "IDs." "setuid," "setgid: set user and group" "" setuid(2)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent: get group/" "" getgrent(3C)
.xx "goto." "" "setjmp, longjmp: non-local" "" setjmp(3C)
.xx "encryption." "crypt," "setkey, encrypt: generate DES" "" crypt(3C)
.xx "" "" "setpgrp: set process group ID." "" setpgrp(2)
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent: get/" "" getpwent(3C)
.xx "login time." "profile:" "setting up an environment at" "" profile(4)
.xx "" "gettydefs: speed and terminal" "settings used by getty." "" gettydefs(4)
.xx "group IDs." "" "setuid, setgid: set user and" "" setuid(2)
.xx "" "/getutid, getutline, pututline," "setutent, endutent, utmpname:/" "" getut(3C)
.xx "data in a machine/" "sputl," "sgetl: access long numeric" "" sputl(3X)
.xx "standard/restricted command/" "" "sh, rsh: shell, the" "" sh(1)
.xx "operations." "shmctl:" "shared memory control" "" shmctl(2)
.xx "" "queue, semaphore set or" "shared memory id." "/a message" ipcrm(1)
.xx "" "/multiple-access-user-space" "(shared memory) operations." "" maus(2)
.xx "" "shmop:" "shared memory operations." "" shmop(2)
.xx "" "shmget: get" "shared memory segment." "" shmget(2)
.xx "" "system: issue a" "shell command from Fortran." "" system(3F)
.xx "" "system: issue a" "shell command." "" system(3S)
.xx "command programming/" "sh, rsh:" "shell, the standard/restricted" "" sh(1)
.xx "operations." "" "shmctl: shared memory control" "" shmctl(2)
.xx "segment." "" "shmget: get shared memory" "" shmget(2)
.xx "operations." "" "shmop: shared memory" "" shmop(2)
.xx "program." "sdiff:" "side-by-side difference" "" sdiff(1)
.xx "transfer-of-sign intrinsic/" "" "sign, isign, dsign: Fortran" "" sign(3F)
.xx "" "login:" "sign on." "" login(1)
.xx "terminal." "stlogin:" "sign on to synchronous" "" stlogin(1)
.xx "" "pause: suspend process until" "signal." "" pause(2)
.xx "" "what to do upon receipt of a" "signal." "signal: specify" signal(2)
.xx "" "action on receipt of a system" "signal." "/specify Fortran" signal(3F)
.xx "on receipt of a system/" "" "signal: specify Fortran action" "" signal(3F)
.xx "upon receipt of a signal." "" "signal: specify what to do" "" signal(2)
.xx "of processes." "kill: send a" "signal to a process or a group" "" kill(2)
.xx "" "ssignal, gsignal: software" "signals." "" ssignal(3C)
.xx "" "lex: generate programs for" "simple lexical tasks." "" lex(1)
.xx "generator." "rand, srand:" "simple random-number" "" rand(3C)
.xx "" "tc: phototypesetter" "simulator." "" tc(1)
.xx "atan, atan2: trigonometric/" "" "sin, cos, tan, asin, acos," "" trig(3M)
.xx "intrinsic function." "" "sin, dsin, csin: Fortran sine" "" sin(3F)
.xx "" "sin, dsin, csin: Fortran" "sine intrinsic function." "" sin(3F)
.xx "" "/dsinh: Fortran hyperbolic" "sine intrinsic function." "" sinh(3F)
.xx "functions." "" "sinh, cosh, tanh: hyperbolic" "" sinh(3M)
.xx "hyperbolic sine intrinsic/" "" "sinh, dsinh: Fortran" "" sinh(3F)
.xx "common object files." "" "size: print section sizes of" "" size(1)
.xx "files." "" "size: print sizes of object" "" size.pdp(1)
.xx "" "size: print section" "sizes of common object files." "" size(1)
.xx "" "size: print" "sizes of object files." "" size.pdp(1)
.xx "" "" "sky: obtain ephemerides." "" sky(6)
.xx "an interval." "" "sleep: suspend execution for" "" sleep(1)
.xx "interval." "" "sleep: suspend execution for" "" sleep(3C)
.xx "" "documents, view graphs, and" "slides." "mmt, mvt: typeset" mmt(1)
.xx "" "typesetting view graphs and" "slides." "/macro package for" mv(5)
.xx "current/" "ttyslot: find the" "slot in the utmp file of the" "" ttyslot(3C)
.xx "" "spline: interpolate" "smooth curve." "" spline(1G)
.xx "" "int, ifix, idint, real, float," "sngl, dble, cmplx, dcmplx,/" "" ftype(3F)
.xx "" "" "sno: SNOBOL interpreter." "" sno(1)
.xx "" "sno:" "SNOBOL interpreter." "" sno(1)
.xx "" "ssignal, gsignal:" "software signals." "" ssignal(3C)
.xx "" "sort:" "sort and/or merge files." "" sort(1)
.xx "" "qsort: quicker" "sort." "" qsort(3C)
.xx "" "" "sort: sort and/or merge files." "" sort(1)
.xx "" "tsort: topological" "sort." "" tsort(1)
.xx "" "or reject lines common to two" "sorted files." "comm: select" comm(1)
.xx "object file." "list: produce C" "source listing from 3B20S" "" list(1)
.xx "" "brk, sbrk: change data segment" "space allocation." "" brk(2)
.xx "terminal." "ct:" "spawn getty to a remote" "" ct(1C)
.xx "" "sys3b: 3B20S" "specific system calls." "" sys3b(2)
.xx "" "fspec: format" "specification in text files." "" fspec(4)
.xx "receipt of a system/" "signal:" "specify Fortran action on" "" signal(3F)
.xx "receipt of a signal." "signal:" "specify what to do upon" "" signal(2)
.xx "used by getty." "gettydefs:" "speed and terminal settings" "" gettydefs(4)
.xx "hashcheck: find spelling/" "" "spell, hashmake, spellin," "" spell(1)
.xx "spelling/" "spell, hashmake," "spellin, hashcheck: find" "" spell(1)
.xx "" "spellin, hashcheck: find" "spelling errors." "/hashmake," spell(1)
.xx "curve." "" "spline: interpolate smooth" "" spline(1G)
.xx "" "split:" "split a file into pieces." "" split(1)
.xx "" "csplit: context" "split." "" csplit(1)
.xx "files." "fsplit:" "split f77, ratfor, or ef\&l" "" fsplit(1)
.xx "pieces." "" "split: split a file into" "" split(1)
.xx "" "lpr: line printer" "spooler." "" lpr(1)
.xx "" "vpr: Versatec printer" "spooler." "" vpr(1)
.xx "output." "printf, fprintf," "sprintf: print formatted" "" printf(3S)
.xx "numeric data in a machine/" "" "sputl, sgetl: access long" "" sputl(3X)
.xx "square root intrinsic/" "" "sqrt, dsqrt, csqrt: Fortran" "" sqrt(3F)
.xx "power,/" "exp, log, log10, pow," "sqrt: exponential, logarithm," "" exp(3M)
.xx "" "exponential, logarithm, power," "square root functions." "/sqrt:" exp(3M)
.xx "" "sqrt, dsqrt, csqrt: Fortran" "square root intrinsic/" "" sqrt(3F)
.xx "random-number generator." "" "srand, rand: Fortran uniform" "" rand(3F)
.xx "generator." "rand," "srand: simple random-number" "" rand(3C)
.xx "" "/nrand48, mrand48, jrand48," "srand48, seed48, lcong48:/" "" drand48(3C)
.xx "input." "scanf, fscanf," "sscanf: convert formatted" "" scanf(3S)
.xx "signals." "" "ssignal, gsignal: software" "" ssignal(3C)
.xx "" "scc: C compiler for" "stand-alone programs." "" scc(1)
.xx "package." "stdio:" "standard buffered input/output" "" stdio(3S)
.xx "communication/" "stdipc:" "standard interprocess" "" stdipc(3C)
.xx "" "sh, rsh: shell, the" "standard/restricted command/" "" sh(1)
.xx "system call." "" "stat: data returned by stat" "" stat(5)
.xx "" "" "stat, fstat: get file status." "" stat(2)
.xx "useful with graphical/" "" "stat: statistical network" "" stat(1G)
.xx "" "stat: data returned by" "stat system call." "" stat(5)
.xx "with graphical/" "stat:" "statistical network useful" "" stat(1G)
.xx "" "ustat: get file system" "statistics." "" ustat(2)
.xx "" "status report and interactive" "status console." "rjestat: RJE" rjestat(1C)
.xx "" "lpstat: print LP" "status information." "" lpstat(1)
.xx "" "feof, clearerr, fileno: stream" "status inquiries." "ferror," ferror(3S)
.xx "control." "uustat: uucp" "status inquiry and job" "" uustat(1C)
.xx "" "communication facilities" "status." "/report inter-process" ipcs(1)
.xx "" "nscstat: query the operation" "status of the NSC network." "" nscstat(1C)
.xx "" "ps: report process" "status." "" ps(1)
.xx "status console." "rjestat: RJE" "status report and interactive" "" rjestat(1C)
.xx "" "stat, fstat: get file" "status." "" stat(2)
.xx "" "terminal facilities" "status." "/report synchronous" ststat(1)
.xx "input/output package." "" "stdio: standard buffered" "" stdio(3S)
.xx "communication package." "" "stdipc: standard interprocess" "" stdipc(3C)
.xx "" "" "stime: set time." "" stime(2)
.xx "synchronous terminal." "" "stlogin: sign on to" "" stlogin(1)
.xx "" "wait for child process to" "stop or terminate." "wait:" wait(2)
.xx "strncmp, strcpy, strncpy,/" "" "strcat, strncat, strcmp," "" string(3C)
.xx "" "/strcpy, strncpy, strlen," "strchr, strrchr, strpbrk,/" "" string(3C)
.xx "strncpy,/" "strcat, strncat," "strcmp, strncmp, strcpy," "" string(3C)
.xx "" "/strncat, strcmp, strncmp," "strcpy, strncpy, strlen,/" "" string(3C)
.xx "" "/strrchr, strpbrk, strspn," "strcspn, strtok: string/" "" string(3C)
.xx "" "sed:" "stream editor." "" sed(1)
.xx "" "fflush: close or flush a" "stream." "fclose," fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)
.xx "" "reposition a file pointer in a" "stream." "fseek, rewind, ftell:" fseek(3S)
.xx "" "get character or word from" "stream." "/getchar, fgetc, getw:" getc(3S)
.xx "" "fgets: get a string from a" "stream." "gets," gets(3S)
.xx "" "put character or word on a" "stream." "/putchar, fputc, putw:" putc(3S)
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)
.xx "" "setbuf: assign buffering to a" "stream." "" setbuf(3S)
.xx "" "/feof, clearerr, fileno:" "stream status inquiries." "" ferror(3S)
.xx "" "push character back into input" "stream." "ungetc:" ungetc(3S)
.xx "" "long integer and base-64 ASCII" "string." "/l64a: convert between" a64l(3C)
.xx "" "convert date and time to" "string." "/asctime, tzset:" ctime(3C)
.xx "" "floating-point number to" "string." "/fcvt, gcvt: convert" ecvt(3C)
.xx "" "gps: graphical primitive" "string, format of graphical/" "" gps(4)
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)
.xx "" "len: return length of Fortran" "string." "" len(3F)
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)
.xx "" "strspn, strcspn, strtok:" "string operations." "/strpbrk," string(3C)
.xx "number." "atof: convert ASCII" "string to floating-point" "" atof(3C)
.xx "" "strtol, atol, atoi: convert" "string to integer." "" strtol(3C)
.xx "relocation bits." "" "strip: remove symbols and" "" strip.pdp(1)
.xx "number information from a/" "" "strip: strip symbol and line" "" strip(1)
.xx "information from a/" "strip:" "strip symbol and line number" "" strip(1)
.xx "" "/strncmp, strcpy, strncpy," "strlen, strchr, strrchr,/" "" string(3C)
.xx "strcpy, strncpy,/" "strcat," "strncat, strcmp, strncmp," "" string(3C)
.xx "" "strcat, strncat, strcmp," "strncmp, strcpy, strncpy,/" "" string(3C)
.xx "" "/strcmp, strncmp, strcpy," "strncpy, strlen, strchr,/" "" string(3C)
.xx "" "/strlen, strchr, strrchr," "strpbrk, strspn, strcspn,/" "" string(3C)
.xx "" "/strncpy, strlen, strchr," "strrchr, strpbrk, strspn,/" "" string(3C)
.xx "" "/strchr, strrchr, strpbrk," "strspn, strcspn, strtok:/" "" string(3C)
.xx "" "/strpbrk, strspn, strcspn," "strtok: string operations." "" string(3C)
.xx "string to integer." "" "strtol, atol, atoi: convert" "" strtol(3C)
.xx "terminal facilities status." "" "ststat: report synchronous" "" ststat(1)
.xx "terminal." "" "stty: set the options for a" "" stty(1)
.xx "another user." "" "su: become super-user or" "" su(1)
.xx "" "gath: gather files and/or" "submit RJE jobs." "send," send(1C)
.xx "" "intro: introduction to" "subroutines and libraries." "" intro(3)
.xx "" "plot: graphics interface" "subroutines." "" plot(3X)
.xx "" "/same lines of several files or" "subsequent lines of one file." "" paste(1)
.xx "" "return location of Fortran" "substring." "index:" index(3F)
.xx "count of a file." "" "sum: print checksum and block" "" sum(1)
.xx "" "du:" "summarize disk usage." "" du(1)
.xx "" "sync: update the" "super block." "" sync(1)
.xx "" "sync: update" "super-block." "" sync(2)
.xx "" "su: become" "super-user or another user." "" su(1)
.xx "interval." "sleep:" "suspend execution for an" "" sleep(1)
.xx "interval." "sleep:" "suspend execution for" "" sleep(3C)
.xx "" "pause:" "suspend process until signal." "" pause(2)
.xx "" "" "swab: swap bytes." "" swab(3C)
.xx "" "swab:" "swap bytes." "" swab(3C)
.xx "information from/" "strip: strip" "symbol and line number" "" strip(1)
.xx "object/" "/compute the index of a" "symbol table entry of a common" "" ldtbindex(3X)
.xx "" "ldtbread: read an indexed" "symbol table entry of a common/" "" ldtbread(3X)
.xx "" "syms: common object file" "symbol table format." "" syms(4)
.xx "object/" "ldtbseek: seek to the" "symbol table of a common" "" ldtbseek(3X)
.xx "" "sdb:" "symbolic debugger." "" sdb(1)
.xx "" "strip: remove" "symbols and relocation bits." "" strip.pdp(1)
.xx "symbol table format." "" "syms: common object file" "" syms(4)
.xx "" "" "sync: update super-block." "" sync(2)
.xx "" "" "sync: update the super block." "" sync(1)
.xx "" "concatenate and print files on" "synchronous printer." "scat:" scat(1)
.xx "facilities/" "ststat: report" "synchronous terminal" "" ststat(1)
.xx "" "stlogin: sign on to" "synchronous terminal." "" stlogin(1)
.xx "calls." "" "sys3b: 3B20S specific system" "" sys3b(2)
.xx "error/" "perror, errno," "sys_errlist, sys_nerr: system" "" perror(3C)
.xx "" "perror, errno, sys_errlist," "sys_nerr: system error/" "" perror(3C)
.xx "" "/compute the index of a symbol" "table entry of a common object/" "" ldtbindex(3X)
.xx "file." "/read an indexed symbol" "table entry of a common object" "" ldtbread(3X)
.xx "" "common object file symbol" "table format." "syms:" syms(4)
.xx "" "master device information" "table." "master:" master.dec(4)
.xx "" "master device information" "table." "master:" master.u3b(4)
.xx "" "mnttab: mounted file system" "table." "" mnttab(4)
.xx "" "ldtbseek: seek to the symbol" "table of a common object file." "" ldtbseek(3X)
.xx "" "toc: graphical" "table of contents routines." "" toc(1G)
.xx "" "tbl: format" "tables for nroff or troff." "" tbl(1)
.xx "" "hdestroy: manage hash search" "tables." "hsearch, hcreate," hsearch(3C)
.xx "" "tabs: set" "tabs on a terminal." "" tabs(1)
.xx "" "" "tabs: set tabs on a terminal." "" tabs(1)
.xx "a file." "" "tail: deliver the last part of" "" tail(1)
.xx "trigonometric/" "sin, cos," "tan, asin, acos, atan, atan2:" "" trig(3M)
.xx "intrinsic function." "" "tan, dtan: Fortran tangent" "" tan(3F)
.xx "" "tan, dtan: Fortran" "tangent intrinsic function." "" tan(3F)
.xx "" "/dtanh: Fortran hyperbolic" "tangent intrinsic function." "" tanh(3F)
.xx "hyperbolic tangent intrinsic/" "" "tanh, dtanh: Fortran" "" tanh(3F)
.xx "" "sinh, cosh," "tanh: hyperbolic functions." "" sinh(3M)
.xx "" "hpio: HP 2645A terminal" "tape file archiver." "" hpio(1)
.xx "" "tar:" "tape file archiver." "" tar(1)
.xx "" "" "tar: tape file archiver." "" tar(1)
.xx "" "programs for simple lexical" "tasks." "lex: generate" lex(1)
.xx "" "deroff: remove nroff/troff," "tbl, and eqn constructs." "" deroff(1)
.xx "or troff." "" "tbl: format tables for nroff" "" tbl(1)
.xx "" "" "tc: phototypesetter simulator." "" tc(1)
.xx "" "hpd, erase, hardcopy, tekset," "td: graphical device routines/" "" gdev(1G)
.xx "search trees." "tsearch," "tdelete, twalk: manage binary" "" tsearch(3C)
.xx "" "" "tee: pipe fitting." "" tee(1)
.xx "" "hpd, erase, hardcopy," "tekset, td: graphical device/" "" gdev(1G)
.xx "" "4014: paginator for the" "Tektronix 4014 terminal." "" 4014(1)
.xx "temporary file." "tmpnam," "tempnam: create a name for a" "" tmpnam(3S)
.xx "" "tmpfile: create a" "temporary file." "" tmpfile(3S)
.xx "" "tempnam: create a name for a" "temporary file." "tmpnam," tmpnam(3S)
.xx "terminals." "" "term: conventional names for" "" term(5)
.xx "" "for the Tektronix 4014" "terminal." "4014: paginator" 4014(1)
.xx "" "functions of the DASI 450" "terminal." "450: handle special" 450(1)
.xx "" "ct: spawn getty to a remote" "terminal." "" ct(1C)
.xx "" "generate file name for" "terminal." "ctermid:" ctermid(3S)
.xx "" "ststat: report synchronous" "terminal facilities status." "" ststat(1)
.xx "" "greek: select" "terminal filter." "" greek(1)
.xx "" "dial: establish an out-going" "terminal line connection." "" dial(3C)
.xx "getty." "gettydefs: speed and" "terminal settings used by" "" gettydefs(4)
.xx "" "sign on to synchronous" "terminal." "stlogin:" stlogin(1)
.xx "" "stty: set the options for a" "terminal." "" stty(1)
.xx "" "tabs: set tabs on a" "terminal." "" tabs(1)
.xx "" "hpio: HP 2645A" "terminal tape file archiver." "" hpio(1)
.xx "" "isatty: find name of a" "terminal." "ttyname," ttyname(3C)
.xx "" "functions of DASI 300 and 300s" "terminals." "/handle special" 300(1)
.xx "" "of HP 2640 and 2621-series" "terminals." "/special functions" hp(1)
.xx "" "tty: get the" "terminal's name." "" tty(1)
.xx "" "se: screen editor for video" "terminals." "" se(1)
.xx "" "term: conventional names for" "terminals." "" term(5)
.xx "" "kill:" "terminate a process." "" kill(1)
.xx "" "abort:" "terminate Fortran program." "" abort(3F)
.xx "" "exit, _exit:" "terminate process." "" exit(2)
.xx "" "for child process to stop or" "terminate." "wait: wait" wait(2)
.xx "command." "" "test: condition evaluation" "" test(1)
.xx "" "quiz:" "test your knowledge." "" quiz(6)
.xx "" "ed, red:" "text editor." "" ed(1)
.xx "" "change the format of a" "text file." "newform:" newform(1)
.xx "" "fspec: format specification in" "text files." "" fspec(4)
.xx "" "/checkeq: format mathematical" "text for nroff or troff." "" eqn(1)
.xx "" "prepare constant-width" "text for troff." "cw, checkcw:" cw(1)
.xx "" "nroff: format" "text." "" nroff(1)
.xx "" "plock: lock process," "text, or data in memory." "" plock(2)
.xx "" "troff: typeset" "text." "" troff(1)
.xx "" "ttt, cubic:" "tic-tac-toe." "" ttt(6)
.xx "data and system/" "timex:" "time a command; report process" "" timex(1)
.xx "" "time:" "time a command." "" time(1)
.xx "" "mclock: return Fortran" "time accounting." "" mclock(3F)
.xx "" "" "time: get time." "" time(2)
.xx "" "profil: execution" "time profile." "" profil(2)
.xx "" "up an environment at login" "time." "profile: setting" profile(4)
.xx "" "stime: set" "time." "" stime(2)
.xx "" "" "time: time a command." "" time(1)
.xx "" "time: get" "time." "" time(2)
.xx "" "tzset: convert date and" "time to string." "/asctime," ctime(3C)
.xx "" "clock: report CPU" "time used." "" clock(3C)
.xx "process times." "" "times: get process and child" "" times(2)
.xx "" "update access and modification" "times of a file." "touch:" touch(1)
.xx "" "get process and child process" "times." "times:" times(2)
.xx "" "file access and modification" "times." "utime: set" utime(2)
.xx "process data and system/" "" "timex: time a command; report" "" timex(1)
.xx "file." "" "tmpfile: create a temporary" "" tmpfile(3S)
.xx "for a temporary file." "" "tmpnam, tempnam: create a name" "" tmpnam(3S)
.xx "" "/tolower, _toupper, _tolower," "toascii: translate characters." "" conv(3C)
.xx "contents routines." "" "toc: graphical table of" "" toc(1G)
.xx "" "popen, pclose: initiate pipe" "to/from a process." "" popen(3S)
.xx "" "toupper, tolower, _toupper," "_tolower, toascii: translate/" "" conv(3C)
.xx "toascii: translate/" "toupper," "tolower, _toupper, _tolower," "" conv(3C)
.xx "" "tsort:" "topological sort." "" tsort(1)
.xx "modification times of a file." "" "touch: update access and" "" touch(1)
.xx "translate/" "toupper, tolower," "_toupper, _tolower, toascii:" "" conv(3C)
.xx "_tolower, toascii: translate/" "" "toupper, tolower, _toupper," "" conv(3C)
.xx "" "" "tplot: graphics filters." "" tplot(1G)
.xx "" "" "tr: translate characters." "" tr(1)
.xx "" "ptrace: process" "trace." "" ptrace(2)
.xx "" "sign, isign, dsign: Fortran" "transfer-of-sign intrinsic/" "" sign(3F)
.xx "" "/_toupper, _tolower, toascii:" "translate characters." "" conv(3C)
.xx "" "tr:" "translate characters." "" tr(1)
.xx "" "ftw: walk a file" "tree." "" ftw(3C)
.xx "" "twalk: manage binary search" "trees." "tsearch, tdelete," tsearch(3C)
.xx "" "tan, asin, acos, atan, atan2:" "trigonometric functions." "/cos," trig(3M)
.xx "" "constant-width text for" "troff." "cw, checkcw: prepare" cw(1)
.xx "" "mathematical text for nroff or" "troff." "/neqn, checkeq: format" eqn(1)
.xx "typesetting view graphs/" "mv: a" "troff macro package for" "" mv(5)
.xx "" "format tables for nroff or" "troff." "tbl:" tbl(1)
.xx "" "" "troff: typeset text." "" troff(1)
.xx "" "" "trouble: log a trouble report." "" trouble(1)
.xx "" "trouble: log a" "trouble report." "" trouble(1)
.xx "values." "" "true, false: provide truth" "" true(1)
.xx "" "pdp11, u3b, u3b5, vax: provide" "truth value about your/" "" machid(1)
.xx "" "true, false: provide" "truth values." "" true(1)
.xx "manage binary search trees." "" "tsearch, tdelete, twalk:" "" tsearch(3C)
.xx "" "" "tsort: topological sort." "" tsort(1)
.xx "" "" "ttt, cubic: tic-tac-toe." "" ttt(6)
.xx "" "" "tty: get the terminal's name." "" tty(1)
.xx "" "graphics for the extended" "TTY-37 type-box." "greek:" greek(5)
.xx "a terminal." "" "ttyname, isatty: find name of" "" ttyname(3C)
.xx "utmp file of the current/" "" "ttyslot: find the slot in the" "" ttyslot(3C)
.xx "trees." "tsearch, tdelete," "twalk: manage binary search" "" tsearch(3C)
.xx "" "ichar, char: explicit Fortran" "type conversion." "/dcmplx," ftype(3F)
.xx "" "file: determine file" "type." "" file(1)
.xx "" "value about your processor" "type." "/vax: provide truth" machid(1)
.xx "" "for the extended TTY-37" "type-box." "greek: graphics" greek(5)
.xx "types." "" "types: primitive system data" "" types(5)
.xx "" "types: primitive system data" "types." "" types(5)
.xx "graphs, and slides." "mmt, mvt:" "typeset documents, view" "" mmt(1)
.xx "" "troff:" "typeset text." "" troff(1)
.xx "" "mv: a troff macro package for" "typesetting view graphs and/" "" mv(5)
.xx "" "/localtime, gmtime, asctime," "tzset: convert date and time/" "" ctime(3C)
.xx "value about your/" "pdp11," "u3b, u3b5, vax: provide truth" "" machid(1)
.xx "about your/" "pdp11, u3b," "u3b5, vax: provide truth value" "" machid(1)
.xx "" "getpw: get name from" "UID." "" getpw(3C)
.xx "limits." "" "ulimit: get and set user" "" ulimit(2)
.xx "creation mask." "" "umask: set and get file" "" umask(2)
.xx "mask." "" "umask: set file-creation mode" "" umask(1)
.xx "" "" "umount: unmount a file system." "" umount(2)
.xx "UNIX system." "" "uname: get name of current" "" uname(2)
.xx "UNIX system." "" "uname: print name of current" "" uname(1)
.xx "file." "unget:" "undo a previous get of an SCCS" "" unget(1)
.xx "an SCCS file." "" "unget: undo a previous get of" "" unget(1)
.xx "into input stream." "" "ungetc: push character back" "" ungetc(3S)
.xx "" "srand, rand: Fortran" "uniform random-number/" "" rand(3F)
.xx "" "/seed48, lcong48: generate" "uniformly distributed/" "" drand48(3C)
.xx "a file." "" "uniq: report repeated lines in" "" uniq(1)
.xx "" "mktemp: make a" "unique file name." "" mktemp(3C)
.xx "" "" "units: conversion program." "" units(1)
.xx "" "uuto, uupick: public" "UNIX-to-UNIX file copy." "" uuto(1C)
.xx "entry." "" "unlink: remove directory" "" unlink(2)
.xx "" "umount:" "unmount a file system." "" umount(2)
.xx "files." "pack, pcat," "unpack: compress and expand" "" pack(1)
.xx "times of a file." "touch:" "update access and modification" "" touch(1)
.xx "of programs." "make: maintain," "update, and regenerate groups" "" make(1)
.xx "" "lsearch: linear search and" "update." "" lsearch(3C)
.xx "" "sync:" "update super-block." "" sync(2)
.xx "" "sync:" "update the super block." "" sync(1)
.xx "" "du: summarize disk" "usage." "" du(1)
.xx "" "stat: statistical network" "useful with graphical/" "" stat(1G)
.xx "" "id: print" "user and group IDs and names." "" id(1)
.xx "" "setuid, setgid: set" "user and group IDs." "" setuid(2)
.xx "" "character login name of the" "user." "cuserid: get" cuserid(3S)
.xx "" "/getgid, getegid: get real" "user, effective user, real/" "" getuid(2)
.xx "" "environ:" "user environment." "" environ(5)
.xx "" "gcosmail: send mail to HIS" "user." "" gcosmail(1C)
.xx "" "ulimit: get and set" "user limits." "" ulimit(2)
.xx "" "logname: return login name of" "user." "" logname(3X)
.xx "" "/get real user, effective" "user, real group, and/" "" getuid(2)
.xx "" "become super-user or another" "user." "su:" su(1)
.xx "" "the utmp file of the current" "user." "/find the slot in" ttyslot(3C)
.xx "" "write: write to another" "user." "" write(1)
.xx "" "mail, rmail: send mail to" "users or read mail." "" mail(1)
.xx "statistics." "" "ustat: get file system" "" ustat(2)
.xx "" "gutil: graphical" "utilities." "" gutil(1G)
.xx "modification times." "" "utime: set file access and" "" utime(2)
.xx "" "utmp, wtmp:" "utmp and wtmp entry formats." "" utmp(4)
.xx "" "endutent, utmpname: access" "utmp file entry." "/setutent," getut(3C)
.xx "" "ttyslot: find the slot in the" "utmp file of the current user." "" ttyslot(3C)
.xx "entry formats." "" "utmp, wtmp: utmp and wtmp" "" utmp(4)
.xx "" "/pututline, setutent, endutent," "utmpname: access utmp file/" "" getut(3C)
.xx "control." "uustat:" "uucp status inquiry and job" "" uustat(1C)
.xx "unix copy." "" "uucp, uulog, uuname: unix to" "" uucp(1C)
.xx "copy." "uucp," "uulog, uuname: unix to unix" "" uucp(1C)
.xx "" "uucp, uulog," "uuname: unix to unix copy." "" uucp(1C)
.xx "file copy." "uuto," "uupick: public UNIX-to-UNIX" "" uuto(1C)
.xx "and job control." "" "uustat: uucp status inquiry" "" uustat(1C)
.xx "UNIX-to-UNIX file copy." "" "uuto, uupick: public" "" uuto(1C)
.xx "execution." "" "uux: unix to unix command" "" uux(1C)
.xx "" "" "val: validate SCCS file." "" val(1)
.xx "" "val:" "validate SCCS file." "" val(1)
.xx "" "/u3b, u3b5, vax: provide truth" "value about your processor/" "" machid(1)
.xx "" "abs: return integer absolute" "value." "" abs(3C)
.xx "" "cabs, zabs: Fortran absolute" "value." "abs, iabs, dabs," abs(3F)
.xx "" "getenv: return" "value for environment name." "" getenv(3C)
.xx "" "ceiling, remainder, absolute" "value functions." "/fabs: floor," floor(3M)
.xx "" "true, false: provide truth" "values." "" true(1)
.xx "" "return Fortran environment" "variable." "getenv:" getenv(3F)
.xx "your/" "pdp11, u3b, u3b5," "vax: provide truth value about" "" machid(1)
.xx "" "" "vc: version control." "" vc(1)
.xx "" "option letter from argument" "vector." "getopt: get" getopt(3C)
.xx "" "assert:" "verify program assertion." "" assert(3X)
.xx "" "vpr:" "Versatec printer spooler." "" vpr(1)
.xx "" "vc:" "version control." "" vc(1)
.xx "" "get: get a" "version of an SCCS file." "" get(1)
.xx "" "sccsdiff: compare two" "versions of an SCCS file." "" sccsdiff(1)
.xx "" "se: screen editor for" "video terminals." "" se(1)
.xx "" "mmt, mvt: typeset documents," "view graphs, and slides." "" mmt(1)
.xx "" "macro package for typesetting" "view graphs and slides." "/troff" mv(5)
.xx "" "file system: format of system" "volume." "" fs(4)
.xx "" "" "vpr: Versatec printer spooler." "" vpr(1)
.xx "process." "" "wait: await completion of" "" wait(1)
.xx "or terminate." "wait:" "wait for child process to stop" "" wait(2)
.xx "to stop or terminate." "" "wait: wait for child process" "" wait(2)
.xx "" "ftw:" "walk a file tree." "" ftw(3C)
.xx "" "" "wc: word count." "" wc(1)
.xx "" "" "what: identify SCCS files." "" what(1)
.xx "signal." "signal: specify" "what to do upon receipt of a" "" signal(2)
.xx "" "who:" "who is on the system." "" who(1)
.xx "" "" "who: who is on the system." "" who(1)
.xx "" "cd: change" "working directory." "" cd(1)
.xx "" "chdir: change" "working directory." "" chdir(2)
.xx "" "get path-name of current" "working directory." "getcwd:" getcwd(3C)
.xx "" "pwd:" "working directory name." "" pwd(1)
.xx "" "write:" "write on a file." "" write(2)
.xx "" "putpwent:" "write password file entry." "" putpwent(3C)
.xx "" "write:" "write to another user." "" write(1)
.xx "" "" "write: write on a file." "" write(2)
.xx "" "" "write: write to another user." "" write(1)
.xx "" "open: open for reading or" "writing." "" open(2)
.xx "" "utmp, wtmp: utmp and" "wtmp entry formats." "" utmp(4)
.xx "formats." "utmp," "wtmp: utmp and wtmp entry" "" utmp(4)
.xx "hunt-the-wumpus." "" "wump: the game of" "" wump(6)
.xx "install a BX.25 link." "" "x25alnk, x25ilnk: attach or" "" x25alnk(3C)
.xx "link." "" "x25clnk: change over a BX.25" "" x25clnk(3C)
.xx "BX.25 link." "x25hlnk," "x25dlnk: halt or detach a" "" x25hlnk(3C)
.xx "detach a BX.25 link." "" "x25hlnk, x25dlnk: halt or" "" x25hlnk(3C)
.xx "BX.25 link." "x25alnk," "x25ilnk: attach or install a" "" x25alnk(3C)
.xx "remove a PVC on a link." "" "x25ipvc, x25rpvc: install or" "" x25ipvc(3C)
.xx "PVC on a link." "x25ipvc," "x25rpvc: install or remove a" "" x25ipvc(3C)
.xx "list(s) and execute command." "" "xargs: construct argument" "" xargs(1)
.xx "Fortran bitwise/" "and, or," "xor, not, lshift, rshift:" "" bool(3F)
.xx "" "j0, j1, jn," "y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: Bessel functions." "" bessel(3M)
.xx "compiler-compiler." "" "yacc: yet another" "" yacc(1)
.xx "" "j0, j1, jn, y0, y1," "yn: Bessel functions." "" bessel(3M)
.xx "" "abs, iabs, dabs, cabs," "zabs: Fortran absolute value." "" abs(3F)
