.xx "" "/functions of HP 2640 and" "2621-series terminals." "" hp(1)
.xx "" "handle special functions of HP" "2640 and 2621-series/" "hp:" hp(1)
.xx "archiver." "hpio: HP" "2645A terminal tape file" "" hpio(1)
.xx "functions of DASI 300 and/" "" "300, 300s: handle special" "" 300(1)
.xx "" "/special functions of DASI" "300 and 300s terminals." "" 300(1)
.xx "of DASI 300 and 300s/" "300," "300s: handle special functions" "" 300(1)
.xx "" "functions of DASI 300 and" "300s terminals." "/special" 300(1)
.xx "" "l3tol, ltol3: convert between" "3-byte integers and long/" "" l3tol(3C)
.xx "comparison." "diff3:" "3-way differential file" "" diff3(1)
.xx "TEKTRONIX 4014 terminal." "" "4014: paginator for the" "" 4014(1)
.xx "" "paginator for the TEKTRONIX" "4014 terminal." "4014:" 4014(1)
.xx "of the DASI 450 terminal." "" "450: handle special functions" "" 450(1)
.xx "" "special functions of the DASI" "450 terminal." "450: handle" 450(1)
.xx "" "f77: FORTRAN" "77 compiler." "" f77(1)
.xx "long integer and base-64/" "" "a64l, l64a: convert between" "" a64l(3C)
.xx "" "" "abort: generate an IOT fault." "" abort(3C)
.xx "program." "" "abort: terminate FORTRAN" "" abort(3F)
.xx "FORTRAN absolute value." "" "abs, iabs, dabs, cabs, zabs:" "" abs(3F)
.xx "value." "" "abs: return integer absolute" "" abs(3C)
.xx "" "adb:" "absolute debugger." "" adb(1)
.xx "" "abs: return integer" "absolute value." "" abs(3C)
.xx "" "dabs, cabs, zabs: FORTRAN" "absolute value." "abs, iabs," abs(3F)
.xx "" "/floor, ceiling, remainder," "absolute value functions." "" floor(3M)
.xx "LP requests." "" "accept, reject: allow/prevent" "" accept(1M)
.xx "of a file." "touch: update" "access and modification times" "" touch(1)
.xx "" "utime: set file" "access and modification times." "" utime(2)
.xx "accessibility of a file." "" "access: determine" "" access(2)
.xx "commands." "graphics:" "access graphical and numerical" "" graphics(1G)
.xx "" "sputl, sgetl:" "access long integer data in a/" "" sputl(3X)
.xx "" "sadp: disk" "access profiler." "" sadp(1M)
.xx "" "ldfcn: common object file" "access routines." "" ldfcn(4)
.xx "" "copy file systems for optimal" "access time." "dcopy:" dcopy(1M)
.xx "" "/setutent, endutent, utmpname:" "access utmp file entry." "" getut(3C)
.xx "" "access: determine" "accessibility of a file." "" access(2)
.xx "" "enable or disable process" "accounting." "acct:" acct(2)
.xx "" "acctcon2: connect-time" "accounting." "acctcon1," acctcon(1M)
.xx "" "acctprc1, acctprc2: process" "accounting." "" acctprc(1M)
.xx "" "turnacct: shell procedures for" "accounting." "/startup," acctsh(1M)
.xx "" "/accton, acctwtmp: overview of" "accounting and miscellaneous/" "" acct(1M)
.xx "" "accounting and miscellaneous" "accounting commands." "/of" acct(1M)
.xx "" "diskusg - generate disk" "accounting data by user ID." "" diskusg(1M)
.xx "" "acct: per-process" "accounting file format." "" acct(4)
.xx "" "search and print process" "accounting file(s)." "acctcom:" acctcom(1)
.xx "" "acctmerg: merge or add total" "accounting files." "" acctmerg(1M)
.xx "" "mclock: return FORTRAN time" "accounting." "" mclock(3F)
.xx "" "summary from per-process" "accounting records." "/command" acctcms(1M)
.xx "" "wtmpfix: manipulate connect" "accounting records." "fwtmp," fwtmp(1M)
.xx "" "runacct: run daily" "accounting." "" runacct(1M)
.xx "process accounting." "" "acct: enable or disable" "" acct(2)
.xx "file format." "" "acct: per-process accounting" "" acct(4)
.xx "per-process accounting/" "" "acctcms: command summary from" "" acctcms(1M)
.xx "process accounting file(s)." "" "acctcom: search and print" "" acctcom(1)
.xx "connect-time accounting." "" "acctcon1, acctcon2:" "" acctcon(1M)
.xx "accounting." "acctcon1," "acctcon2: connect-time" "" acctcon(1M)
.xx "acctwtmp: overview of/" "" "acctdisk, acctdusg, accton," "" acct(1M)
.xx "overview of/" "acctdisk," "acctdusg, accton, acctwtmp:" "" acct(1M)
.xx "accounting files." "" "acctmerg: merge or add total" "" acctmerg(1M)
.xx "" "acctdisk, acctdusg," "accton, acctwtmp: overview of/" "" acct(1M)
.xx "accounting." "" "acctprc1, acctprc2: process" "" acctprc(1M)
.xx "" "acctprc1," "acctprc2: process accounting." "" acctprc(1M)
.xx "" "acctdisk, acctdusg, accton," "acctwtmp: overview of/" "" acct(1M)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2:/" "" trig(3M)
.xx "intrinsic function." "" "acos, dacos: FORTRAN arccosine" "" acos(3F)
.xx "" "killall: kill all" "active processes." "" killall(1M)
.xx "" "sag: system" "activity graph." "" sag(1G)
.xx "" "sa1, sa2, sadc: system" "activity report package." "" sar(1M)
.xx "" "sar: system" "activity reporter." "" sar(1)
.xx "" "current SCCS file editing" "activity." "sact: print" sact(1)
.xx "" "report process data and system" "activity." "/time a command;" timex(1)
.xx "" "" "adb: absolute debugger." "" adb(1)
.xx "" "acctmerg: merge or" "add total accounting files." "" acctmerg(1M)
.xx "" "putenv: change or" "add value to environment." "" putenv(3C)
.xx "SCCS files." "" "admin: create and administer" "" admin(1)
.xx "" "admin: create and" "administer SCCS files." "" admin(1)
.xx "imaginary part of complex/" "" "aimag, dimag: FORTRAN" "" aimag(3F)
.xx "part intrinsic function." "" "aint, dint: FORTRAN integer" "" aint(3F)
.xx "" "alarm: set a process" "alarm clock." "" alarm(2)
.xx "clock." "" "alarm: set a process alarm" "" alarm(2)
.xx "" "a one way hashing encryption" "algorithm." "crypt, encrypt:" crypt(3C)
.xx "" "change data segment space" "allocation." "brk, sbrk:" brk(2)
.xx "" "realloc, calloc: main memory" "allocator." "malloc, free," malloc(3C)
.xx "" "mallinfo: fast main memory" "allocator." "/calloc, mallopt," malloc(3X)
.xx "" "accept, reject:" "allow/prevent LP requests." "" accept(1M)
.xx "natural logarithm/" "log," "alog, dlog, clog: FORTRAN" "" log(3F)
.xx "logarithm intrinsic/" "log10," "alog10, dlog10: FORTRAN common" "" log10(3F)
.xx "FORTRAN/" "max, max0," "amax0, max1, amax1, dmax1:" "" max(3F)
.xx "" "max, max0, amax0, max1," "amax1, dmax1: FORTRAN/" "" max(3F)
.xx "FORTRAN/" "min, min0," "amin0, min1, amin1, dmin1:" "" min(3F)
.xx "" "min, min0, amin0, min1," "amin1, dmin1: FORTRAN/" "" min(3F)
.xx "remaindering intrinsic/" "mod," "amod, dmod: FORTRAN" "" mod(3F)
.xx "rshift: FORTRAN bitwise/" "" "and, or, xor, not, lshift," "" bool(3F)
.xx "" "sort: sort" "and/or merge files." "" sort(1)
.xx "" "send, gath: gather files" "and/or submit RJE jobs." "" send(1C)
.xx "FORTRAN nearest integer/" "" "anint, dnint, nint, idnint:" "" round(3F)
.xx "link editor output." "" "a.out: common assembler and" "" a.out(4)
.xx "" "introduction to commands and" "application programs." "intro:" intro(1)
.xx "" "maintenance commands and" "application programs." "/system" intro(1M)
.xx "maintainer for portable/" "" "ar: archive and library" "" ar(1)
.xx "format." "" "ar: common archive file" "" ar(4)
.xx "language." "bc:" "arbitrary-precision arithmetic" "" bc(1)
.xx "" "acos, dacos: FORTRAN" "arccosine intrinsic function." "" acos(3F)
.xx "for portable archives." "ar:" "archive and library maintainer" "" ar(1)
.xx "" "cpio: format of cpio" "archive." "" cpio(4)
.xx "" "ar: common" "archive file format." "" ar(4)
.xx "" "header of a member of an" "archive file." "/the archive" ldahread(3X)
.xx "an archive/" "ldahread: read the" "archive header of a member of" "" ldahread(3X)
.xx "" "HP 2645A terminal tape file" "archiver." "hpio:" hpio(1)
.xx "" "tar: tape file" "archiver." "" tar(1)
.xx "" "maintainer for portable" "archives." "/archive and library" ar(1)
.xx "" "cpio: copy file" "archives in and out." "" cpio(1)
.xx "" "asin, dasin: FORTRAN" "arcsine intrinsic function." "" asin(3F)
.xx "" "atan2, datan2: FORTRAN" "arctangent intrinsic function." "" atan2(3F)
.xx "" "atan, datan: FORTRAN" "arctangent intrinsic function." "" atan(3F)
.xx "" "imaginary part of complex" "argument." "/dimag: FORTRAN" aimag(3F)
.xx "" "return FORTRAN command-line" "argument." "getarg:" getarg(3F)
.xx "" "varargs: handle variable" "argument list." "" varargs(5)
.xx "" "formatted output of a varargs" "argument list." "/print" vprintf(3S)
.xx "" "formatted output of a varargs" "argument list." "/print" vprintf(3X)
.xx "command." "xargs: construct" "argument list(s) and execute" "" xargs(1)
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)
.xx "" "expr: evaluate" "arguments as an expression." "" expr(1)
.xx "" "echo: echo" "arguments." "" echo(1)
.xx "" "the number of command line" "arguments." "iargc: return" iargc(3F)
.xx "" "bc: arbitrary-precision" "arithmetic language." "" bc(1)
.xx "number facts." "" "arithmetic: provide drill in" "" arithmetic(6)
.xx "" "expr: evaluate arguments" "as an expression." "" expr(1)
.xx "" "" "as: common assembler." "" as(1)
.xx "characters." "asa: interpret" "ASA carriage control" "" asa(1)
.xx "control characters." "" "asa: interpret ASA carriage" "" asa(1)
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)
.xx "set." "" "ascii: map of ASCII character" "" ascii(5)
.xx "" "long integer and base-64" "ASCII string." "/convert between" a64l(3C)
.xx "and/" "ctime, localtime, gmtime," "asctime, tzset: convert date" "" ctime(3C)
.xx "trigonometric/" "sin, cos, tan," "asin, acos, atan, atan2:" "" trig(3M)
.xx "intrinsic function." "" "asin, dasin: FORTRAN arcsine" "" asin(3F)
.xx "" "help:" "ask for help." "" help(1)
.xx "output." "a.out: common" "assembler and link editor" "" a.out(4)
.xx "" "as: common" "assembler." "" as(1)
.xx "assertion." "" "assert: verify program" "" assert(3X)
.xx "" "assert: verify program" "assertion." "" assert(3X)
.xx "" "setbuf, setvbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "qasurvey: Quality" "Assurance Survey." "" qasurvey(1M)
.xx "" "sio - serial input/output" "asynchronous multiplexor." "" sio(7)
.xx "a later time." "" "at, batch: execute commands at" "" at(1)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric/" "" trig(3M)
.xx "arctangent intrinsic/" "" "atan, datan: FORTRAN" "" atan(3F)
.xx "arctangent intrinsic/" "" "atan2, datan2: FORTRAN" "" atan2(3F)
.xx "" "cos, tan, asin, acos, atan," "atan2: trigonometric/" "sin," trig(3M)
.xx "double-precision/" "strtod," "atof: convert string to" "" strtod(3C)
.xx "integer." "strtol, atol," "atoi: convert string to" "" strtol(3C)
.xx "integer." "strtol," "atol, atoi: convert string to" "" strtol(3C)
.xx "" "wait:" "await completion of process." "" wait(1)
.xx "processing language." "" "awk: pattern scanning and" "" awk(1)
.xx "executable files from UNIX/" "" "B5toGR: creates ROM monitor" "" 5toG(1M)
.xx "" "ungetc: push character" "back into input stream." "" ungetc(3S)
.xx "" "" "back: the game of backgammon." "" back(6)
.xx "" "back: the game of" "backgammon." "" back(6)
.xx "" "UNIX system file system" "backup." "/daily/weekly" filesave(1M)
.xx "" "finc: fast incremental" "backup." "" finc(1M)
.xx "" "frec: recover files from a" "backup tape." "" frec(1M)
.xx "" "" "banner: make posters." "" banner(1)
.xx "" "terminal capability data" "base." "terminfo:" terminfo(4)
.xx "" "between long integer and" "base-64 ASCII string." "/convert" a64l(3C)
.xx "" "(visual) display editor" "based on ex." "/screen-oriented" vi(1)
.xx "portions of path names." "" "basename, dirname: deliver" "" basename(1)
.xx "later time." "at," "batch: execute commands at a" "" at(1)
.xx "arithmetic language." "" "bc: arbitrary-precision" "" bc(1)
.xx "system initialization/" "brc," "bcheckrc, rc, powerfail:" "" brc(1M)
.xx "" "" "bdiff: big diff." "" bdiff(1)
.xx "" "cb: C program" "beautifier." "" cb(1)
.xx "" "j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)
.xx "" "" "bfs: big file scanner." "" bfs(1)
.xx "" "cpset: install object files in" "binary directories." "" cpset(1M)
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)
.xx "" "bsearch:" "binary search a sorted table." "" bsearch(3C)
.xx "" "tfind, tdelete, twalk: manage" "binary search trees." "tsearch," tsearch(3C)
.xx "" "/not, lshift, rshift: FORTRAN" "bitwise Boolean functions." "" bool(3F)
.xx "" "" "bj: the game of black jack." "" bj(6)
.xx "" "bj: the game of" "black jack." "" bj(6)
.xx "" "sum: print checksum and" "block count of a file." "" sum(1)
.xx "" "sync: update the super" "block." "" sync(1)
.xx "" "df: report number of free disk" "blocks." "" df(1M)
.xx "" "rshift: FORTRAN bitwise" "Boolean functions." "/lshift," bool(3F)
.xx "system initialization shell/" "" "brc, bcheckrc, rc, powerfail:" "" brc(1M)
.xx "space allocation." "" "brk, sbrk: change data segment" "" brk(2)
.xx "modest-sized programs." "" "bs: a compiler/interpreter for" "" bs(1)
.xx "sorted table." "" "bsearch: binary search a" "" bsearch(3C)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf, setvbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "mknod:" "build special file." "" mknod(1M)
.xx "" "swab: swap" "bytes." "" swab(3C)
.xx "" "cc, pcc:" "C compiler." "" cc(1)
.xx "programs." "scc:" "C compiler for stand-alone" "" scc(1)
.xx "" "cflow\- generate" "C flow graph." "" cflow(1)
.xx "" "cpp: the" "C language preprocessor." "" cpp(1)
.xx "" "cb:" "C program beautifier." "" cb(1)
.xx "" "lint: a" "C program checker." "" lint(1)
.xx "" "cxref: generate" "C program cross-reference." "" cxref(1)
.xx "" "ctrace:" "C program debugger." "" ctrace(1)
.xx "value." "abs, iabs, dabs," "cabs, zabs: FORTRAN absolute" "" abs(3F)
.xx "" "" "cal: print calendar." "" cal(1)
.xx "" "dc: desk" "calculator." "" dc(1)
.xx "" "cal: print" "calendar." "" cal(1)
.xx "" "" "calendar: reminder service." "" calendar(1)
.xx "" "cu:" "call another UNIX system." "" cu(1C)
.xx "" "data returned by stat system" "call." "stat:" stat(5)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3C)
.xx "fast/" "malloc, free, realloc," "calloc, mallopt, mallinfo:" "" malloc(3X)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "link and unlink system" "calls." "link, unlink: exercise" link(1M)
.xx "to an LP line printer." "lp," "cancel: send/cancel requests" "" lp(1)
.xx "" "terminfo: terminal" "capability data base." "" terminfo(4)
.xx "" "pnch: file format for" "card images." "" pnch(4)
.xx "" "asa: interpret ASA" "carriage control characters." "" asa(1)
.xx "program." "mt:" "cartridge tape manipulating" "" mt(1M)
.xx "" "text editor (variant of ex for" "casual users)." "edit:" edit(1)
.xx "files." "" "cat: concatenate and print" "" cat(1)
.xx "" "" "cb: C program beautifier." "" cb(1)
.xx "" "" "cc, pcc: C compiler." "" cc(1)
.xx "function." "cos, dcos," "ccos: FORTRAN cosine intrinsic" "" cos(3F)
.xx "" "" "cd: change working directory." "" cd(1)
.xx "commentary of an SCCS delta." "" "cdc: change the delta" "" cdc(1)
.xx "ceiling, remainder,/" "floor," "ceil, fmod, fabs: floor," "" floor(3M)
.xx "" "/ceil, fmod, fabs: floor," "ceiling, remainder, absolute/" "" floor(3M)
.xx "intrinsic/" "exp, dexp," "cexp: FORTRAN exponential" "" exp(3F)
.xx "" "" "cflow\- generate C flow graph." "" cflow(1)
.xx "" "delta: make a delta" "(change) to an SCCS file." "" delta(1)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "/dble, cmplx, dcmplx, ichar," "char: explicit FORTRAN type/" "" ftype(3F)
.xx "stream." "ungetc: push" "character back into input" "" ungetc(3S)
.xx "user." "cuserid: get" "character login name of the" "" cuserid(3S)
.xx "" "/getchar, fgetc, getw: get" "character or word from a/" "" getc(3S)
.xx "" "/putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)
.xx "" "interpret ASA carriage control" "characters." "asa:" asa(1)
.xx "" "_tolower, toascii: translate" "characters." "/_toupper," conv(3C)
.xx "" "iscntrl, isascii: classify" "characters." "/isprint, isgraph," ctype(3C)
.xx "" "tr: translate" "characters." "" tr(1)
.xx "lastlogin, monacct, nulladm,/" "" "chargefee, ckpacct, dodisk," "" acctsh(1M)
.xx "directory." "" "chdir: change working" "" chdir(2)
.xx "" "/dfsck: file system consistency" "check and interactive repair." "" fsck(1M)
.xx "checking procedure." "" "checkall: faster file system" "" checkall(1M)
.xx "" "lint: a C program" "checker." "" lint(1)
.xx "" "grpck: password/group file" "checkers." "pwck," pwck(1M)
.xx "" "checkall: faster file system" "checking procedure." "" checkall(1M)
.xx "" "copy file systems with label" "checking." "volcopy, labelit:" volcopy(1M)
.xx "systems processed by fsck." "" "checklist: list of file" "" checklist(4)
.xx "file." "sum: print" "checksum and block count of a" "" sum(1)
.xx "" "chown," "chgrp: change owner or group." "" chown(1)
.xx "" "times: get process and" "child process times." "" times(2)
.xx "terminate." "wait: wait for" "child process to stop or" "" wait(2)
.xx "" "" "chmod: change mode." "" chmod(1)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "of a file." "" "chown: change owner and group" "" chown(2)
.xx "group." "" "chown, chgrp: change owner or" "" chown(1)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "for a command." "" "chroot: change root directory" "" chroot(1M)
.xx "monacct, nulladm,/" "chargefee," "ckpacct, dodisk, lastlogin," "" acctsh(1M)
.xx "" "isgraph, iscntrl, isascii:" "classify characters." "/isprint," ctype(3C)
.xx "" "uuclean: uucp spool directory" "clean-up." "" uuclean(1M)
.xx "" "clri:" "clear i-node." "" clri(1M)
.xx "status/" "ferror, feof," "clearerr, fileno: stream" "" ferror(3S)
.xx "" "alarm: set a process alarm" "clock." "" alarm(2)
.xx "" "cron:" "clock daemon." "" cron(1M)
.xx "" "" "clock: report CPU time used." "" clock(3C)
.xx "logarithm/" "log, alog, dlog," "clog: FORTRAN natural" "" log(3F)
.xx "" "ldclose, ldaclose:" "close a common object file." "" ldclose(3X)
.xx "" "close:" "close a file descriptor." "" close(2)
.xx "descriptor." "" "close: close a file" "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "" "clri: clear i-node." "" clri(1M)
.xx "" "" "cmp: compare two files." "" cmp(1)
.xx "" "/real, float, sngl, dble," "cmplx, dcmplx, ichar, char:/" "" ftype(3F)
.xx "line-feeds." "" "col: filter reverse" "" col(1)
.xx "" "" "comb: combine SCCS deltas." "" comb(1)
.xx "" "comb:" "combine SCCS deltas." "" comb(1)
.xx "common to two sorted files." "" "comm: select or reject lines" "" comm(1)
.xx "" "nice: run a" "command at low priority." "" nice(1)
.xx "" "change root directory for a" "command." "chroot:" chroot(1M)
.xx "" "env: set environment for" "command execution." "" env(1)
.xx "" "uux: UNIX-to-UNIX system" "command execution." "" uux(1C)
.xx "" "system: issue a shell" "command from FORTRAN." "" system(3F)
.xx "quits." "nohup: run a" "command immune to hangups and" "" nohup(1)
.xx "" "iargc: return the number of" "command line arguments." "" iargc(3F)
.xx "" "getopt: parse" "command options." "" getopt(1)
.xx "" "/shell, the standard/restricted" "command programming language." "" sh(1)
.xx "and system/" "timex: time a" "command; report process data" "" timex(1)
.xx "per-process/" "acctcms:" "command summary from" "" acctcms(1M)
.xx "" "system: issue a shell" "command." "" system(3S)
.xx "" "test: condition evaluation" "command." "" test(1)
.xx "" "time: time a" "command." "" time(1)
.xx "" "argument list(s) and execute" "command." "xargs: construct" xargs(1)
.xx "" "getarg: return FORTRAN" "command-line argument." "" getarg(3F)
.xx "" "and miscellaneous accounting" "commands." "/of accounting" acct(1M)
.xx "" "intro: introduction to" "commands and application/" "" intro(1)
.xx "" "/to system maintenance" "commands and application/" "" intro(1M)
.xx "" "at, batch: execute" "commands at a later time." "" at(1)
.xx "" "access graphical and numerical" "commands." "graphics:" graphics(1G)
.xx "" "install: install" "commands." "" install(1M)
.xx "" "how to remake the system and" "commands." "mk:" mk(8)
.xx "" "network useful with graphical" "commands." "stat: statistical" stat(1G)
.xx "" "cdc: change the delta" "commentary of an SCCS delta." "" cdc(1)
.xx "" "ar:" "common archive file format." "" ar(4)
.xx "editor output." "a.out:" "common assembler and link" "" a.out(4)
.xx "" "as:" "common assembler." "" as(1)
.xx "" "log10, alog10, dlog10: FORTRAN" "common logarithm intrinsic/" "" log10(3F)
.xx "routines." "ldfcn:" "common object file access" "" ldfcn(4)
.xx "" "ldopen, ldaopen: open a" "common object file for/" "" ldopen(3X)
.xx "" "/line number entries of a" "common object file function." "" ldlread(3X)
.xx "" "ldclose, ldaclose: close a" "common object file." "" ldclose(3X)
.xx "" "read the file header of a" "common object file." "ldfhread:" ldfhread(3X)
.xx "" "entries of a section of a" "common object file." "/number" ldlseek(3X)
.xx "" "the optional file header of a" "common object file." "/seek to" ldohseek(3X)
.xx "" "/entries of a section of a" "common object file." "" ldrseek(3X)
.xx "" "/section header of a" "common object file." "" ldshread(3X)
.xx "" "an indexed\/named section of a" "common object file." "/seek to" ldsseek(3X)
.xx "" "of a symbol table entry of a" "common object file." "/the index" ldtbindex(3X)
.xx "" "symbol table entry of a" "common object file." "/indexed" ldtbread(3X)
.xx "" "seek to the symbol table of a" "common object file." "ldtbseek:" ldtbseek(3X)
.xx "" "line number entries in a" "common object file." "linenum:" linenum(4)
.xx "" "nm: print name list of" "common object file." "" nm(1)
.xx "" "relocation information for a" "common object file." "reloc:" reloc(4)
.xx "" "scnhdr: section header for a" "common object file." "" scnhdr(4)
.xx "" "line number information from a" "common object file." "/and" strip(1)
.xx "" "/retrieve symbol name for" "common object file symbol/" "" ldgetname(3X)
.xx "table format." "syms:" "common object file symbol" "" syms(4)
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)
.xx "" "ld: link editor for" "common object files." "" ld(1)
.xx "" "size: print section sizes of" "common object files." "" size(1)
.xx "" "comm: select or reject lines" "common to two sorted files." "" comm(1)
.xx "" "ipcs: report inter-process" "communication facilities/" "" ipcs(1)
.xx "" "ftok: standard interprocess" "communication package." "" stdipc(3C)
.xx "" "diff: differential file" "comparator." "" diff(1)
.xx "" "cmp:" "compare two files." "" cmp(1)
.xx "SCCS file." "sccsdiff:" "compare two versions of an" "" sccsdiff(1)
.xx "" "diff3: 3-way differential file" "comparison." "" diff3(1)
.xx "" "dircmp: directory" "comparison." "" dircmp(1)
.xx "" "lge, lgt, lle, llt: string" "comparison intrinsic/" "" strcmp(3F)
.xx "expression." "regcmp, regex:" "compile and execute regular" "" regcmp(3X)
.xx "" "regexp: regular expression" "compile and match routines." "" regexp(5)
.xx "" "regcmp: regular expression" "compile." "" regcmp(1)
.xx "" "term: format of" "compiled term file.." "" term(4)
.xx "" "cc, pcc: C" "compiler." "" cc(1)
.xx "" "f77: FORTRAN 77" "compiler." "" f77(1)
.xx "programs." "scc: C" "compiler for stand-alone" "" scc(1)
.xx "" "tic: terminfo" "compiler." "" tic(1M)
.xx "" "yacc: yet another" "compiler-compiler." "" yacc(1)
.xx "modest-sized programs." "bs: a" "compiler/interpreter for" "" bs(1)
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)
.xx "" "wait: await" "completion of process." "" wait(1)
.xx "" "FORTRAN imaginary part of" "complex argument." "/dimag:" aimag(3F)
.xx "" "conjg, dconjg: FORTRAN" "complex conjugate intrinsic/" "" conjg(3F)
.xx "" "pack, pcat, unpack:" "compress and expand files." "" pack(1)
.xx "table entry of a/" "ldtbindex:" "compute the index of a symbol" "" ldtbindex(3X)
.xx "" "cat:" "concatenate and print files." "" cat(1)
.xx "" "test:" "condition evaluation command." "" test(1)
.xx "System." "" "config: configure a UNIX" "" config(1M)
.xx "" "config:" "configure a UNIX System." "" config(1M)
.xx "system." "lpadmin:" "configure the LP spooling" "" lpadmin(1M)
.xx "conjugate intrinsic function." "" "conjg, dconjg: FORTRAN complex" "" conjg(3F)
.xx "" "conjg, dconjg: FORTRAN complex" "conjugate intrinsic function." "" conjg(3F)
.xx "" "fwtmp, wtmpfix: manipulate" "connect accounting records." "" fwtmp(1M)
.xx "" "an out-going terminal line" "connection." "dial: establish" dial(3C)
.xx "" "acctcon1, acctcon2:" "connect-time accounting." "" acctcon(1M)
.xx "" "fsck, dfsck: file system" "consistency check and/" "" fsck(1M)
.xx "" "NSCops: NSC SYS32" "console operations." "" nscops(8)
.xx "" "report and interactive status" "console." "rjestat: RJE status" rjestat(1C)
.xx "" "math: math functions and" "constants." "" math(5)
.xx "" "mkfs:" "construct a file system." "" mkfs(1M)
.xx "execute command." "xargs:" "construct argument list(s) and" "" xargs(1)
.xx "" "ls: list" "contents of directory." "" ls(1)
.xx "" "toc: graphical table of" "contents routines." "" toc(1G)
.xx "" "csplit:" "context split." "" csplit(1)
.xx "" "asa: interpret ASA carriage" "control characters." "" asa(1)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "fcntl: file" "control." "" fcntl(2)
.xx "" "init, telinit: process" "control initialization." "" init(1M)
.xx "" "msgctl: message" "control operations." "" msgctl(2)
.xx "" "semctl: semaphore" "control operations." "" semctl(2)
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)
.xx "" "fcntl: file" "control options." "" fcntl(5)
.xx "" "uucp status inquiry and job" "control." "uustat:" uustat(1C)
.xx "" "vc: version" "control." "" vc(1)
.xx "interface." "tty:" "controlling terminal" "" tty(7)
.xx "terminals." "term:" "conventional names for" "" term(5)
.xx "" "char: explicit FORTRAN type" "conversion." "/dcmplx, ichar," ftype(3F)
.xx "" "units:" "conversion program." "" units(1)
.xx "" "dd:" "convert and copy a file." "" dd(1)
.xx "integers and/" "l3tol, ltol3:" "convert between 3-byte" "" l3tol(3C)
.xx "and base-64 ASCII/" "a64l, l64a:" "convert between long integer" "" a64l(3C)
.xx "" "/gmtime, asctime, tzset:" "convert date and time to/" "" ctime(3C)
.xx "to string." "ecvt, fcvt, gcvt:" "convert floating-point number" "" ecvt(3C)
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)
.xx "" "strtod, atof:" "convert string to/" "" strtod(3C)
.xx "" "strtol, atol, atoi:" "convert string to integer." "" strtol(3C)
.xx "" "dd: convert and" "copy a file." "" dd(1)
.xx "" "cpio:" "copy file archives in and out." "" cpio(1)
.xx "access time." "dcopy:" "copy file systems for optimal" "" dcopy(1M)
.xx "checking." "volcopy, labelit:" "copy file systems with label" "" volcopy(1M)
.xx "" "cp, ln, mv:" "copy, link or move files." "" cp(1)
.xx "" "UNIX system to UNIX system" "copy." "uucp, uulog, uuname:" uucp(1C)
.xx "" "UNIX-to-UNIX system file" "copy." "uuto, uupick: public" uuto(1C)
.xx "file." "" "core: format of core image" "" core(4)
.xx "" "core: format of" "core image file." "" core(4)
.xx "" "mem, kmem:" "core memory." "" mem(7)
.xx "cosine intrinsic function." "" "cos, dcos, ccos: FORTRAN" "" cos(3F)
.xx "atan2: trigonometric/" "sin," "cos, tan, asin, acos, atan," "" trig(3M)
.xx "hyperbolic cosine intrinsic/" "" "cosh, dcosh: FORTRAN" "" cosh(3F)
.xx "functions." "sinh," "cosh, tanh: hyperbolic" "" sinh(3M)
.xx "" "cos, dcos, ccos: FORTRAN" "cosine intrinsic function." "" cos(3F)
.xx "" "/dcosh: FORTRAN hyperbolic" "cosine intrinsic function." "" cosh(3F)
.xx "" "sum: print checksum and block" "count of a file." "" sum(1)
.xx "" "wc: word" "count." "" wc(1)
.xx "files." "" "cp, ln, mv: copy, link or move" "" cp(1)
.xx "" "cpio: format of" "cpio archive." "" cpio(4)
.xx "and out." "" "cpio: copy file archives in" "" cpio(1)
.xx "" "" "cpio: format of cpio archive." "" cpio(4)
.xx "preprocessor." "" "cpp: the C language" "" cpp(1)
.xx "binary directories." "" "cpset: install object files in" "" cpset(1M)
.xx "" "clock: report" "CPU time used." "" clock(3C)
.xx "" "craps: the game of" "craps." "" craps(6)
.xx "" "" "craps: the game of craps." "" craps(6)
.xx "" "" "crash: examine system images." "" crash(1M)
.xx "rewrite an existing one." "" "creat: create a new file or" "" creat(2)
.xx "file." "tmpnam, tempnam:" "create a name for a temporary" "" tmpnam(3S)
.xx "an existing one." "creat:" "create a new file or rewrite" "" creat(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)
.xx "channel." "pipe:" "create an interprocess" "" pipe(2)
.xx "files." "admin:" "create and administer SCCS" "" admin(1)
.xx "files from UNIX/" "/B5toGR:" "creates ROM monitor executable" "" 5toG(1M)
.xx "" "umask: set and get file" "creation mask." "" umask(2)
.xx "" "" "cron: clock daemon." "" cron(1M)
.xx "" "" "crontab - user crontab file." "" crontab(1)
.xx "" "crontab - user" "crontab file." "" crontab(1)
.xx "" "cxref: generate C program" "cross-reference." "" cxref(1)
.xx "optimization package." "curses:" "CRT screen handling and" "" curses(3X)
.xx "hashing encryption algorithm." "" "crypt, encrypt: a one way" "" crypt(3C)
.xx "function." "sin, dsin," "csin: FORTRAN sine intrinsic" "" sin(3F)
.xx "" "" "csplit: context split." "" csplit(1)
.xx "intrinsic/" "sqrt, dsqrt," "csqrt: FORTRAN square root" "" sqrt(3F)
.xx "terminal." "" "ct: spawn getty to a remote" "" ct(1C)
.xx "for terminal." "" "ctermid: generate file name" "" ctermid(3S)
.xx "asctime, tzset: convert date/" "" "ctime, localtime, gmtime," "" ctime(3C)
.xx "" "" "ctrace: C program debugger." "" ctrace(1)
.xx "" "" "cu: call another UNIX system." "" cu(1C)
.xx "" "ttt," "cubic: tic-tac-toe." "" ttt(6)
.xx "activity." "sact: print" "current SCCS file editing" "" sact(1)
.xx "" "uname: print name of" "current UNIX system." "" uname(1)
.xx "" "uname: get name of" "current UNIX system." "" uname(2)
.xx "" "slot in the utmp file of the" "current user." "/find the" ttyslot(3C)
.xx "" "getcwd: get path-name of" "current working directory." "" getcwd(3C)
.xx "and optimization package." "" "curses: CRT screen handling" "" curses(3X)
.xx "" "spline: interpolate smooth" "curve." "" spline(1G)
.xx "name of the user." "" "cuserid: get character login" "" cuserid(3S)
.xx "of each line of a file." "" "cut: cut out selected fields" "" cut(1)
.xx "each line of a file." "cut:" "cut out selected fields of" "" cut(1)
.xx "cross-reference." "" "cxref: generate C program" "" cxref(1)
.xx "absolute value." "abs, iabs," "dabs, cabs, zabs: FORTRAN" "" abs(3F)
.xx "intrinsic function." "acos," "dacos: FORTRAN arccosine" "" acos(3F)
.xx "" "cron: clock" "daemon." "" cron(1M)
.xx "" "errdemon: error-logging" "daemon." "" errdemon(1M)
.xx "" "terminate the error-logging" "daemon." "errstop:" errstop(1M)
.xx "" "runacct: run" "daily accounting." "" runacct(1M)
.xx "system/" "filesave, tapesave:" "daily/weekly UNIX system file" "" filesave(1M)
.xx "" "/handle special functions of" "DASI 300 and 300s terminals." "" 300(1)
.xx "" "special functions of the" "DASI 450 terminal." "/handle" 450(1)
.xx "intrinsic function." "asin," "dasin: FORTRAN arcsine" "" asin(3F)
.xx "" "/time a command; report process" "data and system activity." "" timex(1)
.xx "" "terminfo: terminal capability" "data base." "" terminfo(4)
.xx "" "- generate disk accounting" "data by user ID." "diskusg" diskusg(1M)
.xx "" "/sgetl: access long integer" "data in a machine-independent/" "" sputl(3X)
.xx "" "plock: lock process, text, or" "data in memory." "" plock(2)
.xx "" "prof: display profile" "data." "" prof(1)
.xx "call." "stat:" "data returned by stat system" "" stat(5)
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "" "join: relational" "database operator." "" join(1)
.xx "" "tput: query terminfo" "database." "" tput(1)
.xx "intrinsic function." "atan," "datan: FORTRAN arctangent" "" atan(3F)
.xx "intrinsic function." "atan2," "datan2: FORTRAN arctangent" "" atan2(3F)
.xx "" "/asctime, tzset: convert" "date and time to string." "" ctime(3C)
.xx "" "date: print and set the" "date." "" date(1)
.xx "" "" "date: print and set the date." "" date(1)
.xx "" "/idint, real, float, sngl," "dble, cmplx, dcmplx, ichar,/" "" ftype(3F)
.xx "" "" "dc: desk calculator." "" dc(1)
.xx "" "" "dc: moving-head disk." "" dc(7)
.xx "" "/float, sngl, dble, cmplx," "dcmplx, ichar, char: explicit/" "" ftype(3F)
.xx "conjugate intrinsic/" "conjg," "dconjg: FORTRAN complex" "" conjg(3F)
.xx "optimal access time." "" "dcopy: copy file systems for" "" dcopy(1M)
.xx "intrinsic function." "cos," "dcos, ccos: FORTRAN cosine" "" cos(3F)
.xx "cosine intrinsic/" "cosh," "dcosh: FORTRAN hyperbolic" "" cosh(3F)
.xx "test program." "" "dcutest: disk formatter and" "" dcutest(1M)
.xx "" "" "dd: convert and copy a file." "" dd(1)
.xx "difference intrinsic/" "dim," "ddim, idim: positive" "" dim(3F)
.xx "" "adb: absolute" "debugger." "" adb(1)
.xx "" "ctrace: C program" "debugger." "" ctrace(1)
.xx "" "fsdb: file system" "debugger." "" fsdb(1M)
.xx "" "sdb: symbolic" "debugger." "" sdb(1)
.xx "" "sysdef: system" "definition." "" sysdef(1M)
.xx "names." "basename, dirname:" "deliver portions of path" "" basename(1)
.xx "file." "tail:" "deliver the last part of a" "" tail(1)
.xx "" "delta commentary of an SCCS" "delta." "cdc: change the" cdc(1)
.xx "file." "delta: make a" "delta (change) to an SCCS" "" delta(1)
.xx "delta." "cdc: change the" "delta commentary of an SCCS" "" cdc(1)
.xx "" "rmdel: remove a" "delta from an SCCS file." "" rmdel(1)
.xx "to an SCCS file." "" "delta: make a delta (change)" "" delta(1)
.xx "" "comb: combine SCCS" "deltas." "" comb(1)
.xx "" "mesg: permit or" "deny messages." "" mesg(1)
.xx "" "close: close a file" "descriptor." "" close(2)
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)
.xx "" "dc:" "desk calculator." "" dc(1)
.xx "file." "access:" "determine accessibility of a" "" access(2)
.xx "" "file:" "determine file type." "" file(1)
.xx "" "master: master" "device information table." "" master(4)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "" "devnm:" "device name." "" devnm(1M)
.xx "" "/tekset, td: graphical" "device routines and filters." "" gdev(1G)
.xx "" "" "devnm: device name." "" devnm(1M)
.xx "exponential intrinsic/" "exp," "dexp, cexp: FORTRAN" "" exp(3F)
.xx "blocks." "" "df: report number of free disk" "" df(1M)
.xx "check and interactive/" "fsck," "dfsck: file system consistency" "" fsck(1M)
.xx "terminal line connection." "" "dial: establish an out-going" "" dial(3C)
.xx "" "ratfor: rational FORTRAN" "dialect." "" ratfor(1)
.xx "" "bdiff: big" "diff." "" bdiff(1)
.xx "comparator." "" "diff: differential file" "" diff(1)
.xx "comparison." "" "diff3: 3-way differential file" "" diff3(1)
.xx "" "dim, ddim, idim: positive" "difference intrinsic/" "" dim(3F)
.xx "" "sdiff: side-by-side" "difference program." "" sdiff(1)
.xx "" "diffmk: mark" "differences between files." "" diffmk(1)
.xx "" "diff:" "differential file comparator." "" diff(1)
.xx "" "diff3: 3-way" "differential file comparison." "" diff3(1)
.xx "between files." "" "diffmk: mark differences" "" diffmk(1)
.xx "difference intrinsic/" "" "dim, ddim, idim: positive" "" dim(3F)
.xx "of complex argument." "aimag," "dimag: FORTRAN imaginary part" "" aimag(3F)
.xx "intrinsic function." "aint," "dint: FORTRAN integer part" "" aint(3F)
.xx "" "" "dir: format of directories." "" dir(4)
.xx "" "" "dircmp: directory comparison." "" dircmp(1)
.xx "" "install object files in binary" "directories." "cpset:" cpset(1M)
.xx "" "dir: format of" "directories." "" dir(4)
.xx "" "rm, rmdir: remove files or" "directories." "" rm(1)
.xx "" "cd: change working" "directory." "" cd(1)
.xx "" "chdir: change working" "directory." "" chdir(2)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "uuclean: uucp spool" "directory clean-up." "" uuclean(1M)
.xx "" "dircmp:" "directory comparison." "" dircmp(1)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "chroot: change root" "directory for a command." "" chroot(1M)
.xx "" "path-name of current working" "directory." "getcwd: get" getcwd(3C)
.xx "" "ls: list contents of" "directory." "" ls(1)
.xx "" "mkdir: make a" "directory." "" mkdir(1)
.xx "" "mvdir: move a" "directory." "" mvdir(1M)
.xx "" "pwd: working" "directory name." "" pwd(1)
.xx "ordinary file." "mknod: make a" "directory, or a special or" "" mknod(2)
.xx "path names." "basename," "dirname: deliver portions of" "" basename(1)
.xx "printers." "enable," "disable: enable/disable LP" "" enable(1)
.xx "" "acct: enable or" "disable process accounting." "" acct(2)
.xx "" "type, modes, speed, and line" "discipline." "/set terminal" getty(1M)
.xx "" "sadp:" "disk access profiler." "" sadp(1M)
.xx "ID." "diskusg - generate" "disk accounting data by user" "" diskusg(1M)
.xx "" "df: report number of free" "disk blocks." "" df(1M)
.xx "" "dc: moving-head" "disk." "" dc(7)
.xx "program." "dcutest:" "disk formatter and test" "" dcutest(1M)
.xx "" "mkpt: change the" "disk partition tables.." "" mkpt(1M)
.xx "" "du: summarize" "disk usage." "" du(1)
.xx "accounting data by user ID." "" "diskusg - generate disk" "" diskusg(1M)
.xx "" "mount, umount: mount and" "dismount file system." "" mount(1M)
.xx "" "vi: screen-oriented (visual)" "display editor based on ex." "" vi(1)
.xx "" "prof:" "display profile data." "" prof(1)
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)
.xx "" "/lcong48: generate uniformly" "distributed pseudo-random/" "" drand48(3C)
.xx "logarithm/" "log, alog," "dlog, clog: FORTRAN natural" "" log(3F)
.xx "logarithm/" "log10, alog10," "dlog10: FORTRAN common" "" log10(3F)
.xx "" "max, max0, amax0, max1, amax1," "dmax1: FORTRAN maximum-value/" "" max(3F)
.xx "" "min, min0, amin0, min1, amin1," "dmin1: FORTRAN minimum-value/" "" min(3F)
.xx "intrinsic/" "mod, amod," "dmod: FORTRAN remaindering" "" mod(3F)
.xx "nearest integer/" "anint," "dnint, nint, idnint: FORTRAN" "" round(3F)
.xx "nulladm,/" "chargefee, ckpacct," "dodisk, lastlogin, monacct," "" acctsh(1M)
.xx "" "whodo: who is" "doing what." "" whodo(1M)
.xx "intrinsic function." "dprod:" "double precision product" "" dprod(3F)
.xx "" "/atof: convert string to" "double-precision number." "" strtod(3C)
.xx "product intrinsic function." "" "dprod: double precision" "" dprod(3F)
.xx "nrand48, mrand48, jrand48,/" "" "drand48, erand48, lrand48," "" drand48(3C)
.xx "" "graph:" "draw a graph." "" graph(1G)
.xx "" "arithmetic: provide" "drill in number facts." "" arithmetic(6)
.xx "" "sxt: pseudo-device" "driver." "" sxt(7)
.xx "" "trace: event-tracing" "driver." "" trace(7)
.xx "transfer-of-sign/" "sign, isign," "dsign: FORTRAN" "" sign(3F)
.xx "intrinsic function." "sin," "dsin, csin: FORTRAN sine" "" sin(3F)
.xx "intrinsic function." "sinh," "dsinh: FORTRAN hyperbolic sine" "" sinh(3F)
.xx "root intrinsic/" "sqrt," "dsqrt, csqrt: FORTRAN square" "" sqrt(3F)
.xx "intrinsic function." "tan," "dtan: FORTRAN tangent" "" tan(3F)
.xx "tangent intrinsic/" "tanh," "dtanh: FORTRAN hyperbolic" "" tanh(3F)
.xx "" "" "du: summarize disk usage." "" du(1)
.xx "an object file." "" "dump: dump selected parts of" "" dump(1)
.xx "" "extract error records from" "dump." "errdead:" errdead(1M)
.xx "" "od: octal" "dump." "" od(1)
.xx "object file." "dump:" "dump selected parts of an" "" dump(1)
.xx "descriptor." "" "dup: duplicate an open file" "" dup(2)
.xx "descriptor." "dup:" "duplicate an open file" "" dup(2)
.xx "" "echo:" "echo arguments." "" echo(1)
.xx "" "" "echo: echo arguments." "" echo(1)
.xx "floating-point number to/" "" "ecvt, fcvt, gcvt: convert" "" ecvt(3C)
.xx "" "" "ed, red: text editor." "" ed(1)
.xx "program." "end, etext," "edata: last locations in" "" end(3C)
.xx "ex for casual users)." "" "edit: text editor (variant of" "" edit(1)
.xx "" "sact: print current SCCS file" "editing activity." "" sact(1)
.xx "" "/(visual) display" "editor based on ex." "" vi(1)
.xx "" "ed, red: text" "editor." "" ed(1)
.xx "" "ex: text" "editor." "" ex(1)
.xx "files." "ld: link" "editor for common object" "" ld(1)
.xx "" "ged: graphical" "editor." "" ged(1G)
.xx "" "common assembler and link" "editor output." "a.out:" a.out(4)
.xx "" "sed: stream" "editor." "" sed(1)
.xx "casual users)." "edit: text" "editor (variant of ex for" "" edit(1)
.xx "" "/user, real group, and" "effective group IDs." "" getuid(2)
.xx "and/" "/getegid: get real user," "effective user, real group," "" getuid(2)
.xx "Language." "" "ef\&l: Extended FORTRAN" "" efl(1)
.xx "" "fsplit: split f77, ratfor, or" "ef\&l files." "" fsplit(1)
.xx "for a pattern." "grep," "egrep, fgrep: search a file" "" grep(1)
.xx "enable/disable LP printers." "" "enable, disable:" "" enable(1)
.xx "accounting." "acct:" "enable or disable process" "" acct(2)
.xx "" "enable, disable:" "enable/disable LP printers." "" enable(1)
.xx "encryption algorithm." "crypt," "encrypt: a one way hashing" "" crypt(3C)
.xx "" "encrypt: a one way hashing" "encryption algorithm." "crypt," crypt(3C)
.xx "" "makekey: generate" "encryption key." "" makekey(1)
.xx "locations in program." "" "end, etext, edata: last" "" end(3C)
.xx "" "/getgrgid, getgrnam, setgrent," "endgrent, fgetgrent: get group/" "" getgrent(3C)
.xx "" "/getpwuid, getpwnam, setpwent," "endpwent, fgetpwent: get/" "" getpwent(3C)
.xx "utmp/" "/pututline, setutent," "endutent, utmpname: access" "" getut(3C)
.xx "" "trenter:" "enter a trouble report." "" trenter(1M)
.xx "" "nlist: get" "entries from name list." "" nlist(3C)
.xx "file." "linenum: line number" "entries in a common object" "" linenum(4)
.xx "" "man: print" "entries in this manual." "" man(1)
.xx "file/" "/manipulate line number" "entries of a common object" "" ldlread(3X)
.xx "" "/ldnlseek: seek to line number" "entries of a section of a/" "" ldlseek(3X)
.xx "" "/ldnrseek: seek to relocation" "entries of a section of a/" "" ldrseek(3X)
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)
.xx "" "fgetgrent: get group file" "entry." "/setgrent, endgrent," getgrent(3C)
.xx "" "fgetpwent: get password file" "entry." "/setpwent, endpwent," getpwent(3C)
.xx "" "utmpname: access utmp file" "entry." "/setutent, endutent," getut(3C)
.xx "" "object file symbol table" "entry." "/symbol name for common" ldgetname(3X)
.xx "" "/the index of a symbol table" "entry of a common object file." "" ldtbindex(3X)
.xx "" "/read an indexed symbol table" "entry of a common object file." "" ldtbread(3X)
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "command execution." "" "env: set environment for" "" env(1)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "profile: setting up an" "environment at login time." "" profile(4)
.xx "" "environ: user" "environment." "" environ(5)
.xx "execution." "env: set" "environment for command" "" env(1)
.xx "" "getenv: return value for" "environment name." "" getenv(3C)
.xx "" "putenv: change or add value to" "environment." "" putenv(3C)
.xx "" "getenv: return FORTRAN" "environment variable." "" getenv(3F)
.xx "mrand48, jrand48,/" "drand48," "erand48, lrand48, nrand48," "" drand48(3C)
.xx "graphical device/" "hpd," "erase, hardcopy, tekset, td:" "" gdev(1G)
.xx "complementary error function." "" "erf, erfc: error function and" "" erf(3M)
.xx "complementary error/" "erf," "erfc: error function and" "" erf(3M)
.xx "" "" "err: error-logging interface." "" err(7)
.xx "from dump." "" "errdead: extract error records" "" errdead(1M)
.xx "daemon." "" "errdemon: error-logging" "" errdemon(1M)
.xx "format." "" "errfile: error-log file" "" errfile(4)
.xx "system error/" "perror," "errno, sys_errlist, sys_nerr:" "" perror(3C)
.xx "complementary/" "erf, erfc:" "error function and" "" erf(3M)
.xx "" "function and complementary" "error function." "/erfc: error" erf(3M)
.xx "" "sys_errlist, sys_nerr: system" "error messages." "/errno," perror(3C)
.xx "" "to system calls and" "error numbers." "/introduction" intro(2)
.xx "" "errdead: extract" "error records from dump." "" errdead(1M)
.xx "" "matherr:" "error-handling function." "" matherr(3M)
.xx "" "errfile:" "error-log file format." "" errfile(4)
.xx "" "errdemon:" "error-logging daemon." "" errdemon(1M)
.xx "" "errstop: terminate the" "error-logging daemon." "" errstop(1M)
.xx "" "err:" "error-logging interface." "" err(7)
.xx "" "process a report of logged" "errors." "errpt:" errpt(1M)
.xx "" "hashcheck: find spelling" "errors." "/hashmake, spellin," spell(1)
.xx "logged errors." "" "errpt: process a report of" "" errpt(1M)
.xx "error-logging daemon." "" "errstop: terminate the" "" errstop(1M)
.xx "terminal line/" "dial:" "establish an out-going" "" dial(3C)
.xx "" "setmnt:" "establish mount table." "" setmnt(1M)
.xx "in program." "end," "etext, edata: last locations" "" end(3C)
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)
.xx "expression." "expr:" "evaluate arguments as an" "" expr(1)
.xx "" "test: condition" "evaluation command." "" test(1)
.xx "" "trace:" "event-tracing driver." "" trace(7)
.xx "" "edit: text editor (variant of" "ex for casual users)." "" edit(1)
.xx "" "" "ex: text editor." "" ex(1)
.xx "" "display editor based on" "ex." "/screen-oriented (visual)" vi(1)
.xx "" "crash:" "examine system images." "" crash(1M)
.xx "execlp, execvp: execute a/" "" "execl, execv, execle, execve," "" exec(2)
.xx "execvp: execute/" "execl, execv," "execle, execve, execlp," "" exec(2)
.xx "" "execl, execv, execle, execve," "execlp, execvp: execute a/" "" exec(2)
.xx "" "files from UNIX system V" "executable files.." "/executable" 5toG(1M)
.xx "" "/B5toGR: creates ROM monitor" "executable files from UNIX/" "" 5toG(1M)
.xx "" "execve, execlp, execvp:" "execute a file." "/execle," exec(2)
.xx "" "construct argument list(s) and" "execute command." "xargs:" xargs(1)
.xx "time." "at, batch:" "execute commands at a later" "" at(1)
.xx "" "regcmp, regex: compile and" "execute regular expression." "" regcmp(3X)
.xx "" "set environment for command" "execution." "env:" env(1)
.xx "" "sleep: suspend" "execution for an interval." "" sleep(1)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)
.xx "" "monitor: prepare" "execution profile." "" monitor(3C)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "" "UNIX-to-UNIX system command" "execution." "uux:" uux(1C)
.xx "execvp: execute a/" "execl," "execv, execle, execve, execlp," "" exec(2)
.xx "execute/" "execl, execv, execle," "execve, execlp, execvp:" "" exec(2)
.xx "" "/execv, execle, execve, execlp," "execvp: execute a file." "" exec(2)
.xx "system calls." "link, unlink:" "exercise link and unlink" "" link(1M)
.xx "" "a new file or rewrite an" "existing one." "creat: create" creat(2)
.xx "process." "" "exit, _exit: terminate" "" exit(2)
.xx "" "exit," "_exit: terminate process." "" exit(2)
.xx "exponential intrinsic/" "" "exp, dexp, cexp: FORTRAN" "" exp(3F)
.xx "exponential, logarithm,/" "" "exp, log, log10, pow, sqrt:" "" exp(3M)
.xx "" "pcat, unpack: compress and" "expand files." "pack," pack(1)
.xx "" "cmplx, dcmplx, ichar, char:" "explicit FORTRAN type/" "/dble," ftype(3F)
.xx "" "exp, dexp, cexp: FORTRAN" "exponential intrinsic/" "" exp(3F)
.xx "" "exp, log, log10, pow, sqrt:" "exponential, logarithm, power,/" "" exp(3M)
.xx "expression." "" "expr: evaluate arguments as an" "" expr(1)
.xx "routines." "regexp: regular" "expression compile and match" "" regexp(5)
.xx "" "regcmp: regular" "expression compile." "" regcmp(1)
.xx "" "expr: evaluate arguments as an" "expression." "" expr(1)
.xx "" "compile and execute regular" "expression." "regcmp, regex:" regcmp(3X)
.xx "" "ef\&l:" "Extended FORTRAN Language." "" efl(1)
.xx "dump." "errdead:" "extract error records from" "" errdead(1M)
.xx "" "" "f77: FORTRAN 77 compiler." "" f77(1)
.xx "" "fsplit: split" "f77, ratfor, or ef\&l files." "" fsplit(1)
.xx "remainder,/" "floor, ceil, fmod," "fabs: floor, ceiling," "" floor(3M)
.xx "" "factor:" "factor a number." "" factor(1)
.xx "" "" "factor: factor a number." "" factor(1)
.xx "" "true," "false: provide truth values." "" true(1)
.xx "" "data in a machine-independent" "fashion.." "/access long integer" sputl(3X)
.xx "" "finc:" "fast incremental backup." "" finc(1M)
.xx "" "/calloc, mallopt, mallinfo:" "fast main memory allocator." "" malloc(3X)
.xx "procedure." "checkall:" "faster file system checking" "" checkall(1M)
.xx "" "abort: generate an IOT" "fault." "" abort(3C)
.xx "a stream." "" "fclose, fflush: close or flush" "" fclose(3S)
.xx "" "" "fcntl: file control." "" fcntl(2)
.xx "" "" "fcntl: file control options." "" fcntl(5)
.xx "floating-point number/" "ecvt," "fcvt, gcvt: convert" "" ecvt(3C)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "status inquiries." "ferror," "feof, clearerr, fileno: stream" "" ferror(3S)
.xx "fileno: stream status/" "" "ferror, feof, clearerr," "" ferror(3S)
.xx "statistics for a file system." "" "f\&f: list file names and" "" ff(1M)
.xx "stream." "fclose," "fflush: close or flush a" "" fclose(3S)
.xx "word from a/" "getc, getchar," "fgetc, getw: get character or" "" getc(3S)
.xx "" "/getgrnam, setgrent, endgrent," "fgetgrent: get group file/" "" getgrent(3C)
.xx "" "/getpwnam, setpwent, endpwent," "fgetpwent: get password file/" "" getpwent(3C)
.xx "stream." "gets," "fgets: get a string from a" "" gets(3S)
.xx "pattern." "grep, egrep," "fgrep: search a file for a" "" grep(1)
.xx "times." "utime: set" "file access and modification" "" utime(2)
.xx "" "ldfcn: common object" "file access routines." "" ldfcn(4)
.xx "" "determine accessibility of a" "file." "access:" access(2)
.xx "" "hpio: HP 2645A terminal tape" "file archiver." "" hpio(1)
.xx "" "tar: tape" "file archiver." "" tar(1)
.xx "" "cpio: copy" "file archives in and out." "" cpio(1)
.xx "" "pwck, grpck: password/group" "file checkers." "" pwck(1M)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "change owner and group of a" "file." "chown:" chown(2)
.xx "" "diff: differential" "file comparator." "" diff(1)
.xx "" "diff3: 3-way differential" "file comparison." "" diff3(1)
.xx "" "fcntl:" "file control." "" fcntl(2)
.xx "" "fcntl:" "file control options." "" fcntl(5)
.xx "" "public UNIX-to-UNIX system" "file copy." "uuto, uupick:" uuto(1C)
.xx "" "core: format of core image" "file." "" core(4)
.xx "" "umask: set and get" "file creation mask." "" umask(2)
.xx "" "crontab - user crontab" "file." "" crontab(1)
.xx "" "fields of each line of a" "file." "cut: cut out selected" cut(1)
.xx "" "dd: convert and copy a" "file." "" dd(1)
.xx "" "a delta (change) to an SCCS" "file." "delta: make" delta(1)
.xx "" "close: close a" "file descriptor." "" close(2)
.xx "" "dup: duplicate an open" "file descriptor." "" dup(2)
.xx "" "" "file: determine file type." "" file(1)
.xx "" "selected parts of an object" "file." "dump: dump" dump(1)
.xx "" "sact: print current SCCS" "file editing activity." "" sact(1)
.xx "" "endgrent, fgetgrent: get group" "file entry." "/setgrent," getgrent(3C)
.xx "" "fgetpwent: get password" "file entry." "/endpwent," getpwent(3C)
.xx "" "utmpname: access utmp" "file entry." "/endutent," getut(3C)
.xx "" "putpwent: write password" "file entry." "" putpwent(3C)
.xx "" "execlp, execvp: execute a" "file." "/execv, execle, execve," exec(2)
.xx "" "grep, egrep, fgrep: search a" "file for a pattern." "" grep(1)
.xx "" "ldaopen: open a common object" "file for reading." "ldopen," ldopen(3X)
.xx "" "acct: per-process accounting" "file format." "" acct(4)
.xx "" "ar: common archive" "file format." "" ar(4)
.xx "" "errfile: error-log" "file format." "" errfile(4)
.xx "" "pnch:" "file format for card images." "" pnch(4)
.xx "" "intro: introduction to" "file formats." "" intro(4)
.xx "" "entries of a common object" "file function." "/line number" ldlread(3X)
.xx "" "get: get a version of an SCCS" "file." "" get(1)
.xx "" "group: group" "file." "" group(4)
.xx "files." "filehdr:" "file header for common object" "" filehdr(4)
.xx "file." "ldfhread: read the" "file header of a common object" "" ldfhread(3X)
.xx "" "ldohseek: seek to the optional" "file header of a common object/" "" ldohseek(3X)
.xx "" "split: split a" "file into pieces." "" split(1)
.xx "" "issue: issue identification" "file." "" issue(4)
.xx "" "of a member of an archive" "file." "/read the archive header" ldahread(3X)
.xx "" "close a common object" "file." "ldclose, ldaclose:" ldclose(3X)
.xx "" "file header of a common object" "file." "ldfhread: read the" ldfhread(3X)
.xx "" "a section of a common object" "file." "/line number entries of" ldlseek(3X)
.xx "" "file header of a common object" "file." "/seek to the optional" ldohseek(3X)
.xx "" "a section of a common object" "file." "/relocation entries of" ldrseek(3X)
.xx "" "header of a common object" "file." "/indexed\/named section" ldshread(3X)
.xx "" "section of a common object" "file." "/to an indexed\/named" ldsseek(3X)
.xx "" "table entry of a common object" "file." "/the index of a symbol" ldtbindex(3X)
.xx "" "table entry of a common object" "file." "/read an indexed symbol" ldtbread(3X)
.xx "" "table of a common object" "file." "/seek to the symbol" ldtbseek(3X)
.xx "" "entries in a common object" "file." "linenum: line number" linenum(4)
.xx "" "link: link to a" "file." "" link(2)
.xx "" "mknod: build special" "file." "" mknod(1M)
.xx "" "or a special or ordinary" "file." "/make a directory," mknod(2)
.xx "" "ctermid: generate" "file name for terminal." "" ctermid(3S)
.xx "" "mktemp: make a unique" "file name." "" mktemp(3C)
.xx "a file system." "f\&f: list" "file names and statistics for" "" ff(1M)
.xx "" "change the format of a text" "file." "newform:" newform(1)
.xx "" "name list of common object" "file." "nm: print" nm(1)
.xx "" "null: the null" "file." "" null(7)
.xx "" "/find the slot in the utmp" "file of the current user." "" ttyslot(3C)
.xx "" "/identify processes using a" "file or file structure." "" fuser(1M)
.xx "one." "creat: create a new" "file or rewrite an existing" "" creat(2)
.xx "" "passwd: password" "file." "" passwd(4)
.xx "" "or subsequent lines of one" "file." "/lines of several files" paste(1)
.xx "soft-copy terminals." "pg:" "file perusal filter for" "" pg(1)
.xx "" "/rewind, ftell: reposition a" "file pointer in a stream." "" fseek(3S)
.xx "" "lseek: move read/write" "file pointer." "" lseek(2)
.xx "" "prs: print an SCCS" "file." "" prs(1)
.xx "" "read: read from" "file." "" read(2)
.xx "" "for a common object" "file." "/relocation information" reloc(4)
.xx "" "remove a delta from an SCCS" "file." "rmdel:" rmdel(1)
.xx "" "bfs: big" "file scanner." "" bfs(1)
.xx "" "two versions of an SCCS" "file." "sccsdiff: compare" sccsdiff(1)
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)
.xx "" "header for a common object" "file." "scnhdr: section" scnhdr(4)
.xx "" "stat, fstat: get" "file status." "" stat(2)
.xx "" "from a common object" "file." "/line number information" strip(1)
.xx "" "processes using a file or" "file structure." "/identify" fuser(1M)
.xx "" "checksum and block count of a" "file." "sum: print" sum(1)
.xx "" "/symbol name for common object" "file symbol table entry." "" ldgetname(3X)
.xx "" "syms: common object" "file symbol table format." "" syms(4)
.xx "" "daily/weekly UNIX system" "file system backup." "/tapesave:" filesave(1M)
.xx "procedure." "checkall: faster" "file system checking" "" checkall(1M)
.xx "and interactive/" "fsck, dfsck:" "file system consistency check" "" fsck(1M)
.xx "" "fsdb:" "file system debugger." "" fsdb(1M)
.xx "" "names and statistics for a" "file system." "f\&f: list file" ff(1M)
.xx "volume." "" "file system: format of system" "" fs(4)
.xx "" "mkfs: construct a" "file system." "" mkfs(1M)
.xx "" "umount: mount and dismount" "file system." "mount," mount(1M)
.xx "" "mount: mount a" "file system." "" mount(2)
.xx "" "ustat: get" "file system statistics." "" ustat(2)
.xx "" "mnttab: mounted" "file system table." "" mnttab(4)
.xx "" "umount: unmount a" "file system." "" umount(2)
.xx "access time." "dcopy: copy" "file systems for optimal" "" dcopy(1M)
.xx "fsck." "checklist: list of" "file systems processed by" "" checklist(4)
.xx "" "volcopy, labelit: copy" "file systems with label/" "" volcopy(1M)
.xx "" "deliver the last part of a" "file." "tail:" tail(1)
.xx "" "term: format of compiled term" "file.." "" term(4)
.xx "" "tmpfile: create a temporary" "file." "" tmpfile(3S)
.xx "" "create a name for a temporary" "file." "tmpnam, tempnam:" tmpnam(3S)
.xx "" "and modification times of a" "file." "touch: update access" touch(1)
.xx "" "ftw: walk a" "file tree." "" ftw(3C)
.xx "" "file: determine" "file type." "" file(1)
.xx "" "undo a previous get of an SCCS" "file." "unget:" unget(1)
.xx "" "report repeated lines in a" "file." "uniq:" uniq(1)
.xx "" "val: validate SCCS" "file." "" val(1)
.xx "" "write: write on a" "file." "" write(2)
.xx "" "umask: set" "file-creation mode mask." "" umask(1)
.xx "common object files." "" "filehdr: file header for" "" filehdr(4)
.xx "" "ferror, feof, clearerr," "fileno: stream status/" "" ferror(3S)
.xx "" "from UNIX system V executable" "files.." "/executable files" 5toG(1M)
.xx "" "and print process accounting" "file(s)." "acctcom: search" acctcom(1)
.xx "" "merge or add total accounting" "files." "acctmerg:" acctmerg(1M)
.xx "" "create and administer SCCS" "files." "admin:" admin(1)
.xx "" "send, gath: gather" "files and/or submit RJE jobs." "" send(1C)
.xx "" "cat: concatenate and print" "files." "" cat(1)
.xx "" "cmp: compare two" "files." "" cmp(1)
.xx "" "lines common to two sorted" "files." "comm: select or reject" comm(1)
.xx "" "cp, ln, mv: copy, link or move" "files." "" cp(1)
.xx "" "mark differences between" "files." "diffmk:" diffmk(1)
.xx "" "file header for common object" "files." "filehdr:" filehdr(4)
.xx "" "find: find" "files." "" find(1)
.xx "" "frec: recover" "files from a backup tape." "" frec(1M)
.xx "" "creates ROM monitor executable" "files from UNIX system V/" "/R:" 5toG(1M)
.xx "" "format specification in text" "files." "fspec:" fspec(4)
.xx "" "split f77, ratfor, or ef\&l" "files." "fsplit:" fsplit(1)
.xx "" "string, format of graphical" "files." "/graphical primitive" gps(4)
.xx "" "cpset: install object" "files in binary directories." "" cpset(1M)
.xx "" "intro: introduction to special" "files." "" intro(7)
.xx "" "link editor for common object" "files." "ld:" ld(1)
.xx "" "rm, rmdir: remove" "files or directories." "" rm(1)
.xx "" "/merge same lines of several" "files or subsequent lines of/" "" paste(1)
.xx "" "unpack: compress and expand" "files." "pack, pcat," pack(1)
.xx "" "pr: print" "files." "" pr(1)
.xx "" "section sizes of common object" "files." "size: print" size(1)
.xx "" "sort: sort and/or merge" "files." "" sort(1)
.xx "" "what: identify SCCS" "files." "" what(1)
.xx "daily/weekly UNIX system file/" "" "filesave, tapesave:" "" filesave(1M)
.xx "terminals." "pg: file perusal" "filter for soft-copy" "" pg(1)
.xx "" "greek: select terminal" "filter." "" greek(1)
.xx "" "nl: line numbering" "filter." "" nl(1)
.xx "" "col:" "filter reverse line-feeds." "" col(1)
.xx "" "graphical device routines and" "filters." "/tekset, td:" gdev(1G)
.xx "" "tplot: graphics" "filters." "" tplot(1G)
.xx "" "" "finc: fast incremental backup." "" finc(1M)
.xx "" "find:" "find files." "" find(1)
.xx "" "" "find: find files." "" find(1)
.xx "" "hyphen:" "find hyphenated words." "" hyphen(1)
.xx "" "ttyname, isatty:" "find name of a terminal." "" ttyname(3C)
.xx "object library." "lorder:" "find ordering relation for an" "" lorder(1)
.xx "" "hashmake, spellin, hashcheck:" "find spelling errors." "spell," spell(1)
.xx "of the current user." "ttyslot:" "find the slot in the utmp file" "" ttyslot(3C)
.xx "" "tee: pipe" "fitting." "" tee(1)
.xx "" "int, ifix, idint, real," "float, sngl, dble, cmplx,/" "" ftype(3F)
.xx "" "ecvt, fcvt, gcvt: convert" "floating-point number to/" "" ecvt(3C)
.xx "" "/modf: manipulate parts of" "floating-point numbers." "" frexp(3C)
.xx "floor, ceiling, remainder,/" "" "floor, ceil, fmod, fabs:" "" floor(3M)
.xx "" "floor, ceil, fmod, fabs:" "floor, ceiling, remainder,/" "" floor(3M)
.xx "" "cflow\- generate C" "flow graph." "" cflow(1)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "remainder,/" "floor, ceil," "fmod, fabs: floor, ceiling," "" floor(3M)
.xx "stream." "" "fopen, freopen, fdopen: open a" "" fopen(3S)
.xx "" "" "fork: create a new process." "" fork(2)
.xx "" "per-process accounting file" "format." "acct:" acct(4)
.xx "" "ar: common archive file" "format." "" ar(4)
.xx "" "errfile: error-log file" "format." "" errfile(4)
.xx "" "pnch: file" "format for card images." "" pnch(4)
.xx "" "newform: change the" "format of a text file." "" newform(1)
.xx "" "inode:" "format of an i-node." "" inode(4)
.xx "" "term:" "format of compiled term file.." "" term(4)
.xx "" "core:" "format of core image file." "" core(4)
.xx "" "cpio:" "format of cpio archive." "" cpio(4)
.xx "" "dir:" "format of directories." "" dir(4)
.xx "" "/graphical primitive string," "format of graphical files." "" gps(4)
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)
.xx "" "file system:" "format of system volume." "" fs(4)
.xx "files." "fspec:" "format specification in text" "" fspec(4)
.xx "" "object file symbol table" "format." "syms: common" syms(4)
.xx "" "intro: introduction to file" "formats." "" intro(4)
.xx "" "wtmp: utmp and wtmp entry" "formats." "utmp," utmp(4)
.xx "" "scanf, fscanf, sscanf: convert" "formatted input." "" scanf(3S)
.xx "" "/vfprintf, vsprintf: print" "formatted output of a varargs/" "" vprintf(3S)
.xx "" "/vfprintf, vsprintf: print" "formatted output of a varargs/" "" vprintf(3X)
.xx "" "fprintf, sprintf: print" "formatted output." "printf," printf(3S)
.xx "" "dcutest: disk" "formatter and test program." "" dcutest(1M)
.xx "" "f77:" "FORTRAN 77 compiler." "" f77(1)
.xx "" "abs, iabs, dabs, cabs, zabs:" "FORTRAN absolute value." "" abs(3F)
.xx "system/" "signal: specify" "FORTRAN action on receipt of a" "" signal(3F)
.xx "function." "acos, dacos:" "FORTRAN arccosine intrinsic" "" acos(3F)
.xx "function." "asin, dasin:" "FORTRAN arcsine intrinsic" "" asin(3F)
.xx "function." "atan2, datan2:" "FORTRAN arctangent intrinsic" "" atan2(3F)
.xx "function." "atan, datan:" "FORTRAN arctangent intrinsic" "" atan(3F)
.xx "" "or, xor, not, lshift, rshift:" "FORTRAN bitwise Boolean/" "and," bool(3F)
.xx "" "getarg: return" "FORTRAN command-line argument." "" getarg(3F)
.xx "" "log10, alog10, dlog10:" "FORTRAN common logarithm/" "" log10(3F)
.xx "intrinsic/" "conjg, dconjg:" "FORTRAN complex conjugate" "" conjg(3F)
.xx "function." "cos, dcos, ccos:" "FORTRAN cosine intrinsic" "" cos(3F)
.xx "" "ratfor: rational" "FORTRAN dialect." "" ratfor(1)
.xx "" "getenv: return" "FORTRAN environment variable." "" getenv(3F)
.xx "function." "exp, dexp, cexp:" "FORTRAN exponential intrinsic" "" exp(3F)
.xx "intrinsic/" "cosh, dcosh:" "FORTRAN hyperbolic cosine" "" cosh(3F)
.xx "intrinsic/" "sinh, dsinh:" "FORTRAN hyperbolic sine" "" sinh(3F)
.xx "intrinsic/" "tanh, dtanh:" "FORTRAN hyperbolic tangent" "" tanh(3F)
.xx "complex/" "aimag, dimag:" "FORTRAN imaginary part of" "" aimag(3F)
.xx "function." "aint, dint:" "FORTRAN integer part intrinsic" "" aint(3F)
.xx "" "ef\&l: Extended" "FORTRAN Language." "" efl(1)
.xx "" "amax0, max1, amax1, dmax1:" "FORTRAN maximum-value/" "/max0," max(3F)
.xx "" "amin0, min1, amin1, dmin1:" "FORTRAN minimum-value/" "/min0," min(3F)
.xx "" "log, alog, dlog, clog:" "FORTRAN natural logarithm/" "" log(3F)
.xx "" "anint, dnint, nint, idnint:" "FORTRAN nearest integer/" "" round(3F)
.xx "" "abort: terminate" "FORTRAN program." "" abort(3F)
.xx "functions." "mod, amod, dmod:" "FORTRAN remaindering intrinsic" "" mod(3F)
.xx "function." "sin, dsin, csin:" "FORTRAN sine intrinsic" "" sin(3F)
.xx "function." "sqrt, dsqrt, csqrt:" "FORTRAN square root intrinsic" "" sqrt(3F)
.xx "" "len: return length of" "FORTRAN string." "" len(3F)
.xx "" "index: return location of" "FORTRAN substring." "" index(3F)
.xx "" "issue a shell command from" "FORTRAN." "system:" system(3F)
.xx "function." "tan, dtan:" "FORTRAN tangent intrinsic" "" tan(3F)
.xx "" "mclock: return" "FORTRAN time accounting." "" mclock(3F)
.xx "intrinsic/" "sign, isign, dsign:" "FORTRAN transfer-of-sign" "" sign(3F)
.xx "" "/dcmplx, ichar, char: explicit" "FORTRAN type conversion." "" ftype(3F)
.xx "formatted output." "printf," "fprintf, sprintf: print" "" printf(3S)
.xx "word on a/" "putc, putchar," "fputc, putw: put character or" "" putc(3S)
.xx "stream." "puts," "fputs: put a string on a" "" puts(3S)
.xx "input/output." "" "fread, fwrite: binary" "" fread(3S)
.xx "backup tape." "" "frec: recover files from a" "" frec(1M)
.xx "" "df: report number of" "free disk blocks." "" df(1M)
.xx "memory allocator." "malloc," "free, realloc, calloc: main" "" malloc(3C)
.xx "mallopt, mallinfo:/" "malloc," "free, realloc, calloc," "" malloc(3X)
.xx "stream." "fopen," "freopen, fdopen: open a" "" fopen(3S)
.xx "parts of floating-point/" "" "frexp, ldexp, modf: manipulate" "" frexp(3C)
.xx "" "frec: recover files" "from a backup tape." "" frec(1M)
.xx "" "/and line number information" "from a common object file." "" strip(1)
.xx "" "getw: get character or word" "from a stream." "/fgetc," getc(3S)
.xx "" "gets, fgets: get a string" "from a stream." "" gets(3S)
.xx "" "rmdel: remove a delta" "from an SCCS file." "" rmdel(1)
.xx "" "getopt: get option letter" "from argument vector." "" getopt(3C)
.xx "" "errdead: extract error records" "from dump." "" errdead(1M)
.xx "" "read: read" "from file." "" read(2)
.xx "" "system: issue a shell command" "from FORTRAN." "" system(3F)
.xx "" "ncheck: generate names" "from i-numbers." "" ncheck(1M)
.xx "" "nlist: get entries" "from name list." "" nlist(3C)
.xx "" "acctcms: command summary" "from per-process accounting/" "" acctcms(1M)
.xx "" "getpw: get name" "from UID." "" getpw(3C)
.xx "" "/ROM monitor executable files" "from UNIX system V executable/" "" 5toG(1M)
