.TH HSEARCH 3C 
.SH NAME
hsearch, hcreate, hdestroy \- manage hash search tables 
.SH SYNOPSIS
.B #include <search.h>
.PP
.B \s-1ENTRY\s+1 \(**hsearch (item, action)
.br
.B \s-1ENTRY\s+1 item;
.br
.B \s-1ACTION\s+1 action;
.PP
.B int hcreate (nel)
.br
.B unsigned nel;
.PP
.B void hdestroy ( )
.SH DESCRIPTION
.I Hsearch\^
is a hash-table search routine generalized from Knuth (6.4) Algorithm D.
It returns a pointer into a hash table indicating the location at which
an entry can be found.
.I Item\^
is a structure of type
.SM ENTRY
(defined in the 
.RI < search.h >
header file)
containing two pointers:
.I item.key\^
points to the comparison key, and
.I item.data\^
points to any other data to be associated with that key.
(Pointers to types other than character
should be cast to pointer-to-character.)
.I Action\^
is a member of an enumeration type
.SM ACTION
indicating the disposition of the entry if it cannot be found in the table.
.SM
.B ENTER
indicates that the item should be inserted in the table at an
appropriate point.
.SM
.B FIND
indicates that no entry should be made.
Unsuccessful resolution is 
indicated by the return of a 
.SM NULL
pointer.
.P
.I Hcreate\^
allocates sufficient space for the table, and must be called before
.I hsearch\^
is used.
.I Nel\^
is an estimate of the maximum number of entries that
the table will contain.
This number may be adjusted upward by the
algorithm in order to obtain certain mathematically favorable
circumstances.
.P
.I Hdestroy\^
destroys the search table,
and may be followed by another call to
.IR hcreate .
.SH NOTES
.I Hsearch\^
uses
.I open addressing\^
with a
.I multiplicative\^
hash function.
However, its source code has many other options
available which the user may select by compiling the
.I hsearch\^
source with the following symbols defined to the preprocessor:
.RS
.TP \w'\s-1CHAINED\s+1\ \ 'u
.B \s-1DIV\s+1
Use the
.I remainder modulo table size\^
as the hash function instead of the multiplicative algorithm.
.TP
.B \s-1USCR\s+1
Use a User Supplied Comparison Routine for ascertaining
table membership.
The routine should be named
.I hcompar\^
and should behave in a mannner similar to
.I strcmp
(see
.IR string (3C)).
.TP
.B \s-1CHAINED\s+1
Use a linked list to resolve collisions.
If this option is selected,
the following other options become available.
.RS
.TP \w'\s-1SORTDOWN\s+1\ \ 'u
.B \s-1START\s+1
Place new entries at the beginning of the linked list (default is at
the end).
.TP
.B \s-1SORTUP\s+1
Keep the linked list sorted by key in ascending order.
.TP
.B \s-1SORTDOWN\s+1
Keep the linked list sorted by key in descending order.
.RE
.RE
.P
Additionally, there are preprocessor flags for obtaining debugging
printout
.RB ( \-\s-1DDEBUG\s+1 )
and for including a test driver in the calling routine
.RB ( \-\s-1DDRIVER\s+1 ).
The source code should be consulted for further details.
.SH EXAMPLE
The following example will read in strings followed by two
numbers and store them in a hash table, discarding duplicates.
It will then read in strings and find the matching entry
in the hash table and print it out.
.PP
.in -8
.RS
.nf
.ss 18
#include <stdio.h>
#include <search.h>

struct info {		/\(** this is the info stored in the table \(**/
	int age, room;	/\(** other than the key. \(**/
};
#define \s-1NUM_EMPL\s+1    5000    /\(** # of elements in search table \(**/

main( )
{
	/\(** space to store strings \(**/
	char string_space[\s-1NUM_EMPL\s+1\(**20]; 
	/\(** space to store employee info \(**/
	struct info info_space[\s-1NUM_EMPL\s+1];
	/\(** next avail space in string_space \(**/
	char \(**str_ptr = string_space; 
	/\(** next avail space in info_space \(**/
	struct info \(**info_ptr = info_space; 
	\s-1ENTRY\s+1 item, \(**found_item, \(**hsearch( );
	/\(** name to look for in table \(**/
	char name_to_find[30];	
	int i = 0;

	/\(** create table \(**/
	(void) hcreate(\s-1NUM_EMPL\s+1);
	while (scanf("%s%d%d", str_ptr, &info_ptr\(mi>age,
	       &info_ptr\(mi>room) != \s-1EOF\s+1 && i++ < \s-1NUM_EMPL\s+1) {
		/\(** put info in structure, and structure in item \(**/
		item.key = str_ptr;
		item.data = (char \(**)info_ptr;
		str_ptr += strlen(str_ptr) + 1;
		info_ptr++;
		/\(** put item into table \(**/
		(void) hsearch(item, \s-1ENTER\s+1);
	}

	/\(** access table \(**/
	item.key = name_to_find;
	while (scanf("%s", item.key) != \s-1EOF\s+1) {
	    if ((found_item = hsearch(item, \s-1FIND\s+1)) != \s-1NULL\s+1) {
		/\(** if item is in the table \(**/
		(void)printf("found %s, age = %d, room = %d\en",
			found_item\(mi>key,
			((struct info \(**)found_item\(mi>data)\(mi>age,
			((struct info \(**)found_item\(mi>data)\(mi>room);
	    } else {
		(void)printf("no such employee %s\en",
			name_to_find)
	    }
	}
}
.br
.in +8
.SH SEE ALSO
bsearch(3C),
lsearch(3C),
malloc(3C),
malloc(3X),
string(3C),
tsearch(3C).
.SH DIAGNOSTICS
.I Hsearch\^
returns a
.SM NULL
pointer if either the action is
.SM
.B FIND
and the item could not be found or the action is
.SM
.B ENTER
and the table is full.
.P
.I Hcreate\^
returns zero if it cannot allocate sufficient space for the
table.
.SH WARNING
.I Hsearch
and 
.I hcreate
use
.IR malloc (3C)
to allocate space.
.SH BUGS
Only one hash search table may be active at any given time.
.\"	%W% of %G%
