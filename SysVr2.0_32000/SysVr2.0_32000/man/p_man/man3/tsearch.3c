.TH TSEARCH 3C 
.SH NAME
tsearch, tfind, tdelete, twalk \- manage binary search trees
.SH SYNOPSIS
.B #include <search.h>
.PP
.B "char \(**tsearch ((char \(**) key, (char \(**\(**) rootp, compar)"
.br
.B int (\(**compar)( );
.PP
.B "char \(**tfind ((char \(**) key, (char \(**\(**) rootp, compar)"
.br
.B int (\(**compar)( );
.PP
.B "char \(**tdelete ((char \(**) key, (char \(**\(**) rootp, compar)"
.br
.B int (\(**compar)( );
.PP
.B "void twalk ((char \(**) root, action)"
.br
.B void (\(**action)( );
.SH DESCRIPTION
.I Tsearch,\^
.I tfind,\^
.I tdelete,\^
and
.I twalk
are routines for manipulating binary search trees.
They are generalized from Knuth (6.2.2) Algorithms T and D.
All comparisons are done with a user-supplied routine.
This routine is called with two arguments,
the pointers to the elements being compared.
It returns an integer less than, equal to,
or greater than 0, according to whether the first argument
is to be considered less than, equal to or greater than the
second argument.
The comparison function need not compare every byte,
so arbitrary data may be contained in the elements
in addition to the values
being compared.
.PP
.I Tsearch\^
is used to build and access the tree.
.B Key
is a pointer to a datum to be accessed or stored.
If there is a datum in the tree
equal to \(**key (the value pointed to by key),
a pointer to this found
datum is returned.
Otherwise, \(**key is inserted, and a pointer to it
returned.
Only pointers are copied, so the calling routine must
store the data.
.B Rootp\^
points to a variable that points to the root
of the tree.
A
.SM NULL
value for the variable pointed to by
.B rootp
denotes an empty tree;
in this case,
the variable will be set to point to the datum
which will be at the root of the new tree.
.PP
Like
.IR tsearch ,
.I tfind\^
will search for a datum in the tree, returning a pointer
to it if found.
However, if it is not found,
.I tfind\^
will return a
.SM NULL
pointer.
The arguments for
.I tfind\^
are the same as for
.IR tsearch .
.PP
.I Tdelete\^
deletes a node from a binary search tree.
The arguments are the same as for 
.IR tsearch .
The variable pointed to by
.B rootp\^
will be changed if the deleted node was the root of the tree.
.I Tdelete\^
returns a pointer to the parent of the deleted node,
or a
.SM NULL
pointer if the node is not found.
.PP
.I Twalk\^
traverses a binary search tree.
.B Root\^
is the root of the tree to be traversed.
(Any node in a tree may be used as the root for a walk below that node.)
.I Action\^
is the name of a routine
to be invoked at each node.
This routine is, in turn,
called with three arguments.
The first argument is the address of the node being visited.
The second argument is a value from an enumeration data type
.I "typedef enum { preorder, postorder, endorder, leaf }"
.SM
.I VISIT;
(defined in the 
.RI < search.h >
header file),
depending on whether this is the first, second or third
time that the node has been visited
(during a depth-first, left-to-right traversal of the tree),
or whether the node is a leaf.
The third argument is the level of the node
in the tree, with the root being level zero.
.PP
The pointers to the key and the root of the tree should be
of type pointer-to-element,
and cast to type pointer-to-character.
Similarly, although declared as type pointer-to-character,
the value returned should be cast into type pointer-to-element.
.SH EXAMPLE
The following code reads in strings and
stores structures containing a pointer to each string
and a count of its length.
It then walks the tree, printing out the stored strings
and their lengths in alphabetical order.
.PP
.RS
.nf
.ss 18
#include <search.h>
#include <stdio.h>

struct node {		/\(** pointers to these are stored in the tree \(**/
	char \(**string;
	int length;
};
char string_space[10000];	/\(** space to store strings \(**/
struct node nodes[500];		/\(** nodes to store \(**/
struct node \(**root = \s-1NULL\s+1;	/\(** this points to the root \(**/

main( )
{
	char \(**strptr = string_space;
	struct node \(**nodeptr = nodes;
	void print_node( ), twalk( );
	int i = 0, node_compare( );

	while (gets(strptr) != \s-1NULL\s+1 && i++ < 500)  {
		/\(** set node \(**/
		nodeptr\(mi>string = strptr;
		nodeptr\(mi>length = strlen(strptr);
		/\(** put node into the tree \(**/
		(void) tsearch((char \(**)nodeptr, &root,
			  node_compare);
		/\(** adjust pointers, so we don't overwrite tree \(**/
		strptr += nodeptr\(mi>length + 1;
		nodeptr++;
	}
	twalk(root, print_node);
}
/\(**
	This routine compares two nodes, based on an
	alphabetical ordering of the string field.
\(**/
int
node_compare(node1, node2)
struct node \(**node1, \(**node2;
{
	return strcmp(node1\(mi>string, node2\(mi>string);
}
/\(**
	This routine prints out a node, the first time
	twalk encounters it.
\(**/
.bp
void
print_node(node, order, level)
struct node \(**\(**node;
\s-1VISIT\s+1 order;
int level;
{
	if (order == preorder \(or\(or order == leaf)  {
		(void)printf("string = %20s,  length = %d\en",
			(\(**node)\(mi>string, (\(**node)\(mi>length);
	}
}
.fi
.RE
.SH SEE ALSO
bsearch(3C), hsearch(3C), lsearch(3C).
.SH DIAGNOSTICS
A
.SM NULL
pointer is returned by 
.I tsearch\^
if there is not enough space available to create a new node.
.br
A
.SM NULL
pointer is returned by
.I tsearch\^,
.I tfind\^
and
.I tdelete\^
if
.B rootp\^
is
.SM NULL
on entry.
.br
If the datum is found, both 
.I tsearch
and 
.I tfind
return a pointer to it.
If not, 
.I tfind
returns \s-1NULL\s+1, and 
.I tsearch
returns a pointer to the inserted
item.
.SH WARNINGS
The
.B root\^
argument to 
.I twalk\^
is one level of indirection less than the
.B rootp\^
arguments to
.I tsearch\^
and
.IR tdelete .
.br
There are two nomenclatures used to refer to the order in which
tree nodes are visited.
.I Tsearch\^
uses preorder, postorder and endorder to respectively refer to
visting a node before any of its children, after its left child
and before its right, and after both its children.
The alternate nomenclature uses preorder, inorder and postorder to
refer to the same visits, which could result in some confusion over
the meaning of postorder.
.SH BUGS
If the calling function alters the pointer to the
root, results are unpredictable.
.\"	%W% of %G%
