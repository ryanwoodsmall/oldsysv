.TH MONITOR 3C 
.SH NAME
monitor \- prepare execution profile
.SH SYNOPSIS
.nf
.B #include <mon.h>
.PP
.B "void monitor (lowpc, highpc, buffer, bufsize, nfunc)"
.B int (\(**lowpc)( ), (\(**highpc)( );
.B WORD \(**buffer;
.B int bufsize, nfunc;
.SH DESCRIPTION
An executable program created by
.B cc \-p
automatically includes calls for
.I monitor\^
with default parameters;
.I monitor\^
needn't be called explicitly
except to gain fine control over profiling.
.PP
.I Monitor\^
is an interface to
.IR profil (2).
.I Lowpc\^
and
.I highpc\^
are the addresses of two functions;
.I buffer\^
is the address of a (user supplied)
array of
.I bufsize\^
\s-1WORD\s+1s (defined in the
.I <mon.h>
header file).
.I Monitor\^
arranges to record a histogram of
periodically sampled values of the program counter,
and of counts of calls
of certain functions, in the buffer.
The lowest address sampled
is that of
.I lowpc\^
and the highest is
just below
.IR highpc .
.I Lowpc\^
may not equal 0 for this use of
.IR monitor .
At most
.I nfunc\^
call counts can be kept; only calls of functions
compiled with the profiling option
.B \-p
of
.IR cc (1)
are recorded.
.PP
For the results to be significant,
especially where there are small, heavily
used routines,
it is suggested that the buffer be no more
than a few times smaller than the range
of locations sampled.
.PP
To profile the entire program,
it is sufficient to use
.PP
	extern etext;
.br
	...
.br
	monitor ((int (\(**)())2, etext, buf, bufsize, nfunc);
.PP
.I Etext\^
lies just above all the
program text; see
.IR end (3C).
.PP
To stop execution monitoring and write the results
on the file
.BR mon.out ,
use
.PP
	monitor ((int (\(**)())0, 0, 0, 0, 0);
.PP
.IR Prof (1)
can then be used
to examine the results.
.SH FILES
mon.out
.br
/lib/libp/libc.a
.br
/lib/libp/libm.a
.SH SEE ALSO
profil(2), end(3C).
.br
cc(1), prof(1) in the
\f2\s-1UNIX\s+1 System V User Reference Manual\fR.
.\"	%W% of %G%
