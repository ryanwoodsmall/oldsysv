.TH LSEARCH 3C 
.SH NAME
lsearch, lfind \- linear search and update
.SH SYNOPSIS
.B #include <stdio.h>
.br
.B #include <search.h>
.PP
.B "char \(**lsearch ((char \(**)key, (char \(**)base, nelp, sizeof(\(**key), compar)"
.br
.B unsigned \(**nelp;
.br
.B int (\(**compar)( );
.PP
.B "char \(**lfind ((char \(**)key, (char \(**)base, nelp, sizeof(\(**key), compar)"
.br
.B unsigned \(**nelp;
.br
.B int (\(**compar)( );
.SH DESCRIPTION
.I Lsearch\^
is a linear search routine generalized from Knuth (6.1) Algorithm S.
It returns a pointer into a table indicating where
a datum may be found.
If the datum does not occur, it is added
at the end of the table.
.B Key\^
points to the datum to be sought in the table.
.B Base\^
points to the first element in the table.
.B Nelp\^
points to an integer containing the current number of 
elements in the table.
The integer is incremented if the datum is added to the table.
.B Compar\^
is the name of the comparison function which the user must supply
.RI ( strcmp ,
for example).
It is called with two arguments that point
to the elements being compared.
The function must return zero if the elements
are equal and non-zero otherwise.
.PP
.I Lfind\^
is the same as 
.I lsearch\^
except that if the datum is not found, it is not added
to the table. 
Instead, a 
.SM NULL
pointer is returned.
.SH NOTES
The pointers to the key and the element
at the base of the table should be
of type pointer-to-element,
and cast to type pointer-to-character.
.br
The comparison function need not compare every byte,
so arbitrary data may be contained in the elements
in addition to the values being compared.
.br
Although declared as type pointer-to-character,
the value returned should be cast into type pointer-to-element.
.SH EXAMPLE
This fragment will read in \(<= \s-1TABSIZE\s+1 
strings of length \(<= \s-1ELSIZE\s+1
and store them in a table, eliminating duplicates.
.PP
.RS
.nf
.ss 18
#include <stdio.h>
#include <search.h>

#define \s-1TABSIZE\s+1 50
#define \s-1ELSIZE\s+1 120

	char line[\s-1ELSIZE\s+1], tab[\s-1TABSIZE\s+1][\s-1ELSIZE\s+1], \(**lsearch( );
	unsigned nel = 0;
	int strcmp( );
	. . .
	while (fgets(line, \s-1ELSIZE\s+1, stdin) != \s-1NULL\s+1 &&
	   nel < \s-1TABSIZE\s+1)
		(void) lsearch(line, (char \(**)tab, &nel,
			  \s-1ELSIZE\s+1, strcmp);
	. . .
.fi
.SH SEE ALSO
bsearch(3C), hsearch(3C), tsearch(3C).
.SH DIAGNOSTICS
If the searched for datum is found, both 
.I lsearch\^
and 
.I lfind\^
return a pointer
to it.
Otherwise, 
.I lfind\^
returns NULL and 
.I lsearch\^
returns a pointer to the newly
added element.
.SH BUGS
Undefined results can occur if there is not enough room in the table to
add a new item.
.\"	%W% of %G%
