.xx "" "l3tol, ltol3: convert between" "3-byte integers and long/" "" l3tol(3C)
.xx "long integer and base-64/" "" "a64l, l64a: convert between" "" a64l(3C)
.xx "" "" "abort: generate an IOT fault." "" abort(3C)
.xx "program." "" "abort: terminate Fortran" "" abort(3F)
.xx "Fortran absolute value." "" "abs, iabs, dabs, cabs, zabs:" "" abs(3F)
.xx "value." "" "abs: return integer absolute" "" abs(3C)
.xx "" "abs: return integer" "absolute value." "" abs(3C)
.xx "" "dabs, cabs, zabs: Fortran" "absolute value." "abs, iabs," abs(3F)
.xx "" "/floor, ceiling, remainder," "absolute value functions." "" floor(3M)
.xx "" "utime: set file" "access and modification times." "" utime(2)
.xx "accessibility of a file." "" "access: determine" "" access(2)
.xx "" "sputl, sgetl:" "access long integer data in a/" "" sputl(3X)
.xx "" "ldfcn: common object file" "access routines." "" ldfcn(4)
.xx "" "/setutent, endutent, utmpname:" "access utmp file entry." "" getut(3C)
.xx "" "access: determine" "accessibility of a file." "" access(2)
.xx "" "enable or disable process" "accounting." "acct:" acct(2)
.xx "" "acct: per-process" "accounting file format." "" acct(4)
.xx "" "mclock: return Fortran time" "accounting." "" mclock(3F)
.xx "process accounting." "" "acct: enable or disable" "" acct(2)
.xx "file format." "" "acct: per-process accounting" "" acct(4)
.xx "" "sin, cos, tan, asin," "acos, atan, atan2:/" "" trig(3M)
.xx "intrinsic function." "" "acos, dacos: Fortran arccosine" "" acos(3F)
.xx "" "putenv: change or" "add value to environment." "" putenv(3C)
.xx "imaginary part of complex/" "" "aimag, dimag: Fortran" "" aimag(3F)
.xx "part intrinsic function." "" "aint, dint: Fortran integer" "" aint(3F)
.xx "" "alarm: set a process" "alarm clock." "" alarm(2)
.xx "clock." "" "alarm: set a process alarm" "" alarm(2)
.xx "" "a one way hashing encryption" "algorithm." "crypt, encrypt:" crypt(3C)
.xx "" "change data segment space" "allocation." "brk, sbrk:" brk(2)
.xx "" "realloc, calloc: main memory" "allocator." "malloc, free," malloc(3C)
.xx "" "mallinfo: fast main memory" "allocator." "/calloc, mallopt," malloc(3X)
.xx "natural logarithm/" "log," "alog, dlog, clog: Fortran" "" log(3F)
.xx "logarithm intrinsic/" "log10," "alog10, dlog10: Fortran common" "" log10(3F)
.xx "Fortran/" "max, max0," "amax0, max1, amax1, dmax1:" "" max(3F)
.xx "" "max, max0, amax0, max1," "amax1, dmax1: Fortran/" "" max(3F)
.xx "Fortran/" "min, min0," "amin0, min1, amin1, dmin1:" "" min(3F)
.xx "" "min, min0, amin0, min1," "amin1, dmin1: Fortran/" "" min(3F)
.xx "remaindering intrinsic/" "mod," "amod, dmod: Fortran" "" mod(3F)
.xx "rshift: Fortran bitwise/" "" "and, or, xor, not, lshift," "" bool(3F)
.xx "Fortran nearest integer/" "" "anint, dnint, nint, idnint:" "" round(3F)
.xx "link editor output." "" "a.out: common assembler and" "" a.out(4)
.xx "format." "" "ar: common archive file" "" ar(4)
.xx "" "acos, dacos: Fortran" "arccosine intrinsic function." "" acos(3F)
.xx "" "cpio: format of cpio" "archive." "" cpio(4)
.xx "" "ar: common" "archive file format." "" ar(4)
.xx "" "header of a member of an" "archive file." "/the archive" ldahread(3X)
.xx "an archive/" "ldahread: read the" "archive header of a member of" "" ldahread(3X)
.xx "" "asin, dasin: Fortran" "arcsine intrinsic function." "" asin(3F)
.xx "" "atan2, datan2: Fortran" "arctangent intrinsic function." "" atan2(3F)
.xx "" "atan, datan: Fortran" "arctangent intrinsic function." "" atan(3F)
.xx "" "imaginary part of complex" "argument." "/dimag: Fortran" aimag(3F)
.xx "" "return Fortran command-line" "argument." "getarg:" getarg(3F)
.xx "" "varargs: handle variable" "argument list." "" varargs(5)
.xx "" "formatted output of a varargs" "argument list." "/print" vprintf(3S)
.xx "" "formatted output of a varargs" "argument list." "/print" vprintf(3X)
.xx "" "getopt: get option letter from" "argument vector." "" getopt(3C)
.xx "" "the number of command line" "arguments." "iargc: return" iargc(3F)
.xx "" "ascii: map of" "ASCII character set." "" ascii(5)
.xx "set." "" "ascii: map of ASCII character" "" ascii(5)
.xx "" "long integer and base-64" "ASCII string." "/convert between" a64l(3C)
.xx "and/" "ctime, localtime, gmtime," "asctime, tzset: convert date" "" ctime(3C)
.xx "trigonometric/" "sin, cos, tan," "asin, acos, atan, atan2:" "" trig(3M)
.xx "intrinsic function." "" "asin, dasin: Fortran arcsine" "" asin(3F)
.xx "output." "a.out: common" "assembler and link editor" "" a.out(4)
.xx "assertion." "" "assert: verify program" "" assert(3X)
.xx "" "assert: verify program" "assertion." "" assert(3X)
.xx "" "setbuf, setvbuf:" "assign buffering to a stream." "" setbuf(3S)
.xx "" "sin, cos, tan, asin, acos," "atan, atan2: trigonometric/" "" trig(3M)
.xx "arctangent intrinsic/" "" "atan, datan: Fortran" "" atan(3F)
.xx "arctangent intrinsic/" "" "atan2, datan2: Fortran" "" atan2(3F)
.xx "" "cos, tan, asin, acos, atan," "atan2: trigonometric/" "sin," trig(3M)
.xx "double-precision/" "strtod," "atof: convert string to" "" strtod(3C)
.xx "integer." "strtol, atol," "atoi: convert string to" "" strtol(3C)
.xx "integer." "strtol," "atol, atoi: convert string to" "" strtol(3C)
.xx "" "ungetc: push character" "back into input stream." "" ungetc(3S)
.xx "" "terminal capability data" "base." "terminfo:" terminfo(4)
.xx "" "between long integer and" "base-64 ASCII string." "/convert" a64l(3C)
.xx "" "j0, j1, jn, y0, y1, yn:" "Bessel functions." "" bessel(3M)
.xx "" "fread, fwrite:" "binary input/output." "" fread(3S)
.xx "" "bsearch:" "binary search a sorted table." "" bsearch(3C)
.xx "" "tfind, tdelete, twalk: manage" "binary search trees." "tsearch," tsearch(3C)
.xx "" "/not, lshift, rshift: Fortran" "bitwise boolean functions." "" bool(3F)
.xx "" "rshift: Fortran bitwise" "boolean functions." "/lshift," bool(3F)
.xx "space allocation." "" "brk, sbrk: change data segment" "" brk(2)
.xx "sorted table." "" "bsearch: binary search a" "" bsearch(3C)
.xx "" "stdio: standard" "buffered input/output package." "" stdio(3S)
.xx "" "setbuf, setvbuf: assign" "buffering to a stream." "" setbuf(3S)
.xx "" "swab: swap" "bytes." "" swab(3C)
.xx "value." "abs, iabs, dabs," "cabs, zabs: Fortran absolute" "" abs(3F)
.xx "" "data returned by stat system" "call." "stat:" stat(5)
.xx "" "malloc, free, realloc," "calloc: main memory allocator." "" malloc(3C)
.xx "fast/" "malloc, free, realloc," "calloc, mallopt, mallinfo:" "" malloc(3X)
.xx "" "intro: introduction to system" "calls and error numbers." "" intro(2)
.xx "" "terminfo: terminal" "capability data base." "" terminfo(4)
.xx "" "pnch: file format for" "card images." "" pnch(4)
.xx "function." "cos, dcos," "ccos: Fortran cosine intrinsic" "" cos(3F)
.xx "ceiling, remainder,/" "floor," "ceil, fmod, fabs: floor," "" floor(3M)
.xx "" "/ceil, fmod, fabs: floor," "ceiling, remainder, absolute/" "" floor(3M)
.xx "intrinsic/" "exp, dexp," "cexp: Fortran exponential" "" exp(3F)
.xx "" "pipe: create an interprocess" "channel." "" pipe(2)
.xx "" "/dble, cmplx, dcmplx, ichar," "char: explicit Fortran type/" "" ftype(3F)
.xx "stream." "ungetc: push" "character back into input" "" ungetc(3S)
.xx "user." "cuserid: get" "character login name of the" "" cuserid(3S)
.xx "" "/getchar, fgetc, getw: get" "character or word from a/" "" getc(3S)
.xx "" "/putchar, fputc, putw: put" "character or word on a stream." "" putc(3S)
.xx "" "ascii: map of ASCII" "character set." "" ascii(5)
.xx "" "_tolower, toascii: translate" "characters." "/_toupper," conv(3C)
.xx "" "iscntrl, isascii: classify" "characters." "/isprint, isgraph," ctype(3C)
.xx "directory." "" "chdir: change working" "" chdir(2)
.xx "systems processed by fsck." "" "checklist: list of file" "" checklist(4)
.xx "" "times: get process and" "child process times." "" times(2)
.xx "terminate." "wait: wait for" "child process to stop or" "" wait(2)
.xx "" "" "chmod: change mode of file." "" chmod(2)
.xx "of a file." "" "chown: change owner and group" "" chown(2)
.xx "" "" "chroot: change root directory." "" chroot(2)
.xx "" "isgraph, iscntrl, isascii:" "classify characters." "/isprint," ctype(3C)
.xx "status/" "ferror, feof," "clearerr, fileno: stream" "" ferror(3S)
.xx "" "alarm: set a process alarm" "clock." "" alarm(2)
.xx "" "" "clock: report CPU time used." "" clock(3C)
.xx "logarithm/" "log, alog, dlog," "clog: Fortran natural" "" log(3F)
.xx "" "ldclose, ldaclose:" "close a common object file." "" ldclose(3X)
.xx "" "close:" "close a file descriptor." "" close(2)
.xx "descriptor." "" "close: close a file" "" close(2)
.xx "" "fclose, fflush:" "close or flush a stream." "" fclose(3S)
.xx "" "/real, float, sngl, dble," "cmplx, dcmplx, ichar, char:/" "" ftype(3F)
.xx "" "system: issue a shell" "command from Fortran." "" system(3F)
.xx "" "iargc: return the number of" "command line arguments." "" iargc(3F)
.xx "" "system: issue a shell" "command." "" system(3S)
.xx "" "getarg: return Fortran" "command-line argument." "" getarg(3F)
.xx "" "ar:" "common archive file format." "" ar(4)
.xx "editor output." "a.out:" "common assembler and link" "" a.out(4)
.xx "" "log10, alog10, dlog10: Fortran" "common logarithm intrinsic/" "" log10(3F)
.xx "routines." "ldfcn:" "common object file access" "" ldfcn(4)
.xx "" "ldopen, ldaopen: open a" "common object file for/" "" ldopen(3X)
.xx "" "/line number entries of a" "common object file function." "" ldlread(3X)
.xx "" "ldclose, ldaclose: close a" "common object file." "" ldclose(3X)
.xx "" "read the file header of a" "common object file." "ldfhread:" ldfhread(3X)
.xx "" "entries of a section of a" "common object file." "/number" ldlseek(3X)
.xx "" "the optional file header of a" "common object file." "/seek to" ldohseek(3X)
.xx "" "/entries of a section of a" "common object file." "" ldrseek(3X)
.xx "" "/section header of a" "common object file." "" ldshread(3X)
.xx "" "an indexed\/named section of a" "common object file." "/seek to" ldsseek(3X)
.xx "" "of a symbol table entry of a" "common object file." "/the index" ldtbindex(3X)
.xx "" "symbol table entry of a" "common object file." "/indexed" ldtbread(3X)
.xx "" "seek to the symbol table of a" "common object file." "ldtbseek:" ldtbseek(3X)
.xx "" "line number entries in a" "common object file." "linenum:" linenum(4)
.xx "" "relocation information for a" "common object file." "reloc:" reloc(4)
.xx "" "scnhdr: section header for a" "common object file." "" scnhdr(4)
.xx "" "/retrieve symbol name for" "common object file symbol/" "" ldgetname(3X)
.xx "table format." "syms:" "common object file symbol" "" syms(4)
.xx "" "filehdr: file header for" "common object files." "" filehdr(4)
.xx "" "ftok: standard interprocess" "communication package." "" stdipc(3C)
.xx "" "lge, lgt, lle, llt: string" "comparison intrinsic/" "" strcmp(3F)
.xx "expression." "regcmp, regex:" "compile and execute regular" "" regcmp(3X)
.xx "" "regexp: regular expression" "compile and match routines." "" regexp(5)
.xx "" "term: format of" "compiled term file.." "" term(4)
.xx "" "erf, erfc: error function and" "complementary error function." "" erf(3M)
.xx "" "Fortran imaginary part of" "complex argument." "/dimag:" aimag(3F)
.xx "" "conjg, dconjg: Fortran" "complex conjugate intrinsic/" "" conjg(3F)
.xx "table entry of a/" "ldtbindex:" "compute the index of a symbol" "" ldtbindex(3X)
.xx "conjugate intrinsic function." "" "conjg, dconjg: Fortran complex" "" conjg(3F)
.xx "" "conjg, dconjg: Fortran complex" "conjugate intrinsic function." "" conjg(3F)
.xx "" "an out-going terminal line" "connection." "dial: establish" dial(3C)
.xx "" "math: math functions and" "constants." "" math(5)
.xx "" "ioctl:" "control device." "" ioctl(2)
.xx "" "fcntl: file" "control." "" fcntl(2)
.xx "" "msgctl: message" "control operations." "" msgctl(2)
.xx "" "semctl: semaphore" "control operations." "" semctl(2)
.xx "" "shmctl: shared memory" "control operations." "" shmctl(2)
.xx "" "fcntl: file" "control options." "" fcntl(5)
.xx "terminals." "term:" "conventional names for" "" term(5)
.xx "" "char: explicit Fortran type" "conversion." "/dcmplx, ichar," ftype(3F)
.xx "integers and/" "l3tol, ltol3:" "convert between 3-byte" "" l3tol(3C)
.xx "and base-64 ASCII/" "a64l, l64a:" "convert between long integer" "" a64l(3C)
.xx "" "/gmtime, asctime, tzset:" "convert date and time to/" "" ctime(3C)
.xx "to string." "ecvt, fcvt, gcvt:" "convert floating-point number" "" ecvt(3C)
.xx "" "scanf, fscanf, sscanf:" "convert formatted input." "" scanf(3S)
.xx "" "strtod, atof:" "convert string to/" "" strtod(3C)
.xx "" "strtol, atol, atoi:" "convert string to integer." "" strtol(3C)
.xx "file." "" "core: format of core image" "" core(4)
.xx "" "core: format of" "core image file." "" core(4)
.xx "cosine intrinsic function." "" "cos, dcos, ccos: Fortran" "" cos(3F)
.xx "atan2: trigonometric/" "sin," "cos, tan, asin, acos, atan," "" trig(3M)
.xx "hyperbolic cosine intrinsic/" "" "cosh, dcosh: Fortran" "" cosh(3F)
.xx "functions." "sinh," "cosh, tanh: hyperbolic" "" sinh(3M)
.xx "" "cos, dcos, ccos: Fortran" "cosine intrinsic function." "" cos(3F)
.xx "" "/dcosh: Fortran hyperbolic" "cosine intrinsic function." "" cosh(3F)
.xx "" "cpio: format of" "cpio archive." "" cpio(4)
.xx "" "" "cpio: format of cpio archive." "" cpio(4)
.xx "" "clock: report" "CPU time used." "" clock(3C)
.xx "rewrite an existing one." "" "creat: create a new file or" "" creat(2)
.xx "file." "tmpnam, tempnam:" "create a name for a temporary" "" tmpnam(3S)
.xx "an existing one." "creat:" "create a new file or rewrite" "" creat(2)
.xx "" "fork:" "create a new process." "" fork(2)
.xx "" "tmpfile:" "create a temporary file." "" tmpfile(3S)
.xx "channel." "pipe:" "create an interprocess" "" pipe(2)
.xx "" "umask: set and get file" "creation mask." "" umask(2)
.xx "optimization package." "curses:" "CRT screen handling and" "" curses(3X)
.xx "hashing encryption algorithm." "" "crypt, encrypt: a one way" "" crypt(3C)
.xx "function." "sin, dsin," "csin: Fortran sine intrinsic" "" sin(3F)
.xx "intrinsic/" "sqrt, dsqrt," "csqrt: Fortran square root" "" sqrt(3F)
.xx "for terminal." "" "ctermid: generate file name" "" ctermid(3S)
.xx "asctime, tzset: convert date/" "" "ctime, localtime, gmtime," "" ctime(3C)
.xx "" "uname: get name of" "current UNIX system." "" uname(2)
.xx "" "slot in the utmp file of the" "current user." "/find the" ttyslot(3C)
.xx "" "getcwd: get path-name of" "current working directory." "" getcwd(3C)
.xx "and optimization package." "" "curses: CRT screen handling" "" curses(3X)
.xx "name of the user." "" "cuserid: get character login" "" cuserid(3S)
.xx "absolute value." "abs, iabs," "dabs, cabs, zabs: Fortran" "" abs(3F)
.xx "intrinsic function." "acos," "dacos: Fortran arccosine" "" acos(3F)
.xx "intrinsic function." "asin," "dasin: Fortran arcsine" "" asin(3F)
.xx "" "terminfo: terminal capability" "data base." "" terminfo(4)
.xx "" "/sgetl: access long integer" "data in a machine-independent/" "" sputl(3X)
.xx "" "plock: lock process, text, or" "data in memory." "" plock(2)
.xx "call." "stat:" "data returned by stat system" "" stat(5)
.xx "" "brk, sbrk: change" "data segment space allocation." "" brk(2)
.xx "" "types: primitive system" "data types." "" types(5)
.xx "intrinsic function." "atan," "datan: Fortran arctangent" "" atan(3F)
.xx "intrinsic function." "atan2," "datan2: Fortran arctangent" "" atan2(3F)
.xx "" "/asctime, tzset: convert" "date and time to string." "" ctime(3C)
.xx "" "/idint, real, float, sngl," "dble, cmplx, dcmplx, ichar,/" "" ftype(3F)
.xx "" "/float, sngl, dble, cmplx," "dcmplx, ichar, char: explicit/" "" ftype(3F)
.xx "conjugate intrinsic/" "conjg," "dconjg: Fortran complex" "" conjg(3F)
.xx "intrinsic function." "cos," "dcos, ccos: Fortran cosine" "" cos(3F)
.xx "cosine intrinsic/" "cosh," "dcosh: Fortran hyperbolic" "" cosh(3F)
.xx "difference intrinsic/" "dim," "ddim, idim: positive" "" dim(3F)
.xx "" "close: close a file" "descriptor." "" close(2)
.xx "" "dup: duplicate an open file" "descriptor." "" dup(2)
.xx "file." "access:" "determine accessibility of a" "" access(2)
.xx "" "master: master" "device information table." "" master(4)
.xx "" "ioctl: control" "device." "" ioctl(2)
.xx "exponential intrinsic/" "exp," "dexp, cexp: Fortran" "" exp(3F)
.xx "terminal line connection." "" "dial: establish an out-going" "" dial(3C)
.xx "" "dim, ddim, idim: positive" "difference intrinsic/" "" dim(3F)
.xx "difference intrinsic/" "" "dim, ddim, idim: positive" "" dim(3F)
.xx "of complex argument." "aimag," "dimag: Fortran imaginary part" "" aimag(3F)
.xx "intrinsic function." "aint," "dint: Fortran integer part" "" aint(3F)
.xx "" "" "dir: format of directories." "" dir(4)
.xx "" "dir: format of" "directories." "" dir(4)
.xx "" "chdir: change working" "directory." "" chdir(2)
.xx "" "chroot: change root" "directory." "" chroot(2)
.xx "" "unlink: remove" "directory entry." "" unlink(2)
.xx "" "path-name of current working" "directory." "getcwd: get" getcwd(3C)
.xx "ordinary file." "mknod: make a" "directory, or a special or" "" mknod(2)
.xx "" "acct: enable or" "disable process accounting." "" acct(2)
.xx "" "hypot: Euclidean" "distance function." "" hypot(3M)
.xx "" "/lcong48: generate uniformly" "distributed pseudo-random/" "" drand48(3C)
.xx "logarithm/" "log, alog," "dlog, clog: Fortran natural" "" log(3F)
.xx "logarithm/" "log10, alog10," "dlog10: Fortran common" "" log10(3F)
.xx "" "max, max0, amax0, max1, amax1," "dmax1: Fortran maximum-value/" "" max(3F)
.xx "" "min, min0, amin0, min1, amin1," "dmin1: Fortran minimum-value/" "" min(3F)
.xx "intrinsic/" "mod, amod," "dmod: Fortran remaindering" "" mod(3F)
.xx "nearest integer/" "anint," "dnint, nint, idnint: Fortran" "" round(3F)
.xx "intrinsic function." "dprod:" "double precision product" "" dprod(3F)
.xx "" "/atof: convert string to" "double-precision number." "" strtod(3C)
.xx "product intrinsic function." "" "dprod: double precision" "" dprod(3F)
.xx "nrand48, mrand48, jrand48,/" "" "drand48, erand48, lrand48," "" drand48(3C)
.xx "transfer-of-sign/" "sign, isign," "dsign: Fortran" "" sign(3F)
.xx "intrinsic function." "sin," "dsin, csin: Fortran sine" "" sin(3F)
.xx "intrinsic function." "sinh," "dsinh: Fortran hyperbolic sine" "" sinh(3F)
.xx "root intrinsic/" "sqrt," "dsqrt, csqrt: Fortran square" "" sqrt(3F)
.xx "intrinsic function." "tan," "dtan: Fortran tangent" "" tan(3F)
.xx "tangent intrinsic/" "tanh," "dtanh: Fortran hyperbolic" "" tanh(3F)
.xx "descriptor." "" "dup: duplicate an open file" "" dup(2)
.xx "descriptor." "dup:" "duplicate an open file" "" dup(2)
.xx "floating-point number to/" "" "ecvt, fcvt, gcvt: convert" "" ecvt(3C)
.xx "program." "end, etext," "edata: last locations in" "" end(3C)
.xx "" "common assembler and link" "editor output." "a.out:" a.out(4)
.xx "" "/user, real group, and" "effective group IDs." "" getuid(2)
.xx "and/" "/getegid: get real user," "effective user, real group," "" getuid(2)
.xx "accounting." "acct:" "enable or disable process" "" acct(2)
.xx "encryption algorithm." "crypt," "encrypt: a one way hashing" "" crypt(3C)
.xx "" "encrypt: a one way hashing" "encryption algorithm." "crypt," crypt(3C)
.xx "locations in program." "" "end, etext, edata: last" "" end(3C)
.xx "" "/getgrgid, getgrnam, setgrent," "endgrent, fgetgrent: get group/" "" getgrent(3C)
.xx "" "/getpwuid, getpwnam, setpwent," "endpwent, fgetpwent: get/" "" getpwent(3C)
.xx "utmp/" "/pututline, setutent," "endutent, utmpname: access" "" getut(3C)
.xx "" "nlist: get" "entries from name list." "" nlist(3C)
.xx "file." "linenum: line number" "entries in a common object" "" linenum(4)
.xx "file/" "/manipulate line number" "entries of a common object" "" ldlread(3X)
.xx "" "/ldnlseek: seek to line number" "entries of a section of a/" "" ldlseek(3X)
.xx "" "/ldnrseek: seek to relocation" "entries of a section of a/" "" ldrseek(3X)
.xx "" "utmp, wtmp: utmp and wtmp" "entry formats." "" utmp(4)
.xx "" "fgetgrent: get group file" "entry." "/setgrent, endgrent," getgrent(3C)
.xx "" "fgetpwent: get password file" "entry." "/setpwent, endpwent," getpwent(3C)
.xx "" "utmpname: access utmp file" "entry." "/setutent, endutent," getut(3C)
.xx "" "object file symbol table" "entry." "/symbol name for common" ldgetname(3X)
.xx "" "/the index of a symbol table" "entry of a common object file." "" ldtbindex(3X)
.xx "" "/read an indexed symbol table" "entry of a common object file." "" ldtbread(3X)
.xx "" "putpwent: write password file" "entry." "" putpwent(3C)
.xx "" "unlink: remove directory" "entry." "" unlink(2)
.xx "" "" "environ: user environment." "" environ(5)
.xx "" "profile: setting up an" "environment at login time." "" profile(4)
.xx "" "environ: user" "environment." "" environ(5)
.xx "" "getenv: return value for" "environment name." "" getenv(3C)
.xx "" "putenv: change or add value to" "environment." "" putenv(3C)
.xx "" "getenv: return Fortran" "environment variable." "" getenv(3F)
.xx "mrand48, jrand48,/" "drand48," "erand48, lrand48, nrand48," "" drand48(3C)
.xx "complementary error function." "" "erf, erfc: error function and" "" erf(3M)
.xx "complementary error/" "erf," "erfc: error function and" "" erf(3M)
.xx "format." "" "errfile: error-log file" "" errfile(4)
.xx "system error/" "perror," "errno, sys_errlist, sys_nerr:" "" perror(3C)
.xx "complementary/" "erf, erfc:" "error function and" "" erf(3M)
.xx "" "function and complementary" "error function." "/erfc: error" erf(3M)
.xx "" "sys_errlist, sys_nerr: system" "error messages." "/errno," perror(3C)
.xx "" "to system calls and" "error numbers." "/introduction" intro(2)
.xx "" "matherr:" "error-handling function." "" matherr(3M)
.xx "" "errfile:" "error-log file format." "" errfile(4)
.xx "terminal line/" "dial:" "establish an out-going" "" dial(3C)
.xx "in program." "end," "etext, edata: last locations" "" end(3C)
.xx "" "hypot:" "Euclidean distance function." "" hypot(3M)
.xx "execlp, execvp: execute a/" "" "execl, execv, execle, execve," "" exec(2)
.xx "execvp: execute/" "execl, execv," "execle, execve, execlp," "" exec(2)
.xx "" "execl, execv, execle, execve," "execlp, execvp: execute a/" "" exec(2)
.xx "" "execve, execlp, execvp:" "execute a file." "/execle," exec(2)
.xx "" "regcmp, regex: compile and" "execute regular expression." "" regcmp(3X)
.xx "" "sleep: suspend" "execution for interval." "" sleep(3C)
.xx "" "monitor: prepare" "execution profile." "" monitor(3C)
.xx "" "profil:" "execution time profile." "" profil(2)
.xx "execvp: execute a/" "execl," "execv, execle, execve, execlp," "" exec(2)
.xx "execute/" "execl, execv, execle," "execve, execlp, execvp:" "" exec(2)
.xx "" "/execv, execle, execve, execlp," "execvp: execute a file." "" exec(2)
.xx "" "a new file or rewrite an" "existing one." "creat: create" creat(2)
.xx "process." "" "exit, _exit: terminate" "" exit(2)
.xx "" "exit," "_exit: terminate process." "" exit(2)
.xx "exponential intrinsic/" "" "exp, dexp, cexp: Fortran" "" exp(3F)
.xx "exponential, logarithm,/" "" "exp, log, log10, pow, sqrt:" "" exp(3M)
.xx "" "cmplx, dcmplx, ichar, char:" "explicit Fortran type/" "/dble," ftype(3F)
.xx "" "exp, dexp, cexp: Fortran" "exponential intrinsic/" "" exp(3F)
.xx "" "exp, log, log10, pow, sqrt:" "exponential, logarithm, power,/" "" exp(3M)
.xx "routines." "regexp: regular" "expression compile and match" "" regexp(5)
.xx "" "compile and execute regular" "expression." "regcmp, regex:" regcmp(3X)
.xx "remainder,/" "floor, ceil, fmod," "fabs: floor, ceiling," "" floor(3M)
.xx "" "data in a machine-independent" "fashion.." "/access long integer" sputl(3X)
.xx "" "/calloc, mallopt, mallinfo:" "fast main memory allocator." "" malloc(3X)
.xx "" "abort: generate an IOT" "fault." "" abort(3C)
.xx "a stream." "" "fclose, fflush: close or flush" "" fclose(3S)
.xx "" "" "fcntl: file control." "" fcntl(2)
.xx "" "" "fcntl: file control options." "" fcntl(5)
.xx "floating-point number/" "ecvt," "fcvt, gcvt: convert" "" ecvt(3C)
.xx "" "fopen, freopen," "fdopen: open a stream." "" fopen(3S)
.xx "status inquiries." "ferror," "feof, clearerr, fileno: stream" "" ferror(3S)
.xx "fileno: stream status/" "" "ferror, feof, clearerr," "" ferror(3S)
.xx "stream." "fclose," "fflush: close or flush a" "" fclose(3S)
.xx "word from a/" "getc, getchar," "fgetc, getw: get character or" "" getc(3S)
.xx "" "/getgrnam, setgrent, endgrent," "fgetgrent: get group file/" "" getgrent(3C)
.xx "" "/getpwnam, setpwent, endpwent," "fgetpwent: get password file/" "" getpwent(3C)
.xx "stream." "gets," "fgets: get a string from a" "" gets(3S)
.xx "times." "utime: set" "file access and modification" "" utime(2)
.xx "" "ldfcn: common object" "file access routines." "" ldfcn(4)
.xx "" "determine accessibility of a" "file." "access:" access(2)
.xx "" "chmod: change mode of" "file." "" chmod(2)
.xx "" "change owner and group of a" "file." "chown:" chown(2)
.xx "" "fcntl:" "file control." "" fcntl(2)
.xx "" "fcntl:" "file control options." "" fcntl(5)
.xx "" "core: format of core image" "file." "" core(4)
.xx "" "umask: set and get" "file creation mask." "" umask(2)
.xx "" "close: close a" "file descriptor." "" close(2)
.xx "" "dup: duplicate an open" "file descriptor." "" dup(2)
.xx "" "endgrent, fgetgrent: get group" "file entry." "/setgrent," getgrent(3C)
.xx "" "fgetpwent: get password" "file entry." "/endpwent," getpwent(3C)
.xx "" "utmpname: access utmp" "file entry." "/endutent," getut(3C)
.xx "" "putpwent: write password" "file entry." "" putpwent(3C)
.xx "" "execlp, execvp: execute a" "file." "/execv, execle, execve," exec(2)
.xx "" "ldaopen: open a common object" "file for reading." "ldopen," ldopen(3X)
.xx "" "acct: per-process accounting" "file format." "" acct(4)
.xx "" "ar: common archive" "file format." "" ar(4)
.xx "" "errfile: error-log" "file format." "" errfile(4)
.xx "" "pnch:" "file format for card images." "" pnch(4)
.xx "" "intro: introduction to" "file formats." "" intro(4)
.xx "" "entries of a common object" "file function." "/line number" ldlread(3X)
.xx "" "group: group" "file." "" group(4)
.xx "files." "filehdr:" "file header for common object" "" filehdr(4)
.xx "file." "ldfhread: read the" "file header of a common object" "" ldfhread(3X)
.xx "" "ldohseek: seek to the optional" "file header of a common object/" "" ldohseek(3X)
.xx "" "issue: issue identification" "file." "" issue(4)
.xx "" "of a member of an archive" "file." "/read the archive header" ldahread(3X)
.xx "" "close a common object" "file." "ldclose, ldaclose:" ldclose(3X)
.xx "" "file header of a common object" "file." "ldfhread: read the" ldfhread(3X)
.xx "" "a section of a common object" "file." "/line number entries of" ldlseek(3X)
.xx "" "file header of a common object" "file." "/seek to the optional" ldohseek(3X)
.xx "" "a section of a common object" "file." "/relocation entries of" ldrseek(3X)
.xx "" "header of a common object" "file." "/indexed\/named section" ldshread(3X)
.xx "" "section of a common object" "file." "/to an indexed\/named" ldsseek(3X)
.xx "" "table entry of a common object" "file." "/the index of a symbol" ldtbindex(3X)
.xx "" "table entry of a common object" "file." "/read an indexed symbol" ldtbread(3X)
.xx "" "table of a common object" "file." "/seek to the symbol" ldtbseek(3X)
.xx "" "entries in a common object" "file." "linenum: line number" linenum(4)
.xx "" "link: link to a" "file." "" link(2)
.xx "" "or a special or ordinary" "file." "/make a directory," mknod(2)
.xx "" "ctermid: generate" "file name for terminal." "" ctermid(3S)
.xx "" "mktemp: make a unique" "file name." "" mktemp(3C)
.xx "" "/find the slot in the utmp" "file of the current user." "" ttyslot(3C)
.xx "one." "creat: create a new" "file or rewrite an existing" "" creat(2)
.xx "" "passwd: password" "file." "" passwd(4)
.xx "" "/rewind, ftell: reposition a" "file pointer in a stream." "" fseek(3S)
.xx "" "lseek: move read/write" "file pointer." "" lseek(2)
.xx "" "read: read from" "file." "" read(2)
.xx "" "for a common object" "file." "/relocation information" reloc(4)
.xx "" "sccsfile: format of SCCS" "file." "" sccsfile(4)
.xx "" "header for a common object" "file." "scnhdr: section" scnhdr(4)
.xx "" "stat, fstat: get" "file status." "" stat(2)
.xx "" "/symbol name for common object" "file symbol table entry." "" ldgetname(3X)
.xx "" "syms: common object" "file symbol table format." "" syms(4)
.xx "volume." "" "file system: format of system" "" fs(4)
.xx "" "mount: mount a" "file system." "" mount(2)
.xx "" "ustat: get" "file system statistics." "" ustat(2)
.xx "" "mnttab: mounted" "file system table." "" mnttab(4)
.xx "" "umount: unmount a" "file system." "" umount(2)
.xx "fsck." "checklist: list of" "file systems processed by" "" checklist(4)
.xx "" "term: format of compiled term" "file.." "" term(4)
.xx "" "tmpfile: create a temporary" "file." "" tmpfile(3S)
.xx "" "create a name for a temporary" "file." "tmpnam, tempnam:" tmpnam(3S)
.xx "" "ftw: walk a" "file tree." "" ftw(3C)
.xx "" "write: write on a" "file." "" write(2)
.xx "common object files." "" "filehdr: file header for" "" filehdr(4)
.xx "" "ferror, feof, clearerr," "fileno: stream status/" "" ferror(3S)
.xx "" "file header for common object" "files." "filehdr:" filehdr(4)
.xx "" "format specification in text" "files." "fspec:" fspec(4)
.xx "" "string, format of graphical" "files." "/graphical primitive" gps(4)
.xx "" "ttyname, isatty:" "find name of a terminal." "" ttyname(3C)
.xx "of the current user." "ttyslot:" "find the slot in the utmp file" "" ttyslot(3C)
.xx "" "int, ifix, idint, real," "float, sngl, dble, cmplx,/" "" ftype(3F)
.xx "" "ecvt, fcvt, gcvt: convert" "floating-point number to/" "" ecvt(3C)
.xx "" "/modf: manipulate parts of" "floating-point numbers." "" frexp(3C)
.xx "floor, ceiling, remainder,/" "" "floor, ceil, fmod, fabs:" "" floor(3M)
.xx "" "floor, ceil, fmod, fabs:" "floor, ceiling, remainder,/" "" floor(3M)
.xx "" "fclose, fflush: close or" "flush a stream." "" fclose(3S)
.xx "remainder,/" "floor, ceil," "fmod, fabs: floor, ceiling," "" floor(3M)
.xx "stream." "" "fopen, freopen, fdopen: open a" "" fopen(3S)
.xx "" "" "fork: create a new process." "" fork(2)
.xx "" "per-process accounting file" "format." "acct:" acct(4)
.xx "" "ar: common archive file" "format." "" ar(4)
.xx "" "errfile: error-log file" "format." "" errfile(4)
.xx "" "pnch: file" "format for card images." "" pnch(4)
.xx "" "inode:" "format of an i-node." "" inode(4)
.xx "" "term:" "format of compiled term file.." "" term(4)
.xx "" "core:" "format of core image file." "" core(4)
.xx "" "cpio:" "format of cpio archive." "" cpio(4)
.xx "" "dir:" "format of directories." "" dir(4)
.xx "" "/graphical primitive string," "format of graphical files." "" gps(4)
.xx "" "sccsfile:" "format of SCCS file." "" sccsfile(4)
.xx "" "file system:" "format of system volume." "" fs(4)
.xx "files." "fspec:" "format specification in text" "" fspec(4)
.xx "" "object file symbol table" "format." "syms: common" syms(4)
.xx "" "intro: introduction to file" "formats." "" intro(4)
.xx "" "wtmp: utmp and wtmp entry" "formats." "utmp," utmp(4)
.xx "" "scanf, fscanf, sscanf: convert" "formatted input." "" scanf(3S)
.xx "" "/vfprintf, vsprintf: print" "formatted output of a varargs/" "" vprintf(3S)
.xx "" "/vfprintf, vsprintf: print" "formatted output of a varargs/" "" vprintf(3X)
.xx "" "fprintf, sprintf: print" "formatted output." "printf," printf(3S)
.xx "" "abs, iabs, dabs, cabs, zabs:" "Fortran absolute value." "" abs(3F)
.xx "system/" "signal: specify" "Fortran action on receipt of a" "" signal(3F)
.xx "function." "acos, dacos:" "Fortran arccosine intrinsic" "" acos(3F)
.xx "function." "asin, dasin:" "Fortran arcsine intrinsic" "" asin(3F)
.xx "function." "atan2, datan2:" "Fortran arctangent intrinsic" "" atan2(3F)
.xx "function." "atan, datan:" "Fortran arctangent intrinsic" "" atan(3F)
.xx "" "or, xor, not, lshift, rshift:" "Fortran bitwise boolean/" "and," bool(3F)
.xx "" "getarg: return" "Fortran command-line argument." "" getarg(3F)
.xx "" "log10, alog10, dlog10:" "Fortran common logarithm/" "" log10(3F)
.xx "intrinsic/" "conjg, dconjg:" "Fortran complex conjugate" "" conjg(3F)
.xx "function." "cos, dcos, ccos:" "Fortran cosine intrinsic" "" cos(3F)
.xx "" "getenv: return" "Fortran environment variable." "" getenv(3F)
.xx "function." "exp, dexp, cexp:" "Fortran exponential intrinsic" "" exp(3F)
.xx "intrinsic/" "cosh, dcosh:" "Fortran hyperbolic cosine" "" cosh(3F)
.xx "intrinsic/" "sinh, dsinh:" "Fortran hyperbolic sine" "" sinh(3F)
.xx "intrinsic/" "tanh, dtanh:" "Fortran hyperbolic tangent" "" tanh(3F)
.xx "complex/" "aimag, dimag:" "Fortran imaginary part of" "" aimag(3F)
.xx "function." "aint, dint:" "Fortran integer part intrinsic" "" aint(3F)
.xx "" "amax0, max1, amax1, dmax1:" "Fortran maximum-value/" "/max0," max(3F)
.xx "" "amin0, min1, amin1, dmin1:" "Fortran minimum-value/" "/min0," min(3F)
.xx "" "log, alog, dlog, clog:" "Fortran natural logarithm/" "" log(3F)
.xx "" "anint, dnint, nint, idnint:" "Fortran nearest integer/" "" round(3F)
.xx "" "abort: terminate" "Fortran program." "" abort(3F)
.xx "functions." "mod, amod, dmod:" "Fortran remaindering intrinsic" "" mod(3F)
.xx "function." "sin, dsin, csin:" "Fortran sine intrinsic" "" sin(3F)
.xx "function." "sqrt, dsqrt, csqrt:" "Fortran square root intrinsic" "" sqrt(3F)
.xx "" "len: return length of" "Fortran string." "" len(3F)
.xx "" "index: return location of" "Fortran substring." "" index(3F)
.xx "" "issue a shell command from" "Fortran." "system:" system(3F)
.xx "function." "tan, dtan:" "Fortran tangent intrinsic" "" tan(3F)
.xx "" "mclock: return" "Fortran time accounting." "" mclock(3F)
.xx "intrinsic/" "sign, isign, dsign:" "Fortran transfer-of-sign" "" sign(3F)
.xx "" "/dcmplx, ichar, char: explicit" "Fortran type conversion." "" ftype(3F)
.xx "formatted output." "printf," "fprintf, sprintf: print" "" printf(3S)
.xx "word on a/" "putc, putchar," "fputc, putw: put character or" "" putc(3S)
.xx "stream." "puts," "fputs: put a string on a" "" puts(3S)
.xx "input/output." "" "fread, fwrite: binary" "" fread(3S)
.xx "memory allocator." "malloc," "free, realloc, calloc: main" "" malloc(3C)
.xx "mallopt, mallinfo:/" "malloc," "free, realloc, calloc," "" malloc(3X)
.xx "stream." "fopen," "freopen, fdopen: open a" "" fopen(3S)
.xx "parts of floating-point/" "" "frexp, ldexp, modf: manipulate" "" frexp(3C)
.xx "" "getw: get character or word" "from a stream." "/fgetc," getc(3S)
.xx "" "gets, fgets: get a string" "from a stream." "" gets(3S)
.xx "" "getopt: get option letter" "from argument vector." "" getopt(3C)
.xx "" "read: read" "from file." "" read(2)
.xx "" "system: issue a shell command" "from Fortran." "" system(3F)
.xx "" "nlist: get entries" "from name list." "" nlist(3C)
.xx "" "getpw: get name" "from UID." "" getpw(3C)
.xx "formatted input." "scanf," "fscanf, sscanf: convert" "" scanf(3S)
.xx "" "of file systems processed by" "fsck." "checklist: list" checklist(4)
.xx "reposition a file pointer in/" "" "fseek, rewind, ftell:" "" fseek(3S)
.xx "text files." "" "fspec: format specification in" "" fspec(4)
.xx "" "stat," "fstat: get file status." "" stat(2)
.xx "pointer in a/" "fseek, rewind," "ftell: reposition a file" "" fseek(3S)
.xx "communication package." "" "ftok: standard interprocess" "" stdipc(3C)
.xx "" "" "ftw: walk a file tree." "" ftw(3C)
.xx "" "Fortran arccosine intrinsic" "function." "acos, dacos:" acos(3F)
.xx "" "Fortran integer part intrinsic" "function." "aint, dint:" aint(3F)
.xx "error/" "erf, erfc: error" "function and complementary" "" erf(3M)
.xx "" "Fortran arcsine intrinsic" "function." "asin, dasin:" asin(3F)
.xx "" "Fortran arctangent intrinsic" "function." "atan2, datan2:" atan2(3F)
.xx "" "Fortran arctangent intrinsic" "function." "atan, datan:" atan(3F)
.xx "" "complex conjugate intrinsic" "function." "/dconjg: Fortran" conjg(3F)
.xx "" "ccos: Fortran cosine intrinsic" "function." "cos, dcos," cos(3F)
.xx "" "hyperbolic cosine intrinsic" "function." "/dcosh: Fortran" cosh(3F)
.xx "" "precision product intrinsic" "function." "dprod: double" dprod(3F)
.xx "" "and complementary error" "function." "/error function" erf(3M)
.xx "" "Fortran exponential intrinsic" "function." "exp, dexp, cexp:" exp(3F)
.xx "" "gamma: log gamma" "function." "" gamma(3M)
.xx "" "hypot: Euclidean distance" "function." "" hypot(3M)
.xx "" "of a common object file" "function." "/line number entries" ldlread(3X)
.xx "" "common logarithm intrinsic" "function." "/dlog10: Fortran" log10(3F)
.xx "" "natural logarithm intrinsic" "function." "/dlog, clog: Fortran" log(3F)
.xx "" "matherr: error-handling" "function." "" matherr(3M)
.xx "" "prof: profile within a" "function." "" prof(5)
.xx "" "transfer-of-sign intrinsic" "function." "/dsign: Fortran" sign(3F)
.xx "" "csin: Fortran sine intrinsic" "function." "sin, dsin," sin(3F)
.xx "" "hyperbolic sine intrinsic" "function." "/dsinh: Fortran" sinh(3F)
.xx "" "Fortran square root intrinsic" "function." "sqrt, dsqrt, csqrt:" sqrt(3F)
.xx "" "Fortran tangent intrinsic" "function." "tan, dtan:" tan(3F)
.xx "" "hyperbolic tangent intrinsic" "function." "/dtanh: Fortran" tanh(3F)
.xx "" "math: math" "functions and constants." "" math(5)
.xx "" "j0, j1, jn, y0, y1, yn: Bessel" "functions." "" bessel(3M)
.xx "" "Fortran bitwise boolean" "functions." "/lshift, rshift:" bool(3F)
.xx "" "positive difference intrinsic" "functions." "dim, ddim, idim:" dim(3F)
.xx "" "logarithm, power, square root" "functions." "/sqrt: exponential," exp(3M)
.xx "" "remainder, absolute value" "functions." "/floor, ceiling," floor(3M)
.xx "" "dmax1: Fortran maximum-value" "functions." "/max1, amax1," max(3F)
.xx "" "dmin1: Fortran minimum-value" "functions." "/min1, amin1," min(3F)
.xx "" "Fortran remaindering intrinsic" "functions." "mod, amod, dmod:" mod(3F)
.xx "" "Fortran nearest integer" "functions." "/nint, idnint:" round(3F)
.xx "" "sinh, cosh, tanh: hyperbolic" "functions." "" sinh(3M)
.xx "" "string comparison intrinsic" "functions." "/lgt, lle, llt:" strcmp(3F)
.xx "" "atan, atan2: trigonometric" "functions." "/tan, asin, acos," trig(3M)
.xx "" "fread," "fwrite: binary input/output." "" fread(3S)
.xx "" "gamma: log" "gamma function." "" gamma(3M)
.xx "" "" "gamma: log gamma function." "" gamma(3M)
.xx "number to string." "ecvt, fcvt," "gcvt: convert floating-point" "" ecvt(3C)
.xx "" "abort:" "generate an IOT fault." "" abort(3C)
.xx "terminal." "ctermid:" "generate file name for" "" ctermid(3S)
.xx "" "/srand48, seed48, lcong48:" "generate uniformly distributed/" "" drand48(3C)
.xx "" "srand: simple random-number" "generator." "rand," rand(3C)
.xx "" "rand, srand: random number" "generator." "irand," rand(3F)
.xx "" "gets, fgets:" "get a string from a stream." "" gets(3S)
.xx "" "ulimit:" "get and set user limits." "" ulimit(2)
.xx "the user." "cuserid:" "get character login name of" "" cuserid(3S)
.xx "" "getc, getchar, fgetc, getw:" "get character or word from a/" "" getc(3S)
.xx "" "nlist:" "get entries from name list." "" nlist(3C)
.xx "" "umask: set and" "get file creation mask." "" umask(2)
.xx "" "stat, fstat:" "get file status." "" stat(2)
.xx "" "ustat:" "get file system statistics." "" ustat(2)
.xx "" "/setgrent, endgrent, fgetgrent:" "get group file entry." "" getgrent(3C)
.xx "" "getlogin:" "get login name." "" getlogin(3C)
.xx "" "msgget:" "get message queue." "" msgget(2)
.xx "" "getpw:" "get name from UID." "" getpw(3C)
.xx "system." "uname:" "get name of current UNIX" "" uname(2)
.xx "argument vector." "getopt:" "get option letter from" "" getopt(3C)
.xx "" "/setpwent, endpwent, fgetpwent:" "get password file entry." "" getpwent(3C)
.xx "working directory." "getcwd:" "get path-name of current" "" getcwd(3C)
.xx "times." "times:" "get process and child process" "" times(2)
.xx "and/" "getpid, getpgrp, getppid:" "get process, process group," "" getpid(2)
.xx "" "/geteuid, getgid, getegid:" "get real user, effective user,/" "" getuid(2)
.xx "" "semget:" "get set of semaphores." "" semget(2)
.xx "" "shmget:" "get shared memory segment." "" shmget(2)
.xx "" "time:" "get time." "" time(2)
.xx "command-line argument." "" "getarg: return Fortran" "" getarg(3F)
.xx "get character or word from a/" "" "getc, getchar, fgetc, getw:" "" getc(3S)
.xx "character or word from/" "getc," "getchar, fgetc, getw: get" "" getc(3S)
.xx "current working directory." "" "getcwd: get path-name of" "" getcwd(3C)
.xx "" "getuid, geteuid, getgid," "getegid: get real user,/" "" getuid(2)
.xx "environment variable." "" "getenv: return Fortran" "" getenv(3F)
.xx "environment name." "" "getenv: return value for" "" getenv(3C)
.xx "real user, effective/" "getuid," "geteuid, getgid, getegid: get" "" getuid(2)
.xx "user,/" "getuid, geteuid," "getgid, getegid: get real" "" getuid(2)
.xx "setgrent, endgrent,/" "" "getgrent, getgrgid, getgrnam," "" getgrent(3C)
.xx "endgrent,/" "getgrent," "getgrgid, getgrnam, setgrent," "" getgrent(3C)
.xx "" "getgrent, getgrgid," "getgrnam, setgrent, endgrent,/" "" getgrent(3C)
.xx "" "" "getlogin: get login name." "" getlogin(3C)
.xx "argument vector." "" "getopt: get option letter from" "" getopt(3C)
.xx "" "" "getpass: read a password." "" getpass(3C)
.xx "process group, and/" "getpid," "getpgrp, getppid: get process," "" getpid(2)
.xx "process, process group, and/" "" "getpid, getpgrp, getppid: get" "" getpid(2)
.xx "group, and/" "getpid, getpgrp," "getppid: get process, process" "" getpid(2)
.xx "" "" "getpw: get name from UID." "" getpw(3C)
.xx "setpwent, endpwent,/" "" "getpwent, getpwuid, getpwnam," "" getpwent(3C)
.xx "" "getpwent, getpwuid," "getpwnam, setpwent, endpwent,/" "" getpwent(3C)
.xx "endpwent,/" "getpwent," "getpwuid, getpwnam, setpwent," "" getpwent(3C)
.xx "a stream." "" "gets, fgets: get a string from" "" gets(3S)
.xx "" "and terminal settings used by" "getty." "gettydefs: speed" gettydefs(4)
.xx "settings used by getty." "" "gettydefs: speed and terminal" "" gettydefs(4)
.xx "getegid: get real user,/" "" "getuid, geteuid, getgid," "" getuid(2)
.xx "pututline, setutent,/" "" "getutent, getutid, getutline," "" getut(3C)
.xx "setutent, endutent,/" "getutent," "getutid, getutline, pututline," "" getut(3C)
.xx "setutent,/" "getutent, getutid," "getutline, pututline," "" getut(3C)
.xx "from a/" "getc, getchar, fgetc," "getw: get character or word" "" getc(3S)
.xx "convert/" "ctime, localtime," "gmtime, asctime, tzset:" "" ctime(3C)
.xx "" "setjmp, longjmp: non-local" "goto." "" setjmp(3C)
.xx "string, format of graphical/" "" "gps: graphical primitive" "" gps(4)
.xx "" "primitive string, format of" "graphical files." "/graphical" gps(4)
.xx "format of graphical/" "gps:" "graphical primitive string," "" gps(4)
.xx "" "plot:" "graphics interface." "" plot(4)
.xx "subroutines." "plot:" "graphics interface" "" plot(3X)
.xx "" "/user, effective user, real" "group, and effective group/" "" getuid(2)
.xx "" "/getppid: get process, process" "group, and parent process IDs." "" getpid(2)
.xx "" "endgrent, fgetgrent: get" "group file entry." "/setgrent," getgrent(3C)
.xx "" "group:" "group file." "" group(4)
.xx "" "" "group: group file." "" group(4)
.xx "" "setpgrp: set process" "group ID." "" setpgrp(2)
.xx "" "real group, and effective" "group IDs." "/effective user," getuid(2)
.xx "" "setuid, setgid: set user and" "group IDs." "" setuid(2)
.xx "" "chown: change owner and" "group of a file." "" chown(2)
.xx "" "a signal to a process or a" "group of processes." "/send" kill(2)
.xx "" "ssignal," "gsignal: software signals." "" ssignal(3C)
.xx "" "varargs:" "handle variable argument list." "" varargs(5)
.xx "package." "curses: CRT screen" "handling and optimization" "" curses(3X)
.xx "" "hcreate, hdestroy: manage" "hash search tables." "hsearch," hsearch(3C)
.xx "" "crypt, encrypt: a one way" "hashing encryption algorithm." "" crypt(3C)
.xx "search tables." "hsearch," "hcreate, hdestroy: manage hash" "" hsearch(3C)
.xx "tables." "hsearch, hcreate," "hdestroy: manage hash search" "" hsearch(3C)
.xx "file." "scnhdr: section" "header for a common object" "" scnhdr(4)
.xx "files." "filehdr: file" "header for common object" "" filehdr(4)
.xx "file." "ldfhread: read the file" "header of a common object" "" ldfhread(3X)
.xx "" "/seek to the optional file" "header of a common object/" "" ldohseek(3X)
.xx "" "/read an indexed\/named section" "header of a common object/" "" ldshread(3X)
.xx "" "ldahread: read the archive" "header of a member of an/" "" ldahread(3X)
.xx "manage hash search tables." "" "hsearch, hcreate, hdestroy:" "" hsearch(3C)
.xx "" "cosh, dcosh: Fortran" "hyperbolic cosine intrinsic/" "" cosh(3F)
.xx "" "sinh, cosh, tanh:" "hyperbolic functions." "" sinh(3M)
.xx "" "sinh, dsinh: Fortran" "hyperbolic sine intrinsic/" "" sinh(3F)
.xx "" "tanh, dtanh: Fortran" "hyperbolic tangent intrinsic/" "" tanh(3F)
.xx "function." "" "hypot: Euclidean distance" "" hypot(3M)
.xx "Fortran absolute value." "abs," "iabs, dabs, cabs, zabs:" "" abs(3F)
.xx "command line arguments." "" "iargc: return the number of" "" iargc(3F)
.xx "" "/sngl, dble, cmplx, dcmplx," "ichar, char: explicit Fortran/" "" ftype(3F)
.xx "" "setpgrp: set process group" "ID." "" setpgrp(2)
.xx "" "issue: issue" "identification file." "" issue(4)
.xx "intrinsic/" "dim, ddim," "idim: positive difference" "" dim(3F)
.xx "dble, cmplx,/" "int, ifix," "idint, real, float, sngl," "" ftype(3F)
.xx "integer/" "anint, dnint, nint," "idnint: Fortran nearest" "" round(3F)
.xx "" "group, and parent process" "IDs." "/get process, process" getpid(2)
.xx "" "group, and effective group" "IDs." "/effective user, real" getuid(2)
.xx "" "setgid: set user and group" "IDs." "setuid," setuid(2)
.xx "sngl, dble, cmplx,/" "int," "ifix, idint, real, float," "" ftype(3F)
.xx "" "core: format of core" "image file." "" core(4)
.xx "" "pnch: file format for card" "images." "" pnch(4)
.xx "" "aimag, dimag: Fortran" "imaginary part of complex/" "" aimag(3F)
.xx "of a/" "ldtbindex: compute the" "index of a symbol table entry" "" ldtbindex(3X)
.xx "Fortran substring." "" "index: return location of" "" index(3F)
.xx "a common/" "ldtbread: read an" "indexed symbol table entry of" "" ldtbread(3X)
.xx "" "ldshread, ldnshread: read an" "indexed\/named section header/" "" ldshread(3X)
.xx "" "ldsseek, ldnsseek: seek to an" "indexed\/named section of a/" "" ldsseek(3X)
.xx "" "inittab: script for the" "init process." "" inittab(4)
.xx "process." "popen, pclose:" "initiate pipe to/from a" "" popen(3S)
.xx "process." "" "inittab: script for the init" "" inittab(4)
.xx "" "" "inode: format of an i-node." "" inode(4)
.xx "" "inode: format of an" "i-node." "" inode(4)
.xx "" "sscanf: convert formatted" "input." "scanf, fscanf," scanf(3S)
.xx "" "push character back into" "input stream." "ungetc:" ungetc(3S)
.xx "" "fread, fwrite: binary" "input/output." "" fread(3S)
.xx "" "stdio: standard buffered" "input/output package." "" stdio(3S)
.xx "" "fileno: stream status" "inquiries." "/feof, clearerr," ferror(3S)
.xx "sngl, dble, cmplx, dcmplx,/" "" "int, ifix, idint, real, float," "" ftype(3F)
.xx "" "abs: return" "integer absolute value." "" abs(3C)
.xx "" "/l64a: convert between long" "integer and base-64 ASCII/" "" a64l(3C)
.xx "" "sputl, sgetl: access long" "integer data in a/" "" sputl(3X)
.xx "" "nint, idnint: Fortran nearest" "integer functions." "/dnint," round(3F)
.xx "function." "aint, dint: Fortran" "integer part intrinsic" "" aint(3F)
.xx "" "atol, atoi: convert string to" "integer." "strtol," strtol(3C)
.xx "" "/ltol3: convert between 3-byte" "integers and long integers." "" l3tol(3C)
.xx "" "3-byte integers and long" "integers." "/convert between" l3tol(3C)
.xx "" "plot: graphics" "interface." "" plot(4)
.xx "" "plot: graphics" "interface subroutines." "" plot(3X)
.xx "" "pipe: create an" "interprocess channel." "" pipe(2)
.xx "package." "ftok: standard" "interprocess communication" "" stdipc(3C)
.xx "" "sleep: suspend execution for" "interval." "" sleep(3C)
.xx "" "acos, dacos: Fortran arccosine" "intrinsic function." "" acos(3F)
.xx "" "dint: Fortran integer part" "intrinsic function." "aint," aint(3F)
.xx "" "asin, dasin: Fortran arcsine" "intrinsic function." "" asin(3F)
.xx "" "datan2: Fortran arctangent" "intrinsic function." "atan2," atan2(3F)
.xx "" "datan: Fortran arctangent" "intrinsic function." "atan," atan(3F)
.xx "" "Fortran complex conjugate" "intrinsic function." "/dconjg:" conjg(3F)
.xx "" "dcos, ccos: Fortran cosine" "intrinsic function." "cos," cos(3F)
.xx "" "Fortran hyperbolic cosine" "intrinsic function." "/dcosh:" cosh(3F)
.xx "" "double precision product" "intrinsic function." "dprod:" dprod(3F)
.xx "" "cexp: Fortran exponential" "intrinsic function." "/dexp," exp(3F)
.xx "" "Fortran common logarithm" "intrinsic function." "/dlog10:" log10(3F)
.xx "" "Fortran natural logarithm" "intrinsic function." "/clog:" log(3F)
.xx "" "Fortran transfer-of-sign" "intrinsic function." "/dsign:" sign(3F)
.xx "" "sin, dsin, csin: Fortran sine" "intrinsic function." "" sin(3F)
.xx "" "dsinh: Fortran hyperbolic sine" "intrinsic function." "sinh," sinh(3F)
.xx "" "csqrt: Fortran square root" "intrinsic function." "/dsqrt," sqrt(3F)
.xx "" "tan, dtan: Fortran tangent" "intrinsic function." "" tan(3F)
.xx "" "Fortran hyperbolic tangent" "intrinsic function." "/dtanh:" tanh(3F)
.xx "" "idim: positive difference" "intrinsic functions." "/ddim," dim(3F)
.xx "" "dmod: Fortran remaindering" "intrinsic functions." "/amod," mod(3F)
.xx "" "lle, llt: string comparison" "intrinsic functions." "/lgt," strcmp(3F)
.xx "formats." "" "intro: introduction to file" "" intro(4)
.xx "miscellany." "" "intro: introduction to" "" intro(5)
.xx "subroutines and libraries." "" "intro: introduction to" "" intro(3)
.xx "calls and error numbers." "" "intro: introduction to system" "" intro(2)
.xx "" "intro:" "introduction to file formats." "" intro(4)
.xx "" "intro:" "introduction to miscellany." "" intro(5)
.xx "and libraries." "intro:" "introduction to subroutines" "" intro(3)
.xx "and error numbers." "intro:" "introduction to system calls" "" intro(2)
.xx "" "" "ioctl: control device." "" ioctl(2)
.xx "" "abort: generate an" "IOT fault." "" abort(3C)
.xx "number generator." "" "irand, rand, srand: random" "" rand(3F)
.xx "" "/islower, isdigit, isxdigit," "isalnum, isspace, ispunct,/" "" ctype(3C)
.xx "isdigit, isxdigit, isalnum,/" "" "isalpha, isupper, islower," "" ctype(3C)
.xx "" "/isprint, isgraph, iscntrl," "isascii: classify characters." "" ctype(3C)
.xx "terminal." "ttyname," "isatty: find name of a" "" ttyname(3C)
.xx "" "/ispunct, isprint, isgraph," "iscntrl, isascii: classify/" "" ctype(3C)
.xx "" "isalpha, isupper, islower," "isdigit, isxdigit, isalnum,/" "" ctype(3C)
.xx "" "/isspace, ispunct, isprint," "isgraph, iscntrl, isascii:/" "" ctype(3C)
.xx "transfer-of-sign/" "sign," "isign, dsign: Fortran" "" sign(3F)
.xx "isalnum,/" "isalpha, isupper," "islower, isdigit, isxdigit," "" ctype(3C)
.xx "" "/isalnum, isspace, ispunct," "isprint, isgraph, iscntrl,/" "" ctype(3C)
.xx "" "/isxdigit, isalnum, isspace," "ispunct, isprint, isgraph,/" "" ctype(3C)
.xx "" "/isdigit, isxdigit, isalnum," "isspace, ispunct, isprint,/" "" ctype(3C)
.xx "Fortran." "system:" "issue a shell command from" "" system(3F)
.xx "" "system:" "issue a shell command." "" system(3S)
.xx "" "issue:" "issue identification file." "" issue(4)
.xx "file." "" "issue: issue identification" "" issue(4)
.xx "isxdigit, isalnum,/" "isalpha," "isupper, islower, isdigit," "" ctype(3C)
.xx "" "/isupper, islower, isdigit," "isxdigit, isalnum, isspace,/" "" ctype(3C)
.xx "functions." "" "j0, j1, jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "functions." "j0," "j1, jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "functions." "j0, j1," "jn, y0, y1, yn: Bessel" "" bessel(3M)
.xx "" "/lrand48, nrand48, mrand48," "jrand48, srand48, seed48,/" "" drand48(3C)
.xx "process or a group of/" "" "kill: send a signal to a" "" kill(2)
.xx "3-byte integers and long/" "" "l3tol, ltol3: convert between" "" l3tol(3C)
.xx "integer and base-64/" "a64l," "l64a: convert between long" "" a64l(3C)
.xx "" "/jrand48, srand48, seed48," "lcong48: generate uniformly/" "" drand48(3C)
.xx "object file." "ldclose," "ldaclose: close a common" "" ldclose(3X)
.xx "header of a member of an/" "" "ldahread: read the archive" "" ldahread(3X)
.xx "file for reading." "ldopen," "ldaopen: open a common object" "" ldopen(3X)
.xx "common object file." "" "ldclose, ldaclose: close a" "" ldclose(3X)
.xx "of floating-point/" "frexp," "ldexp, modf: manipulate parts" "" frexp(3C)
.xx "access routines." "" "ldfcn: common object file" "" ldfcn(4)
.xx "of a common object file." "" "ldfhread: read the file header" "" ldfhread(3X)
.xx "name for common object file/" "" "ldgetname: retrieve symbol" "" ldgetname(3X)
.xx "line number entries/" "ldlread," "ldlinit, ldlitem: manipulate" "" ldlread(3X)
.xx "number/" "ldlread, ldlinit," "ldlitem: manipulate line" "" ldlread(3X)
.xx "manipulate line number/" "" "ldlread, ldlinit, ldlitem:" "" ldlread(3X)
.xx "line number entries of a/" "" "ldlseek, ldnlseek: seek to" "" ldlseek(3X)
.xx "entries of a section/" "ldlseek," "ldnlseek: seek to line number" "" ldlseek(3X)
.xx "entries of a section/" "ldrseek," "ldnrseek: seek to relocation" "" ldrseek(3X)
.xx "indexed\/named/" "ldshread," "ldnshread: read an" "" ldshread(3X)
.xx "indexed\/named/" "ldsseek," "ldnsseek: seek to an" "" ldsseek(3X)
.xx "file header of a common/" "" "ldohseek: seek to the optional" "" ldohseek(3X)
.xx "object file for reading." "" "ldopen, ldaopen: open a common" "" ldopen(3X)
.xx "relocation entries of a/" "" "ldrseek, ldnrseek: seek to" "" ldrseek(3X)
.xx "indexed\/named section header/" "" "ldshread, ldnshread: read an" "" ldshread(3X)
.xx "indexed\/named section of a/" "" "ldsseek, ldnsseek: seek to an" "" ldsseek(3X)
.xx "of a symbol table entry of a/" "" "ldtbindex: compute the index" "" ldtbindex(3X)
.xx "symbol table entry of a/" "" "ldtbread: read an indexed" "" ldtbread(3X)
.xx "table of a common object/" "" "ldtbseek: seek to the symbol" "" ldtbseek(3X)
.xx "string." "" "len: return length of Fortran" "" len(3F)
.xx "" "len: return" "length of Fortran string." "" len(3F)
.xx "" "getopt: get option" "letter from argument vector." "" getopt(3C)
.xx "update." "lsearch," "lfind: linear search and" "" lsearch(3C)
.xx "comparison intrinsic/" "" "lge, lgt, lle, llt: string" "" strcmp(3F)
.xx "comparison intrinsic/" "lge," "lgt, lle, llt: string" "" strcmp(3F)
.xx "" "to subroutines and" "libraries." "/introduction" intro(3)
.xx "" "ulimit: get and set user" "limits." "" ulimit(2)
.xx "" "return the number of command" "line arguments." "iargc:" iargc(3F)
.xx "" "an out-going terminal" "line connection." "/establish" dial(3C)
.xx "common object file." "linenum:" "line number entries in a" "" linenum(4)
.xx "" "/ldlinit, ldlitem: manipulate" "line number entries of a/" "" ldlread(3X)
.xx "" "ldlseek, ldnlseek: seek to" "line number entries of a/" "" ldlseek(3X)
.xx "" "lsearch, lfind:" "linear search and update." "" lsearch(3C)
.xx "in a common object file." "" "linenum: line number entries" "" linenum(4)
.xx "" "a.out: common assembler and" "link editor output." "" a.out(4)
.xx "" "" "link: link to a file." "" link(2)
.xx "" "link:" "link to a file." "" link(2)
.xx "" "nlist: get entries from name" "list." "" nlist(3C)
.xx "by fsck." "checklist:" "list of file systems processed" "" checklist(4)
.xx "" "handle variable argument" "list." "varargs:" varargs(5)
.xx "" "output of a varargs argument" "list." "/print formatted" vprintf(3S)
.xx "" "output of a varargs argument" "list." "/print formatted" vprintf(3X)
.xx "intrinsic/" "lge, lgt," "lle, llt: string comparison" "" strcmp(3F)
.xx "intrinsic/" "lge, lgt, lle," "llt: string comparison" "" strcmp(3F)
.xx "tzset: convert date/" "ctime," "localtime, gmtime, asctime," "" ctime(3C)
.xx "" "index: return" "location of Fortran substring." "" index(3F)
.xx "" "end, etext, edata: last" "locations in program." "" end(3C)
.xx "memory." "plock:" "lock process, text, or data in" "" plock(2)
.xx "natural logarithm intrinsic/" "" "log, alog, dlog, clog: Fortran" "" log(3F)
.xx "" "gamma:" "log gamma function." "" gamma(3M)
.xx "exponential, logarithm,/" "exp," "log, log10, pow, sqrt:" "" exp(3M)
.xx "common logarithm intrinsic/" "" "log10, alog10, dlog10: Fortran" "" log10(3F)
.xx "logarithm, power,/" "exp, log," "log10, pow, sqrt: exponential," "" exp(3M)
.xx "" "/alog10, dlog10: Fortran common" "logarithm intrinsic function." "" log10(3F)
.xx "" "/dlog, clog: Fortran natural" "logarithm intrinsic function." "" log(3F)
.xx "" "/log10, pow, sqrt: exponential," "logarithm, power, square root/" "" exp(3M)
.xx "" "getlogin: get" "login name." "" getlogin(3C)
.xx "" "cuserid: get character" "login name of the user." "" cuserid(3S)
.xx "" "logname: return" "login name of user." "" logname(3X)
.xx "" "setting up an environment at" "login time." "profile:" profile(4)
.xx "user." "" "logname: return login name of" "" logname(3X)
.xx "" "a64l, l64a: convert between" "long integer and base-64 ASCII/" "" a64l(3C)
.xx "" "sputl, sgetl: access" "long integer data in a/" "" sputl(3X)
.xx "" "between 3-byte integers and" "long integers." "/ltol3: convert" l3tol(3C)
.xx "" "setjmp," "longjmp: non-local goto." "" setjmp(3C)
.xx "jrand48,/" "drand48, erand48," "lrand48, nrand48, mrand48," "" drand48(3C)
.xx "and update." "" "lsearch, lfind: linear search" "" lsearch(3C)
.xx "pointer." "" "lseek: move read/write file" "" lseek(2)
.xx "bitwise/" "and, or, xor, not," "lshift, rshift: Fortran" "" bool(3F)
.xx "integers and long/" "l3tol," "ltol3: convert between 3-byte" "" l3tol(3C)
.xx "" "values:" "machine-dependent values." "" values(5)
.xx "" "/access long integer data in a" "machine-independent fashion.." "" sputl(3X)
.xx "" "malloc, free, realloc, calloc:" "main memory allocator." "" malloc(3C)
.xx "" "/mallopt, mallinfo: fast" "main memory allocator." "" malloc(3X)
.xx "or ordinary file." "mknod:" "make a directory, or a special" "" mknod(2)
.xx "" "mktemp:" "make a unique file name." "" mktemp(3C)
.xx "" "/realloc, calloc, mallopt," "mallinfo: fast main memory/" "" malloc(3X)
.xx "main memory allocator." "" "malloc, free, realloc, calloc:" "" malloc(3C)
.xx "mallopt, mallinfo: fast main/" "" "malloc, free, realloc, calloc," "" malloc(3X)
.xx "" "malloc, free, realloc, calloc," "mallopt, mallinfo: fast main/" "" malloc(3X)
.xx "" "/tfind, tdelete, twalk:" "manage binary search trees." "" tsearch(3C)
.xx "" "hsearch, hcreate, hdestroy:" "manage hash search tables." "" hsearch(3C)
.xx "of/" "ldlread, ldlinit, ldlitem:" "manipulate line number entries" "" ldlread(3X)
.xx "" "frexp, ldexp, modf:" "manipulate parts of/" "" frexp(3C)
.xx "" "ascii:" "map of ASCII character set." "" ascii(5)
.xx "" "set and get file creation" "mask." "umask:" umask(2)
.xx "table." "master:" "master device information" "" master(4)
.xx "information table." "" "master: master device" "" master(4)
.xx "" "regular expression compile and" "match routines." "regexp:" regexp(5)
.xx "" "math:" "math functions and constants." "" math(5)
.xx "constants." "" "math: math functions and" "" math(5)
.xx "function." "" "matherr: error-handling" "" matherr(3M)
.xx "dmax1: Fortran maximum-value/" "" "max, max0, amax0, max1, amax1," "" max(3F)
.xx "dmax1: Fortran/" "max," "max0, amax0, max1, amax1," "" max(3F)
.xx "" "max, max0, amax0," "max1, amax1, dmax1: Fortran/" "" max(3F)
.xx "" "/max1, amax1, dmax1: Fortran" "maximum-value functions." "" max(3F)
.xx "accounting." "" "mclock: return Fortran time" "" mclock(3F)
.xx "memcpy, memset: memory/" "" "memccpy, memchr, memcmp," "" memory(3C)
.xx "memset: memory/" "memccpy," "memchr, memcmp, memcpy," "" memory(3C)
.xx "operations." "memccpy, memchr," "memcmp, memcpy, memset: memory" "" memory(3C)
.xx "" "memccpy, memchr, memcmp," "memcpy, memset: memory/" "" memory(3C)
.xx "" "free, realloc, calloc: main" "memory allocator." "malloc," malloc(3C)
.xx "" "mallopt, mallinfo: fast main" "memory allocator." "/calloc," malloc(3X)
.xx "" "shmctl: shared" "memory control operations." "" shmctl(2)
.xx "" "memcmp, memcpy, memset:" "memory operations." "/memchr," memory(3C)
.xx "" "shmop: shared" "memory operations." "" shmop(2)
.xx "" "lock process, text, or data in" "memory." "plock:" plock(2)
.xx "" "shmget: get shared" "memory segment." "" shmget(2)
.xx "" "/memchr, memcmp, memcpy," "memset: memory operations." "" memory(3C)
.xx "" "msgctl:" "message control operations." "" msgctl(2)
.xx "" "msgop:" "message operations." "" msgop(2)
.xx "" "msgget: get" "message queue." "" msgget(2)
.xx "" "sys_nerr: system error" "messages." "/errno, sys_errlist," perror(3C)
.xx "dmin1: Fortran minimum-value/" "" "min, min0, amin0, min1, amin1," "" min(3F)
.xx "dmin1: Fortran/" "min," "min0, amin0, min1, amin1," "" min(3F)
.xx "" "min, min0, amin0," "min1, amin1, dmin1: Fortran/" "" min(3F)
.xx "" "/min1, amin1, dmin1: Fortran" "minimum-value functions." "" min(3F)
.xx "special or ordinary file." "" "mknod: make a directory, or a" "" mknod(2)
.xx "name." "" "mktemp: make a unique file" "" mktemp(3C)
.xx "table." "" "mnttab: mounted file system" "" mnttab(4)
.xx "remaindering intrinsic/" "" "mod, amod, dmod: Fortran" "" mod(3F)
.xx "" "chmod: change" "mode of file." "" chmod(2)
.xx "floating-point/" "frexp, ldexp," "modf: manipulate parts of" "" frexp(3C)
.xx "" "utime: set file access and" "modification times." "" utime(2)
.xx "profile." "" "monitor: prepare execution" "" monitor(3C)
.xx "" "mount:" "mount a file system." "" mount(2)
.xx "" "" "mount: mount a file system." "" mount(2)
.xx "" "mnttab:" "mounted file system table." "" mnttab(4)
.xx "" "lseek:" "move read/write file pointer." "" lseek(2)
.xx "" "/erand48, lrand48, nrand48," "mrand48, jrand48, srand48,/" "" drand48(3C)
.xx "operations." "" "msgctl: message control" "" msgctl(2)
.xx "" "" "msgget: get message queue." "" msgget(2)
.xx "" "" "msgop: message operations." "" msgop(2)
.xx "" "log, alog, dlog, clog: Fortran" "natural logarithm intrinsic/" "" log(3F)
.xx "" "/dnint, nint, idnint: Fortran" "nearest integer functions." "" round(3F)
.xx "process." "" "nice: change priority of a" "" nice(2)
.xx "integer/" "anint, dnint," "nint, idnint: Fortran nearest" "" round(3F)
.xx "list." "" "nlist: get entries from name" "" nlist(3C)
.xx "" "setjmp, longjmp:" "non-local goto." "" setjmp(3C)
.xx "bitwise boolean/" "and, or, xor," "not, lshift, rshift: Fortran" "" bool(3F)
.xx "" "drand48, erand48, lrand48," "nrand48, mrand48, jrand48,/" "" drand48(3C)
.xx "" "ldfcn: common" "object file access routines." "" ldfcn(4)
.xx "" "ldopen, ldaopen: open a common" "object file for reading." "" ldopen(3X)
.xx "" "number entries of a common" "object file function." "/line" ldlread(3X)
.xx "" "ldaclose: close a common" "object file." "ldclose," ldclose(3X)
.xx "" "the file header of a common" "object file." "ldfhread: read" ldfhread(3X)
.xx "" "of a section of a common" "object file." "/number entries" ldlseek(3X)
.xx "" "file header of a common" "object file." "/to the optional" ldohseek(3X)
.xx "" "of a section of a common" "object file." "/entries" ldrseek(3X)
.xx "" "section header of a common" "object file." "/indexed\/named" ldshread(3X)
.xx "" "section of a common" "object file." "/indexed\/named" ldsseek(3X)
.xx "" "symbol table entry of a common" "object file." "/the index of a" ldtbindex(3X)
.xx "" "symbol table entry of a common" "object file." "/read an indexed" ldtbread(3X)
.xx "" "the symbol table of a common" "object file." "/seek to" ldtbseek(3X)
.xx "" "number entries in a common" "object file." "linenum: line" linenum(4)
.xx "" "information for a common" "object file." "/relocation" reloc(4)
.xx "" "section header for a common" "object file." "scnhdr:" scnhdr(4)
.xx "entry." "/symbol name for common" "object file symbol table" "" ldgetname(3X)
.xx "format." "syms: common" "object file symbol table" "" syms(4)
.xx "" "file header for common" "object files." "filehdr:" filehdr(4)
.xx "reading." "ldopen, ldaopen:" "open a common object file for" "" ldopen(3X)
.xx "" "fopen, freopen, fdopen:" "open a stream." "" fopen(3S)
.xx "" "dup: duplicate an" "open file descriptor." "" dup(2)
.xx "" "open:" "open for reading or writing." "" open(2)
.xx "writing." "" "open: open for reading or" "" open(2)
.xx "" "memcmp, memcpy, memset: memory" "operations." "memccpy, memchr," memory(3C)
.xx "" "msgctl: message control" "operations." "" msgctl(2)
.xx "" "msgop: message" "operations." "" msgop(2)
.xx "" "semctl: semaphore control" "operations." "" semctl(2)
.xx "" "semop: semaphore" "operations." "" semop(2)
.xx "" "shmctl: shared memory control" "operations." "" shmctl(2)
.xx "" "shmop: shared memory" "operations." "" shmop(2)
.xx "" "strcspn, strtok: string" "operations." "/strpbrk, strspn," string(3C)
.xx "" "CRT screen handling and" "optimization package." "curses:" curses(3X)
.xx "vector." "getopt: get" "option letter from argument" "" getopt(3C)
.xx "common/" "ldohseek: seek to the" "optional file header of a" "" ldohseek(3X)
.xx "" "fcntl: file control" "options." "" fcntl(5)
.xx "Fortran bitwise boolean/" "and," "or, xor, not, lshift, rshift:" "" bool(3F)
.xx "" "a directory, or a special or" "ordinary file." "mknod: make" mknod(2)
.xx "" "dial: establish an" "out-going terminal line/" "" dial(3C)
.xx "" "assembler and link editor" "output." "a.out: common" a.out(4)
.xx "" "/vsprintf: print formatted" "output of a varargs argument/" "" vprintf(3S)
.xx "" "/vsprintf: print formatted" "output of a varargs argument/" "" vprintf(3X)
.xx "" "sprintf: print formatted" "output." "printf, fprintf," printf(3S)
.xx "" "chown: change" "owner and group of a file." "" chown(2)
.xx "" "handling and optimization" "package." "curses: CRT screen" curses(3X)
.xx "" "standard buffered input/output" "package." "stdio:" stdio(3S)
.xx "" "interprocess communication" "package." "ftok: standard" stdipc(3C)
.xx "" "process, process group, and" "parent process IDs." "/get" getpid(2)
.xx "" "" "passwd: password file." "" passwd(4)
.xx "" "/endpwent, fgetpwent: get" "password file entry." "" getpwent(3C)
.xx "" "putpwent: write" "password file entry." "" putpwent(3C)
.xx "" "passwd:" "password file." "" passwd(4)
.xx "" "getpass: read a" "password." "" getpass(3C)
.xx "directory." "getcwd: get" "path-name of current working" "" getcwd(3C)
.xx "signal." "" "pause: suspend process until" "" pause(2)
.xx "a process." "popen," "pclose: initiate pipe to/from" "" popen(3S)
.xx "format." "acct:" "per-process accounting file" "" acct(4)
.xx "sys_nerr: system error/" "" "perror, errno, sys_errlist," "" perror(3C)
.xx "channel." "" "pipe: create an interprocess" "" pipe(2)
.xx "" "popen, pclose: initiate" "pipe to/from a process." "" popen(3S)
.xx "data in memory." "" "plock: lock process, text, or" "" plock(2)
.xx "" "" "plot: graphics interface." "" plot(4)
.xx "subroutines." "" "plot: graphics interface" "" plot(3X)
.xx "images." "" "pnch: file format for card" "" pnch(4)
.xx "" "ftell: reposition a file" "pointer in a stream." "/rewind," fseek(3S)
.xx "" "lseek: move read/write file" "pointer." "" lseek(2)
.xx "to/from a process." "" "popen, pclose: initiate pipe" "" popen(3S)
.xx "functions." "dim, ddim, idim:" "positive difference intrinsic" "" dim(3F)
.xx "logarithm,/" "exp, log, log10," "pow, sqrt: exponential," "" exp(3M)
.xx "" "/sqrt: exponential, logarithm," "power, square root functions." "" exp(3M)
.xx "function." "dprod: double" "precision product intrinsic" "" dprod(3F)
.xx "" "monitor:" "prepare execution profile." "" monitor(3C)
.xx "graphical/" "gps: graphical" "primitive string, format of" "" gps(4)
.xx "" "types:" "primitive system data types." "" types(5)
.xx "" "vprintf, vfprintf, vsprintf:" "print formatted output of a/" "" vprintf(3S)
.xx "" "vprintf, vfprintf, vsprintf:" "print formatted output of a/" "" vprintf(3X)
.xx "" "printf, fprintf, sprintf:" "print formatted output." "" printf(3S)
.xx "print formatted output." "" "printf, fprintf, sprintf:" "" printf(3S)
.xx "" "nice: change" "priority of a process." "" nice(2)
.xx "" "acct: enable or disable" "process accounting." "" acct(2)
.xx "" "alarm: set a" "process alarm clock." "" alarm(2)
.xx "times." "times: get" "process and child process" "" times(2)
.xx "" "exit, _exit: terminate" "process." "" exit(2)
.xx "" "fork: create a new" "process." "" fork(2)
.xx "" "/getpgrp, getppid: get process," "process group, and parent/" "" getpid(2)
.xx "" "setpgrp: set" "process group ID." "" setpgrp(2)
.xx "" "process group, and parent" "process IDs." "/get process," getpid(2)
.xx "" "inittab: script for the init" "process." "" inittab(4)
.xx "" "nice: change priority of a" "process." "" nice(2)
.xx "" "kill: send a signal to a" "process or a group of/" "" kill(2)
.xx "" "initiate pipe to/from a" "process." "popen, pclose:" popen(3S)
.xx "" "getpid, getpgrp, getppid: get" "process, process group, and/" "" getpid(2)
.xx "memory." "plock: lock" "process, text, or data in" "" plock(2)
.xx "" "times: get process and child" "process times." "" times(2)
.xx "" "wait: wait for child" "process to stop or terminate." "" wait(2)
.xx "" "ptrace:" "process trace." "" ptrace(2)
.xx "" "pause: suspend" "process until signal." "" pause(2)
.xx "" "list of file systems" "processed by fsck." "checklist:" checklist(4)
.xx "" "to a process or a group of" "processes." "/send a signal" kill(2)
.xx "" "dprod: double precision" "product intrinsic function." "" dprod(3F)
.xx "function." "" "prof: profile within a" "" prof(5)
.xx "profile." "" "profil: execution time" "" profil(2)
.xx "" "monitor: prepare execution" "profile." "" monitor(3C)
.xx "" "profil: execution time" "profile." "" profil(2)
.xx "environment at login time." "" "profile: setting up an" "" profile(4)
.xx "" "prof:" "profile within a function." "" prof(5)
.xx "" "/generate uniformly distributed" "pseudo-random numbers." "" drand48(3C)
.xx "" "" "ptrace: process trace." "" ptrace(2)
.xx "stream." "ungetc:" "push character back into input" "" ungetc(3S)
.xx "put character or word on a/" "" "putc, putchar, fputc, putw:" "" putc(3S)
.xx "character or word on a/" "putc," "putchar, fputc, putw: put" "" putc(3S)
.xx "environment." "" "putenv: change or add value to" "" putenv(3C)
.xx "entry." "" "putpwent: write password file" "" putpwent(3C)
.xx "stream." "" "puts, fputs: put a string on a" "" puts(3S)
.xx "" "getutent, getutid, getutline," "pututline, setutent, endutent,/" "" getut(3C)
.xx "a/" "putc, putchar, fputc," "putw: put character or word on" "" putc(3S)
.xx "" "" "qsort: quicker sort." "" qsort(3C)
.xx "" "msgget: get message" "queue." "" msgget(2)
.xx "" "qsort:" "quicker sort." "" qsort(3C)
.xx "generator." "irand," "rand, srand: random number" "" rand(3F)
.xx "random-number generator." "" "rand, srand: simple" "" rand(3C)
.xx "" "irand, rand, srand:" "random number generator." "" rand(3F)
.xx "" "rand, srand: simple" "random-number generator." "" rand(3C)
.xx "" "getpass:" "read a password." "" getpass(3C)
.xx "entry of a common/" "ldtbread:" "read an indexed symbol table" "" ldtbread(3X)
.xx "header/" "ldshread, ldnshread:" "read an indexed\/named section" "" ldshread(3X)
.xx "" "read:" "read from file." "" read(2)
.xx "" "" "read: read from file." "" read(2)
.xx "member of an/" "ldahread:" "read the archive header of a" "" ldahread(3X)
.xx "common object file." "ldfhread:" "read the file header of a" "" ldfhread(3X)
.xx "" "open a common object file for" "reading." "ldopen, ldaopen:" ldopen(3X)
.xx "" "open: open for" "reading or writing." "" open(2)
.xx "" "lseek: move" "read/write file pointer." "" lseek(2)
.xx "cmplx,/" "int, ifix, idint," "real, float, sngl, dble," "" ftype(3F)
.xx "allocator." "malloc, free," "realloc, calloc: main memory" "" malloc(3C)
.xx "mallinfo: fast/" "malloc, free," "realloc, calloc, mallopt," "" malloc(3X)
.xx "" "specify what to do upon" "receipt of a signal." "signal:" signal(2)
.xx "" "/specify Fortran action on" "receipt of a system signal." "" signal(3F)
.xx "execute regular expression." "" "regcmp, regex: compile and" "" regcmp(3X)
.xx "regular expression." "regcmp," "regex: compile and execute" "" regcmp(3X)
.xx "compile and match routines." "" "regexp: regular expression" "" regexp(5)
.xx "match routines." "regexp:" "regular expression compile and" "" regexp(5)
.xx "" "regex: compile and execute" "regular expression." "regcmp," regcmp(3X)
.xx "for a common object file." "" "reloc: relocation information" "" reloc(4)
.xx "" "ldrseek, ldnrseek: seek to" "relocation entries of a/" "" ldrseek(3X)
.xx "common object file." "reloc:" "relocation information for a" "" reloc(4)
.xx "" "/fmod, fabs: floor, ceiling," "remainder, absolute value/" "" floor(3M)
.xx "" "mod, amod, dmod: Fortran" "remaindering intrinsic/" "" mod(3F)
.xx "" "unlink:" "remove directory entry." "" unlink(2)
.xx "" "clock:" "report CPU time used." "" clock(3C)
.xx "stream." "fseek, rewind, ftell:" "reposition a file pointer in a" "" fseek(3S)
.xx "common object file/" "ldgetname:" "retrieve symbol name for" "" ldgetname(3X)
.xx "argument." "getarg:" "return Fortran command-line" "" getarg(3F)
.xx "variable." "getenv:" "return Fortran environment" "" getenv(3F)
.xx "accounting." "mclock:" "return Fortran time" "" mclock(3F)
.xx "" "abs:" "return integer absolute value." "" abs(3C)
.xx "string." "len:" "return length of Fortran" "" len(3F)
.xx "substring." "index:" "return location of Fortran" "" index(3F)
.xx "" "logname:" "return login name of user." "" logname(3X)
.xx "line arguments." "iargc:" "return the number of command" "" iargc(3F)
.xx "name." "getenv:" "return value for environment" "" getenv(3C)
.xx "" "stat: data" "returned by stat system call." "" stat(5)
.xx "file pointer in a/" "fseek," "rewind, ftell: reposition a" "" fseek(3S)
.xx "" "creat: create a new file or" "rewrite an existing one." "" creat(2)
.xx "" "chroot: change" "root directory." "" chroot(2)
.xx "" "logarithm, power, square" "root functions." "/exponential," exp(3M)
.xx "" "/dsqrt, csqrt: Fortran square" "root intrinsic function." "" sqrt(3F)
.xx "" "common object file access" "routines." "ldfcn:" ldfcn(4)
.xx "" "expression compile and match" "routines." "regexp: regular" regexp(5)
.xx "" "and, or, xor, not, lshift," "rshift: Fortran bitwise/" "" bool(3F)
.xx "space allocation." "brk," "sbrk: change data segment" "" brk(2)
.xx "formatted input." "" "scanf, fscanf, sscanf: convert" "" scanf(3S)
.xx "" "sccsfile: format of" "SCCS file." "" sccsfile(4)
.xx "" "" "sccsfile: format of SCCS file." "" sccsfile(4)
.xx "common object file." "" "scnhdr: section header for a" "" scnhdr(4)
.xx "optimization/" "curses: CRT" "screen handling and" "" curses(3X)
.xx "" "inittab:" "script for the init process." "" inittab(4)
.xx "" "bsearch: binary" "search a sorted table." "" bsearch(3C)
.xx "" "lsearch, lfind: linear" "search and update." "" lsearch(3C)
.xx "" "hcreate, hdestroy: manage hash" "search tables." "hsearch," hsearch(3C)
.xx "" "tdelete, twalk: manage binary" "search trees." "tsearch, tfind," tsearch(3C)
.xx "object file." "scnhdr:" "section header for a common" "" scnhdr(4)
.xx "object/" "/read an indexed\/named" "section header of a common" "" ldshread(3X)
.xx "" "/to line number entries of a" "section of a common object/" "" ldlseek(3X)
.xx "" "/to relocation entries of a" "section of a common object/" "" ldrseek(3X)
.xx "" "/seek to an indexed\/named" "section of a common object/" "" ldsseek(3X)
.xx "" "/mrand48, jrand48, srand48," "seed48, lcong48: generate/" "" drand48(3C)
.xx "section of/" "ldsseek, ldnsseek:" "seek to an indexed\/named" "" ldsseek(3X)
.xx "a section/" "ldlseek, ldnlseek:" "seek to line number entries of" "" ldlseek(3X)
.xx "a section/" "ldrseek, ldnrseek:" "seek to relocation entries of" "" ldrseek(3X)
.xx "header of a common/" "ldohseek:" "seek to the optional file" "" ldohseek(3X)
.xx "common object file." "ldtbseek:" "seek to the symbol table of a" "" ldtbseek(3X)
.xx "" "shmget: get shared memory" "segment." "" shmget(2)
.xx "" "brk, sbrk: change data" "segment space allocation." "" brk(2)
.xx "" "semctl:" "semaphore control operations." "" semctl(2)
.xx "" "semop:" "semaphore operations." "" semop(2)
.xx "" "semget: get set of" "semaphores." "" semget(2)
.xx "operations." "" "semctl: semaphore control" "" semctl(2)
.xx "" "" "semget: get set of semaphores." "" semget(2)
.xx "" "" "semop: semaphore operations." "" semop(2)
.xx "a group of processes." "kill:" "send a signal to a process or" "" kill(2)
.xx "buffering to a stream." "" "setbuf, setvbuf: assign" "" setbuf(3S)
.xx "IDs." "setuid," "setgid: set user and group" "" setuid(2)
.xx "" "getgrent, getgrgid, getgrnam," "setgrent, endgrent, fgetgrent:/" "" getgrent(3C)
.xx "goto." "" "setjmp, longjmp: non-local" "" setjmp(3C)
.xx "" "" "setpgrp: set process group ID." "" setpgrp(2)
.xx "" "getpwent, getpwuid, getpwnam," "setpwent, endpwent, fgetpwent:/" "" getpwent(3C)
.xx "login time." "profile:" "setting up an environment at" "" profile(4)
.xx "" "gettydefs: speed and terminal" "settings used by getty." "" gettydefs(4)
.xx "group IDs." "" "setuid, setgid: set user and" "" setuid(2)
.xx "" "/getutid, getutline, pututline," "setutent, endutent, utmpname:/" "" getut(3C)
.xx "stream." "setbuf," "setvbuf: assign buffering to a" "" setbuf(3S)
.xx "data in a/" "sputl," "sgetl: access long integer" "" sputl(3X)
.xx "operations." "shmctl:" "shared memory control" "" shmctl(2)
.xx "" "shmop:" "shared memory operations." "" shmop(2)
.xx "" "shmget: get" "shared memory segment." "" shmget(2)
.xx "" "system: issue a" "shell command from Fortran." "" system(3F)
.xx "" "system: issue a" "shell command." "" system(3S)
.xx "operations." "" "shmctl: shared memory control" "" shmctl(2)
.xx "segment." "" "shmget: get shared memory" "" shmget(2)
.xx "operations." "" "shmop: shared memory" "" shmop(2)
.xx "transfer-of-sign intrinsic/" "" "sign, isign, dsign: Fortran" "" sign(3F)
.xx "" "pause: suspend process until" "signal." "" pause(2)
.xx "" "what to do upon receipt of a" "signal." "signal: specify" signal(2)
.xx "" "action on receipt of a system" "signal." "/specify Fortran" signal(3F)
.xx "on receipt of a system/" "" "signal: specify Fortran action" "" signal(3F)
.xx "upon receipt of a signal." "" "signal: specify what to do" "" signal(2)
.xx "of processes." "kill: send a" "signal to a process or a group" "" kill(2)
.xx "" "ssignal, gsignal: software" "signals." "" ssignal(3C)
.xx "generator." "rand, srand:" "simple random-number" "" rand(3C)
.xx "atan, atan2: trigonometric/" "" "sin, cos, tan, asin, acos," "" trig(3M)
.xx "intrinsic function." "" "sin, dsin, csin: Fortran sine" "" sin(3F)
.xx "" "sin, dsin, csin: Fortran" "sine intrinsic function." "" sin(3F)
.xx "" "/dsinh: Fortran hyperbolic" "sine intrinsic function." "" sinh(3F)
.xx "functions." "" "sinh, cosh, tanh: hyperbolic" "" sinh(3M)
.xx "hyperbolic sine intrinsic/" "" "sinh, dsinh: Fortran" "" sinh(3F)
.xx "interval." "" "sleep: suspend execution for" "" sleep(3C)
.xx "current/" "ttyslot: find the" "slot in the utmp file of the" "" ttyslot(3C)
.xx "" "int, ifix, idint, real, float," "sngl, dble, cmplx, dcmplx,/" "" ftype(3F)
.xx "" "ssignal, gsignal:" "software signals." "" ssignal(3C)
.xx "" "qsort: quicker" "sort." "" qsort(3C)
.xx "" "bsearch: binary search a" "sorted table." "" bsearch(3C)
.xx "" "brk, sbrk: change data segment" "space allocation." "" brk(2)
.xx "" "fspec: format" "specification in text files." "" fspec(4)
.xx "receipt of a system/" "signal:" "specify Fortran action on" "" signal(3F)
.xx "receipt of a signal." "signal:" "specify what to do upon" "" signal(2)
.xx "used by getty." "gettydefs:" "speed and terminal settings" "" gettydefs(4)
.xx "output." "printf, fprintf," "sprintf: print formatted" "" printf(3S)
.xx "integer data in a/" "" "sputl, sgetl: access long" "" sputl(3X)
.xx "square root intrinsic/" "" "sqrt, dsqrt, csqrt: Fortran" "" sqrt(3F)
.xx "power,/" "exp, log, log10, pow," "sqrt: exponential, logarithm," "" exp(3M)
.xx "" "exponential, logarithm, power," "square root functions." "/sqrt:" exp(3M)
.xx "" "sqrt, dsqrt, csqrt: Fortran" "square root intrinsic/" "" sqrt(3F)
.xx "generator." "irand, rand," "srand: random number" "" rand(3F)
.xx "generator." "rand," "srand: simple random-number" "" rand(3C)
.xx "" "/nrand48, mrand48, jrand48," "srand48, seed48, lcong48:/" "" drand48(3C)
.xx "input." "scanf, fscanf," "sscanf: convert formatted" "" scanf(3S)
.xx "signals." "" "ssignal, gsignal: software" "" ssignal(3C)
.xx "package." "stdio:" "standard buffered input/output" "" stdio(3S)
.xx "communication package." "ftok:" "standard interprocess" "" stdipc(3C)
.xx "system call." "" "stat: data returned by stat" "" stat(5)
.xx "" "" "stat, fstat: get file status." "" stat(2)
.xx "" "stat: data returned by" "stat system call." "" stat(5)
.xx "" "ustat: get file system" "statistics." "" ustat(2)
.xx "" "feof, clearerr, fileno: stream" "status inquiries." "ferror," ferror(3S)
.xx "" "stat, fstat: get file" "status." "" stat(2)
.xx "input/output package." "" "stdio: standard buffered" "" stdio(3S)
.xx "" "" "stime: set time." "" stime(2)
.xx "" "wait for child process to" "stop or terminate." "wait:" wait(2)
.xx "strncmp, strcpy, strncpy,/" "" "strcat, strncat, strcmp," "" string(3C)
.xx "" "/strcpy, strncpy, strlen," "strchr, strrchr, strpbrk,/" "" string(3C)
.xx "strncpy,/" "strcat, strncat," "strcmp, strncmp, strcpy," "" string(3C)
.xx "" "/strncat, strcmp, strncmp," "strcpy, strncpy, strlen,/" "" string(3C)
.xx "" "/strrchr, strpbrk, strspn," "strcspn, strtok: string/" "" string(3C)
.xx "" "fflush: close or flush a" "stream." "fclose," fclose(3S)
.xx "" "fopen, freopen, fdopen: open a" "stream." "" fopen(3S)
.xx "" "reposition a file pointer in a" "stream." "fseek, rewind, ftell:" fseek(3S)
.xx "" "get character or word from a" "stream." "/getchar, fgetc, getw:" getc(3S)
.xx "" "fgets: get a string from a" "stream." "gets," gets(3S)
.xx "" "put character or word on a" "stream." "/putchar, fputc, putw:" putc(3S)
.xx "" "puts, fputs: put a string on a" "stream." "" puts(3S)
.xx "" "setvbuf: assign buffering to a" "stream." "setbuf," setbuf(3S)
.xx "" "/feof, clearerr, fileno:" "stream status inquiries." "" ferror(3S)
.xx "" "push character back into input" "stream." "ungetc:" ungetc(3S)
.xx "" "long integer and base-64 ASCII" "string." "/l64a: convert between" a64l(3C)
.xx "" "lge, lgt, lle, llt:" "string comparison intrinsic/" "" strcmp(3F)
.xx "" "convert date and time to" "string." "/asctime, tzset:" ctime(3C)
.xx "" "floating-point number to" "string." "/fcvt, gcvt: convert" ecvt(3C)
.xx "" "gps: graphical primitive" "string, format of graphical/" "" gps(4)
.xx "" "gets, fgets: get a" "string from a stream." "" gets(3S)
.xx "" "len: return length of Fortran" "string." "" len(3F)
.xx "" "puts, fputs: put a" "string on a stream." "" puts(3S)
.xx "" "strspn, strcspn, strtok:" "string operations." "/strpbrk," string(3C)
.xx "number." "strtod, atof: convert" "string to double-precision" "" strtod(3C)
.xx "" "strtol, atol, atoi: convert" "string to integer." "" strtol(3C)
.xx "" "/strncmp, strcpy, strncpy," "strlen, strchr, strrchr,/" "" string(3C)
.xx "strcpy, strncpy,/" "strcat," "strncat, strcmp, strncmp," "" string(3C)
.xx "" "strcat, strncat, strcmp," "strncmp, strcpy, strncpy,/" "" string(3C)
.xx "" "/strcmp, strncmp, strcpy," "strncpy, strlen, strchr,/" "" string(3C)
.xx "" "/strlen, strchr, strrchr," "strpbrk, strspn, strcspn,/" "" string(3C)
.xx "" "/strncpy, strlen, strchr," "strrchr, strpbrk, strspn,/" "" string(3C)
.xx "" "/strchr, strrchr, strpbrk," "strspn, strcspn, strtok:/" "" string(3C)
.xx "to double-precision number." "" "strtod, atof: convert string" "" strtod(3C)
.xx "" "/strpbrk, strspn, strcspn," "strtok: string operations." "" string(3C)
.xx "string to integer." "" "strtol, atol, atoi: convert" "" strtol(3C)
.xx "" "intro: introduction to" "subroutines and libraries." "" intro(3)
.xx "" "plot: graphics interface" "subroutines." "" plot(3X)
.xx "" "return location of Fortran" "substring." "index:" index(3F)
.xx "" "sync: update" "super-block." "" sync(2)
.xx "interval." "sleep:" "suspend execution for" "" sleep(3C)
.xx "" "pause:" "suspend process until signal." "" pause(2)
.xx "" "" "swab: swap bytes." "" swab(3C)
.xx "" "swab:" "swap bytes." "" swab(3C)
.xx "file/" "ldgetname: retrieve" "symbol name for common object" "" ldgetname(3X)
.xx "" "name for common object file" "symbol table entry." "/symbol" ldgetname(3X)
.xx "object/" "/compute the index of a" "symbol table entry of a common" "" ldtbindex(3X)
.xx "" "ldtbread: read an indexed" "symbol table entry of a common/" "" ldtbread(3X)
.xx "" "syms: common object file" "symbol table format." "" syms(4)
.xx "object/" "ldtbseek: seek to the" "symbol table of a common" "" ldtbseek(3X)
.xx "symbol table format." "" "syms: common object file" "" syms(4)
.xx "" "" "sync: update super-block." "" sync(2)
.xx "error/" "perror, errno," "sys_errlist, sys_nerr: system" "" perror(3C)
.xx "" "perror, errno, sys_errlist," "sys_nerr: system error/" "" perror(3C)
.xx "" "binary search a sorted" "table." "bsearch:" bsearch(3C)
.xx "" "for common object file symbol" "table entry." "/symbol name" ldgetname(3X)
.xx "" "/compute the index of a symbol" "table entry of a common object/" "" ldtbindex(3X)
.xx "file." "/read an indexed symbol" "table entry of a common object" "" ldtbread(3X)
.xx "" "common object file symbol" "table format." "syms:" syms(4)
.xx "" "master device information" "table." "master:" master(4)
.xx "" "mnttab: mounted file system" "table." "" mnttab(4)
.xx "" "ldtbseek: seek to the symbol" "table of a common object file." "" ldtbseek(3X)
.xx "" "hdestroy: manage hash search" "tables." "hsearch, hcreate," hsearch(3C)
.xx "trigonometric/" "sin, cos," "tan, asin, acos, atan, atan2:" "" trig(3M)
.xx "intrinsic function." "" "tan, dtan: Fortran tangent" "" tan(3F)
.xx "" "tan, dtan: Fortran" "tangent intrinsic function." "" tan(3F)
.xx "" "/dtanh: Fortran hyperbolic" "tangent intrinsic function." "" tanh(3F)
.xx "hyperbolic tangent intrinsic/" "" "tanh, dtanh: Fortran" "" tanh(3F)
.xx "" "sinh, cosh," "tanh: hyperbolic functions." "" sinh(3M)
.xx "search trees." "tsearch, tfind," "tdelete, twalk: manage binary" "" tsearch(3C)
.xx "temporary file." "tmpnam," "tempnam: create a name for a" "" tmpnam(3S)
.xx "" "tmpfile: create a" "temporary file." "" tmpfile(3S)
.xx "" "tempnam: create a name for a" "temporary file." "tmpnam," tmpnam(3S)
.xx "terminals." "" "term: conventional names for" "" term(5)
.xx "" "term: format of compiled" "term file.." "" term(4)
.xx "file.." "" "term: format of compiled term" "" term(4)
.xx "" "terminfo:" "terminal capability data base." "" terminfo(4)
.xx "" "generate file name for" "terminal." "ctermid:" ctermid(3S)
.xx "" "dial: establish an out-going" "terminal line connection." "" dial(3C)
.xx "getty." "gettydefs: speed and" "terminal settings used by" "" gettydefs(4)
.xx "" "isatty: find name of a" "terminal." "ttyname," ttyname(3C)
.xx "" "term: conventional names for" "terminals." "" term(5)
.xx "" "abort:" "terminate Fortran program." "" abort(3F)
.xx "" "exit, _exit:" "terminate process." "" exit(2)
.xx "" "for child process to stop or" "terminate." "wait: wait" wait(2)
.xx "data base." "" "terminfo: terminal capability" "" terminfo(4)
.xx "" "fspec: format specification in" "text files." "" fspec(4)
.xx "" "plock: lock process," "text, or data in memory." "" plock(2)
.xx "binary search trees." "tsearch," "tfind, tdelete, twalk: manage" "" tsearch(3C)
.xx "" "mclock: return Fortran" "time accounting." "" mclock(3F)
.xx "" "" "time: get time." "" time(2)
.xx "" "profil: execution" "time profile." "" profil(2)
.xx "" "up an environment at login" "time." "profile: setting" profile(4)
.xx "" "stime: set" "time." "" stime(2)
.xx "" "time: get" "time." "" time(2)
.xx "" "tzset: convert date and" "time to string." "/asctime," ctime(3C)
.xx "" "clock: report CPU" "time used." "" clock(3C)
.xx "process times." "" "times: get process and child" "" times(2)
.xx "" "get process and child process" "times." "times:" times(2)
.xx "" "file access and modification" "times." "utime: set" utime(2)
.xx "file." "" "tmpfile: create a temporary" "" tmpfile(3S)
.xx "for a temporary file." "" "tmpnam, tempnam: create a name" "" tmpnam(3S)
.xx "" "/tolower, _toupper, _tolower," "toascii: translate characters." "" conv(3C)
.xx "" "popen, pclose: initiate pipe" "to/from a process." "" popen(3S)
.xx "" "toupper, tolower, _toupper," "_tolower, toascii: translate/" "" conv(3C)
.xx "toascii: translate/" "toupper," "tolower, _toupper, _tolower," "" conv(3C)
.xx "translate/" "toupper, tolower," "_toupper, _tolower, toascii:" "" conv(3C)
.xx "_tolower, toascii: translate/" "" "toupper, tolower, _toupper," "" conv(3C)
.xx "" "ptrace: process" "trace." "" ptrace(2)
.xx "" "sign, isign, dsign: Fortran" "transfer-of-sign intrinsic/" "" sign(3F)
.xx "" "/_toupper, _tolower, toascii:" "translate characters." "" conv(3C)
.xx "" "ftw: walk a file" "tree." "" ftw(3C)
.xx "" "twalk: manage binary search" "trees." "/tfind, tdelete," tsearch(3C)
.xx "" "tan, asin, acos, atan, atan2:" "trigonometric functions." "/cos," trig(3M)
.xx "twalk: manage binary search/" "" "tsearch, tfind, tdelete," "" tsearch(3C)
.xx "a terminal." "" "ttyname, isatty: find name of" "" ttyname(3C)
.xx "utmp file of the current/" "" "ttyslot: find the slot in the" "" ttyslot(3C)
.xx "" "tsearch, tfind, tdelete," "twalk: manage binary search/" "" tsearch(3C)
.xx "" "ichar, char: explicit Fortran" "type conversion." "/dcmplx," ftype(3F)
.xx "types." "" "types: primitive system data" "" types(5)
.xx "" "types: primitive system data" "types." "" types(5)
.xx "" "/localtime, gmtime, asctime," "tzset: convert date and time/" "" ctime(3C)
.xx "" "getpw: get name from" "UID." "" getpw(3C)
.xx "limits." "" "ulimit: get and set user" "" ulimit(2)
.xx "creation mask." "" "umask: set and get file" "" umask(2)
.xx "" "" "umount: unmount a file system." "" umount(2)
.xx "UNIX system." "" "uname: get name of current" "" uname(2)
.xx "into input stream." "" "ungetc: push character back" "" ungetc(3S)
.xx "" "/seed48, lcong48: generate" "uniformly distributed/" "" drand48(3C)
.xx "" "mktemp: make a" "unique file name." "" mktemp(3C)
.xx "entry." "" "unlink: remove directory" "" unlink(2)
.xx "" "umount:" "unmount a file system." "" umount(2)
.xx "" "lfind: linear search and" "update." "lsearch," lsearch(3C)
.xx "" "sync:" "update super-block." "" sync(2)
.xx "" "setuid, setgid: set" "user and group IDs." "" setuid(2)
.xx "" "character login name of the" "user." "cuserid: get" cuserid(3S)
.xx "" "/getgid, getegid: get real" "user, effective user, real/" "" getuid(2)
.xx "" "environ:" "user environment." "" environ(5)
.xx "" "ulimit: get and set" "user limits." "" ulimit(2)
.xx "" "logname: return login name of" "user." "" logname(3X)
.xx "" "/get real user, effective" "user, real group, and/" "" getuid(2)
.xx "" "the utmp file of the current" "user." "/find the slot in" ttyslot(3C)
.xx "statistics." "" "ustat: get file system" "" ustat(2)
.xx "modification times." "" "utime: set file access and" "" utime(2)
.xx "" "utmp, wtmp:" "utmp and wtmp entry formats." "" utmp(4)
.xx "" "endutent, utmpname: access" "utmp file entry." "/setutent," getut(3C)
.xx "" "ttyslot: find the slot in the" "utmp file of the current user." "" ttyslot(3C)
.xx "entry formats." "" "utmp, wtmp: utmp and wtmp" "" utmp(4)
.xx "" "/pututline, setutent, endutent," "utmpname: access utmp file/" "" getut(3C)
.xx "" "abs: return integer absolute" "value." "" abs(3C)
.xx "" "cabs, zabs: Fortran absolute" "value." "abs, iabs, dabs," abs(3F)
.xx "" "getenv: return" "value for environment name." "" getenv(3C)
.xx "" "ceiling, remainder, absolute" "value functions." "/fabs: floor," floor(3M)
.xx "" "putenv: change or add" "value to environment." "" putenv(3C)
.xx "values." "" "values: machine-dependent" "" values(5)
.xx "" "values: machine-dependent" "values." "" values(5)
.xx "" "/print formatted output of a" "varargs argument list." "" vprintf(3S)
.xx "" "/print formatted output of a" "varargs argument list." "" vprintf(3X)
.xx "argument list." "" "varargs: handle variable" "" varargs(5)
.xx "" "varargs: handle" "variable argument list." "" varargs(5)
.xx "" "return Fortran environment" "variable." "getenv:" getenv(3F)
.xx "" "option letter from argument" "vector." "getopt: get" getopt(3C)
.xx "" "assert:" "verify program assertion." "" assert(3X)
.xx "formatted output of/" "vprintf," "vfprintf, vsprintf: print" "" vprintf(3S)
.xx "formatted output of/" "vprintf," "vfprintf, vsprintf: print" "" vprintf(3X)
.xx "" "file system: format of system" "volume." "" fs(4)
.xx "print formatted output of a/" "" "vprintf, vfprintf, vsprintf:" "" vprintf(3S)
.xx "print formatted output of a/" "" "vprintf, vfprintf, vsprintf:" "" vprintf(3X)
.xx "output of/" "vprintf, vfprintf," "vsprintf: print formatted" "" vprintf(3S)
.xx "output of/" "vprintf, vfprintf," "vsprintf: print formatted" "" vprintf(3X)
.xx "or terminate." "wait:" "wait for child process to stop" "" wait(2)
.xx "to stop or terminate." "" "wait: wait for child process" "" wait(2)
.xx "" "ftw:" "walk a file tree." "" ftw(3C)
.xx "signal." "signal: specify" "what to do upon receipt of a" "" signal(2)
.xx "" "chdir: change" "working directory." "" chdir(2)
.xx "" "get path-name of current" "working directory." "getcwd:" getcwd(3C)
.xx "" "write:" "write on a file." "" write(2)
.xx "" "putpwent:" "write password file entry." "" putpwent(3C)
.xx "" "" "write: write on a file." "" write(2)
.xx "" "open: open for reading or" "writing." "" open(2)
.xx "" "utmp, wtmp: utmp and" "wtmp entry formats." "" utmp(4)
.xx "formats." "utmp," "wtmp: utmp and wtmp entry" "" utmp(4)
.xx "Fortran bitwise/" "and, or," "xor, not, lshift, rshift:" "" bool(3F)
.xx "" "j0, j1, jn," "y0, y1, yn: Bessel functions." "" bessel(3M)
.xx "" "j0, j1, jn, y0," "y1, yn: Bessel functions." "" bessel(3M)
.xx "" "j0, j1, jn, y0, y1," "yn: Bessel functions." "" bessel(3M)
.xx "" "abs, iabs, dabs, cabs," "zabs: Fortran absolute value." "" abs(3F)
