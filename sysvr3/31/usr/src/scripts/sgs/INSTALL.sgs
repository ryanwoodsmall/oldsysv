#ident	"@(#)pkg.sgs:INSTALL.sgs	1.15"
#
# Multiple Floppy INSTALL Script
#
#
# Save mount point of floppy (INSPATH), package name (PKGNAME) and
# information for the mount & umount commands (mntdev & mntname).
#	Note that \fILAST\fR should be set equal to the number of
#	floppy diskettes in the set.  In this example, there are 3 floppies.
#

INSPATH=/install/new
PKGNAME=`cat ${INSPATH}/usr/options/sgs.name`
LAST=3
if
	test -b "$1"
then
	mntdev=$1
elif
	test -b /dev/diskette
then
	mntdev=/dev/diskette
elif
	test -b /dev/install
then
	mntdev=/dev/install
else
	echo "**ERROR**   Can't find mount device"
	exit
fi
mntname=${2:-/install}

echo "Installing the ${PKGNAME}."
echo "Copyright (c) 1985 AT&T"
echo "All Rights Reserved"

#
# Check that the necessary packages have already been installed.
#	If this package has no dependencies, then the following code
#	is deleted.
#

if
	test ! -s /usr/options/dfm.name
then
	echo "**ERROR**   ${PKGNAME} cannot be installed --"
	echo "It requires the Directory and File Management Utilities to be installed first."
	exit
fi

# Check that an old Issue and Version of the package will not accidentally
#	 install over a later Issue and Version
#

if
	test -r /usr/options/sgs.name
then		 #package is already on machine - check for Issue and Version
	ISS=`expr "\`cat /usr/options/sgs.name\`" : '.*Issue[ 	]*\([^ 	]\).*'`
	VER=`expr "\`cat /usr/options/sgs.name\`" : '.*Version[ 	]*\([^ 	]\).*'`
	if
		test -n "$ISS"
	then
		FISS=`expr "\`cat $INSPATH/usr/options/sgs.name\`" : '.*Issue[ 	]*\([^ 	]\).*'`
		FVER=`expr "\`cat $INSPATH/usr/options/sgs.name\`" : '.*Version[ 	]*\([^ 	]\).*'`

		if
			test $ISS -gt $FISS
		then
			echo "**WARNING**  This will install an older"
			echo "Issue/Version ($FISS/$FVER) over the current Issue/Version ($ISS/$VER)"
			answer=""
			while 
				[ "$answer" != y -a "$answer" != n ]
			do
				echo "Type 'y' to install over current Issue or\c"
				echo " 'n' to stop installation:  \c"
				read answer
				case $answer in
					n)	exit
						;;
				
					y)	;; #continue installation
				esac
			done
		elif
			test $ISS -eq $FISS
		then
			if
				test $VER -gt $FVER
			then
				echo "**WARNING**  This will install an older"
				echo "Issue/Version ($FISS/$FVER) over the current Issue/Version ($ISS/$VER)"
				answer=""
				while 
					[ "$answer" != y -a "$answer" != n ]
				do
					echo "Type 'y' to install over current Issue or\c"
					echo " 'n' to stop installation:  \c"
					read answer
					case $answer in
						n)	exit
							;;
					
						y)	;; #continue installation
					esac
				done
			fi
		fi
	fi
fi

#
# Check if domestic version of libcrypt must be saved
#

if [ -s /usr/options/crypt.name -a -s /usr/lib/libcrypt.a ]
then
	echo "Saving domestic version of libcrypt in /usr/lib/libcrypt_d.a."
	mv -f /usr/lib/libcrypt.a /usr/lib/libcrypt_d.a
fi


#
# Begin loop for multiple floppies
#

expect=1
while
	[ $expect -le $LAST ]
do
	if
		[ $expect -gt 1 ]
	then
		cd /
		/etc/umount $mntdev 2>/dev/null
		echo "Remove floppy and insert floppy number $expect"
		echo "Type <return> when ready:  \c"
		read answer
		/etc/mount $mntdev $mntname -r 2>/dev/null
	fi

	#
	# Check to make sure this is the correct floppy of the set.
	#

	answer=""
	while
		[ `cat /install/install/ORDER` != $expect -a "$answer" != y ]
	do
		echo "**WARNING**   Floppy out of sequence"
		echo "Expecting floppy diskette number $expect"
		while
			[ "$answer" != y -a "$answer" != n ]
		do
			echo "Type 'y' to continue or \c"
			echo "'n' to try another floppy:  \c"
			read answer
		done
		case $answer in
			n)	cd /
				/etc/umount $mntdev 2>/dev/null
				echo "Remove floppy and insert correct floppy"
				echo "Type <return> when ready:  \c"
				read answer

				#
				# Reset answer to ""
				# check to make sure that this
				# is now the correct floppy
				#

				answer=""
				/etc/mount $mntdev $mntname -r 2>/dev/null
				;;

			y)	expect=`cat /install/install/ORDER`
				;;
		esac
	done

	#
	# How much space is needed by this floppy?
	#	If the floppy contains packed or cpio files,
	#	the space needs should be hard coded and verified
	#	each time there is a new delivery of the source code.
	#	e.g. The following three lines would be replaced by:
	#	     USRneeds=250
	#	     ROOTneeds=100
	#

	USRneeds=`expr "\`du -s ${INSPATH}/usr\`" : "\([0-9]*\).*"`
	ROOTneeds=`expr "\`du -s ${INSPATH}\`" : "\([0-9]*\).*"`
	ROOTneeds=`expr ${ROOTneeds} - ${USRneeds}`

	#
	# How much space is available in the necessary filesystems?
	#

	USRspace=`expr "\`df /usr 2>/dev/null\`" : '.*: *\([0-9]*\)'`
	ROOTspace=`expr "\`df / 2>/dev/null\`" : '.*: *\([0-9]*\)'`

	#
	# Now see if the floppy fits!
	# Inform the user and exit immediately, if not.
	#

	if
		[ "$USRspace" -lt "$USRneeds" ]
	then
		echo "**ERROR**   ${PKGNAME} cannot be installed --"
		echo "Not enough space on the hard disk."
		echo "There are $USRspace blocks available"
		echo "on the /usr file system --"
		echo "$USRneeds blocks are needed."
		exit
	elif
		[ "$ROOTspace" -lt "$ROOTneeds" ]  
	then
		echo "**ERROR**   ${PKGNAME} cannot be installed --"
		echo "Not enough space on the hard disk."
		echo "There are $ROOTspace blocks available"
		echo "on the / (root) file system --"
		echo "$ROOTneeds blocks are needed."
		echo "Profiled libraries will now be installed in /usr/lib/libp"
		echo "You must remove files in /lib/libp or"
		echo "move them to /usr/tmp in order to install this package."
		exit
	fi

	cd ${INSPATH}
	echo "The following files are being installed:"
	find . -print | cpio -pduvm /

	#
	# Increment number for next expected floppy.
	#

	echo "Floppy diskette number $expect is complete"
	expect=`expr $expect + 1`
done

#
# restore domestic version of libcrypt and save international version
# if necessary
#

if [ -s /usr/options/crypt.name -a -s /usr/lib/libcrypt_d.a ]
then
	mv -f /usr/lib/libcrypt.a /usr/lib/libcrypt_i.a
	mv -f /usr/lib/libcrypt_d.a /usr/lib/libcrypt.a
fi

#libmalloc.a now resides in /usr/lib; remove old version if it exists

if [ -f /lib/libmalloc.a ]
then
	rm -f /lib/libmalloc.a
fi

#The profiled libraries now reside in /usr/lib/libp; get rid of old ones
#in /lib/libp and ask the user to clean up any others in that directory.

if [ -d /lib/libp ]
then
	rm -f /lib/libp/libc.a /lib/libp/libm.a /lib/libp/libmalloc.a
fi


if [ "`ls /lib/libp | wc -l`" -eq "0" ]
then
	cd /lib
	rm -r libp
else
	echo "The profiled libraries MUST be installed in /usr/lib/libp."
	echo "You must move the following files from /lib/libp to /usr/lib/libp:"
	ls /lib/libp
fi

#
# Give user closing message
#

echo "Installation of the ${PKGNAME} is complete."
exit


