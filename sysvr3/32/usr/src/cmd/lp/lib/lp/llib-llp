/*LINTLIBRARY*/

/*	from file Syscalls.c */
# include	<sys/types.h>
# include	<sys/stat.h>
# include	<errno.h>
_Access(s, i)
char	*s;
int	i;
{	static  _returned_value;
	return _returned_value;
}
_Chdir(s)
char    *s;
{	static  _returned_value;
	return _returned_value;
}
_Chmod(s, i)
char    *s;
int     i;
{	static  _returned_value;
	return _returned_value;
}
_Chown(s, i, j)
char    *s;
int     i;
int     j;
{	static  _returned_value;
	return _returned_value;
}
_Close(i)
int     i;
{	static  _returned_value;
	return _returned_value;
}
_Creat(s, i)
char    *s;
int     i;
{	static  _returned_value;
	return _returned_value;
}

/*VARARGS2*/
_Fcntl(i, j, k)
int     i;
int     j;
int     k;
{	static  _returned_value;
	return _returned_value;
}
_Fstat(i, st)
int		i;
struct stat	*st;
{	static  _returned_value;
	return _returned_value;
}
_Link(s1, s2)
char    *s1;
char	*s2;
{	static  _returned_value;
	return _returned_value;
}

/*VARARGS2*/
_Mknod(s, i, j)
char    *s;
int     i;
int     j;
{	static  _returned_value;
	return _returned_value;
}

/*VARARGS2*/
_Open(s, i, j)
char    *s;
int     i;
int	j;
{	static  _returned_value;
	return _returned_value;
}
_Read(i, s, j)
int     i;
char    *s;
unsigned	j;
{	static  _returned_value;
	return _returned_value;
}
_Stat(s, st)
char		*s;
struct stat	*st;
{	static  _returned_value;
	return _returned_value;
}
_Unlink(s)
char    *s;
{	static  _returned_value;
	return _returned_value;
}
_Wait(i)
int     *i;
{	static  _returned_value;
	return _returned_value;
}
_Write(i, s, j)
int     i;
char    *s;
unsigned	j;
{	static  _returned_value;
	return _returned_value;
}

/*	from file addlist.c */
#include "string.h"
#include "lp.h"

/**
 ** addlist() - ADD ITEM TO (char **) LIST
 **/
int			addlist (plist, item)
	register char		***plist,
				*item;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file appendlist.c */
/**
 ** addlist() - ADD ITEM TO (char **) LIST
 **/
int			appendlist (plist, item)
	register char		***plist,
				*item;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file alerts.c */
#include "stdio.h"
#include "limits.h"
#include "unistd.h"

/**
 ** putalert() - WRITE ALERT TO FILES
 **/
int			putalert (parent, name, alertp)
	char			*parent,
				*name;
	FALERT			*alertp;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** getalert() - EXTRACT ALERT FROM FILES
 **/
FALERT			*getalert (parent, name)
	char			*parent,
				*name;
{	static FALERT			* _returned_value;
	return _returned_value;
}

/**
 ** delalert() - DELETE ALERT FILES
 **/
int			delalert (parent, name)
	char			*parent,
				*name;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** envlist() - PRINT OUT ENVIRONMENT LIST SAFELY
 **/

/**
 ** printalert() - PRINT ALERT DESCRIPTION
 **/
void			printalert (fp, alertp, isfault)
	register FILE		*fp;
	register FALERT		*alertp;
	int			isfault;
{
}

/*	from file charset.c */
/**
 ** search_cslist() - SEARCH CHARACTER SET ALIASES FOR CHARACTER SET
 **/
char			*search_cslist (item, list)
	register char		*item;
	register char		**list;
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file cs_strcmp.c */
int
cs_strcmp(s1, s2)
register char *s1, *s2;
{	static int
 _returned_value;
	return _returned_value;
}

/*	from file cs_strncmp.c */
int
cs_strncmp(s1, s2, n)
register char *s1, *s2;
register n;
{	static int
 _returned_value;
	return _returned_value;
}

/*	from file curdir.c */
#include "fs.h"
curdir( str )
char	*str;
{	static  _returned_value;
	return _returned_value;
}

/*	from file dellist.c */
/**
 ** dellist() - REMOVE ITEM FROM (char **) LIST
 **/
int			dellist (plist, item)
	register char		***plist,
				*item;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file dashos.c */
/**
 ** dashos() - PARSE -o OPTIONS, (char *) --> (char **)
 **/
char			**dashos (o)
	register char		*o;
{	static char			** _returned_value;
	return _returned_value;
}

/*	from file dirs.c */
/**
 ** mkdir_lpdir()
 **/
int			mkdir_lpdir (path, mode)
	char			*path;
	int			mode;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file duplist.c */
/**
 ** duplist() - DUPLICATE A LIST OF STRINGS
 **/
char			**duplist (src)
	register char		**src;
{	static char			** _returned_value;
	return _returned_value;
}

/*	from file files.c */
#include "fcntl.h"
#include "pwd.h"

/**
 ** open_lpfile() - OPEN AND LOCK A FILE; REUSE STATIC BUFFER
 ** close_lpfile() - CLOSE FILE; RELEASE STATIC BUFFER
 **/

/*VARARGS2*/
FILE			*open_lpfile (path, type, mode)
	char			*path,
				*type;
	unsigned int		mode;
{	static FILE			* _returned_value;
	return _returned_value;
}
int			close_lpfile (fp)
	FILE			*fp;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** chown_lppath()
 **/
int			chown_lppath (path)
	char			*path;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** rmfile() - UNLINK FILE BUT NO COMPLAINT IF NOT THERE
 **/
int			rmfile (path)
	char			*path;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** loadline() - LOAD A ONE-LINE CHARACTER STRING FROM FILE
 **/
char			*loadline (path)
	char			*path;
{	static char			* _returned_value;
	return _returned_value;
}

/**
 ** loadstring() - LOAD A CHARACTER STRING FROM FILE
 **/
char			*loadstring (path)
	char			*path;
{	static char			* _returned_value;
	return _returned_value;
}

/**
 ** dumpstring() - DUMP CHARACTER STRING TO FILE
 **/
int			dumpstring (path, str)
	char			*path,
				*str;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file freelist.c */
/**
 ** freelist() - FREE ALL SPACE USED BY LIST
 **/
void			freelist (list)
	char			**list;
{
}

/*	from file getlist.c */
/**
 ** getlist() - CONSTRUCT LIST FROM STRING
 **/
char			**getlist (str, ws, hardsep)
	register char		*str,
				*ws;
	char			*hardsep;
{	static char			** _returned_value;
	return _returned_value;
}

/**
 ** unq_strdup()
 **/

/*	from file getname.c */
char			*getname ()
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file getpaths.c */
void			getpaths ()
{
}
void			getadminpaths (admin)
	char			*admin;
{
}

/**
 ** getprinterfile() - BUILD NAME OF PRINTER FILE
 **/
char			*getprinterfile (name, component)
	char			*name,
				*component;
{	static char			* _returned_value;
	return _returned_value;
}

/**
 ** getclassfile() - BUILD NAME OF CLASS FILE
 **/
char			*getclassfile (name)
	char			*name;
{	static char			* _returned_value;
	return _returned_value;
}

/**
 ** getfilterfile() - BUILD NAME OF FILTER TABLE FILE
 **/
char			*getfilterfile (table)
	char			*table;
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file getspooldir.c */
char			*getspooldir ()
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file isterminfo.c */
#include "search.h"

/**
 ** isterminfo() - SEE IF TYPE IS IN TERMINFO DATABASE
 **/
int			isterminfo (type)
	char			*type;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** _isterminfo()
 **/

/*	from file lenlist.c */
/**
 ** lenlist() - COMPUTE LENGTH OF LIST
 **/
int			lenlist (list)
	char			**list;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file makepath.c */
#include "varargs.h"

/**
 ** makepath() - CREATE PATHNAME FROM COMPONENTS
 **/

/*VARARGS0*/
char			*makepath (va_alist)
	va_dcl
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file makestr.c */
/**
 ** makestr() - CONSTRUCT SINGLE STRING FROM SEVERAL
 **/

/*VARARGS0*/
char			*makestr (va_alist)
	va_dcl
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file mergelist.c */
/**
 ** mergelist() - ADD CONTENT OF ONE LIST TO ANOTHER
 **/
int			mergelist (dstlist, srclist)
	register char		***dstlist,
				**srclist;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file printlist.c */
/**
 ** printlist_setup() - ARRANGE FOR CUSTOM PRINTING
 ** printlist_unsetup() - RESET STANDARD PRINTING
 **/
void			printlist_setup (prefix, suffix, sep, newline)
	char			*prefix,
				*suffix,
				*sep,
				*newline;
{
}
void			printlist_unsetup ()
{
}

/**
 ** printlist() - PRINT LIST ON OPEN CHANNEL
 **/
int			printlist (fp, list)
	register FILE		*fp;
	register char		**list;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** q_print() - PRINT STRING, QUOTING SEPARATOR CHARACTERS
 **/

/*	from file sdn.c */
/**
 ** printsdn() - PRINT A SCALED DECIMAL NUMBER NICELY
 **/
void			printsdn_setup (prefix, suffix, newline)
	char			*prefix,
				*suffix,
				*newline;
{
}
void			printsdn_unsetup ()
{
}
void			printsdn (fp, sdn)
	FILE			*fp;
	SCALED			sdn;
{
}

/*	from file sprintlist.c */
/**
 ** sprintlist() - FLATTEN (char **) LIST INTO (char *) LIST
 **/
char			*sprintlist (list)
	char			**list;
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file searchlist.c */
/**
 ** searchlist() - SEARCH (char **) LIST FOR ITEM
 **/
int			searchlist (item, list)
	register char		*item;
	register char		**list;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file set_charset.c */
#include "lp.set.h"

/**
 ** set_charset()
 **/
int			set_charset (char_set, putout, type)
	char			*char_set;
	int			putout;
	char			*type;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** cat_charset() - DUMP CONTENT OF CHARACTER SET DEF'N FILE
 **/

/*	from file set_pitch.c */
/**
 ** set_pitch()
 **/
int			set_pitch (str, which, putout)
	char			*str;
	int			which,
				putout;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file set_size.c */
/**
 ** set_size()
 **/
int			set_size (str, which, putout)
	char			*str;
	int			which,
				putout;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file sop.c */
/**
 ** sop_up_rest() - READ REST OF FILE INTO STRING
 **/
char			*sop_up_rest (fp, endsop)
	FILE			*fp;
	register char		*endsop;
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file strip.c */
/**
 ** strip() - STRIP LEADING AND TRAILING BLANKS
 **/
char			*strip (str)
	register char		*str;
{	static char			* _returned_value;
	return _returned_value;
}

/*	from file syntax.c */
#include "ctype.h"
int			syn_name (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}
int			syn_type (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}
int			syn_text (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}
int			syn_comment (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}
int			syn_machine_name (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}
int			syn_option (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}

/*	from file tidbit.c */
/**
 ** _Getsh() - GET TWO-BYTE SHORT FROM (char *) POINTER PORTABLY
 **/

/**
 ** tidbit() - TERMINFO DATABASE LOOKUP
 **/

/*VARARGS2*/
int			tidbit (term, cap, va_alist)
	char			*term,
				*cap;
	va_dcl
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** untidbit() - FREE SPACE ASSOCIATED WITH A TERMINFO ENTRY
 **/
void			untidbit (term)
	char			*term;
{
}

/**
 ** open_terminfo_file() - OPEN FILE FOR TERM ENTRY
 **/

/*	from file wherelist.c */
/**
 ** wherelist() - RETURN POINTER TO ITEM IN LIST
 **/
char			**wherelist (item, list)
	register char		*item;
	register char		**list;
{	static char			** _returned_value;
	return _returned_value;
}

/*	from file which.c */
/**
 ** isprinter() - SEE IF ARGUMENT IS A REAL PRINTER
 **/
int			isprinter (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** isclass() - SEE IF ARGUMENT IS A REAL CLASS
 **/
int			isclass (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}

/**
 ** isrequest() - SEE IF ARGUMENT LOOKS LIKE A REAL REQUEST
 **/
int			isrequest (str)
	char			*str;
{	static int			 _returned_value;
	return _returned_value;
}
int			isnumber (s)
	char			*s;
{	static int			 _returned_value;
	return _returned_value;
}
